# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _quickfix

def _swig_setattr(self,class_type,name,value):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    self.__dict__[name] = value

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    from weakref import proxy as weakref_proxy
except:
    weakref_proxy = lambda x: x


class Exception:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    def __repr__(self):
        return "<C FIX::Exception instance at %s>" % (self.this,)
    def __str__(*args): return _quickfix.Exception___str__(*args)
    def __init__(self, *args):
        _swig_setattr(self, Exception, 'this', _quickfix.new_Exception(*args))
        _swig_setattr(self, Exception, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Exception):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExceptionPtr(Exception):
    def __init__(self, this):
        _swig_setattr(self, Exception, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Exception, 'thisown', 0)
        _swig_setattr(self, Exception,self.__class__,Exception)
_quickfix.Exception_swigregister(ExceptionPtr)

class FieldNotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNotFound, name)
    def __repr__(self):
        return "<C FIX::FieldNotFound instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FieldNotFound, 'this', _quickfix.new_FieldNotFound(*args))
        _swig_setattr(self, FieldNotFound, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.FieldNotFound_field_set
    __swig_getmethods__["field"] = _quickfix.FieldNotFound_field_get
    def __del__(self, destroy=_quickfix.delete_FieldNotFound):
        try:
            if self.thisown: destroy(self)
        except: pass

class FieldNotFoundPtr(FieldNotFound):
    def __init__(self, this):
        _swig_setattr(self, FieldNotFound, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FieldNotFound, 'thisown', 0)
        _swig_setattr(self, FieldNotFound,self.__class__,FieldNotFound)
_quickfix.FieldNotFound_swigregister(FieldNotFoundPtr)

class FieldConvertError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldConvertError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FieldConvertError, name)
    def __repr__(self):
        return "<C FIX::FieldConvertError instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FieldConvertError, 'this', _quickfix.new_FieldConvertError(*args))
        _swig_setattr(self, FieldConvertError, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FieldConvertError):
        try:
            if self.thisown: destroy(self)
        except: pass

class FieldConvertErrorPtr(FieldConvertError):
    def __init__(self, this):
        _swig_setattr(self, FieldConvertError, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FieldConvertError, 'thisown', 0)
        _swig_setattr(self, FieldConvertError,self.__class__,FieldConvertError)
_quickfix.FieldConvertError_swigregister(FieldConvertErrorPtr)

class MessageParseError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageParseError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MessageParseError, name)
    def __repr__(self):
        return "<C FIX::MessageParseError instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MessageParseError, 'this', _quickfix.new_MessageParseError(*args))
        _swig_setattr(self, MessageParseError, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MessageParseError):
        try:
            if self.thisown: destroy(self)
        except: pass

class MessageParseErrorPtr(MessageParseError):
    def __init__(self, this):
        _swig_setattr(self, MessageParseError, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MessageParseError, 'thisown', 0)
        _swig_setattr(self, MessageParseError,self.__class__,MessageParseError)
_quickfix.MessageParseError_swigregister(MessageParseErrorPtr)

class InvalidMessage(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidMessage, name)
    def __repr__(self):
        return "<C FIX::InvalidMessage instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InvalidMessage, 'this', _quickfix.new_InvalidMessage(*args))
        _swig_setattr(self, InvalidMessage, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InvalidMessage):
        try:
            if self.thisown: destroy(self)
        except: pass

class InvalidMessagePtr(InvalidMessage):
    def __init__(self, this):
        _swig_setattr(self, InvalidMessage, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InvalidMessage, 'thisown', 0)
        _swig_setattr(self, InvalidMessage,self.__class__,InvalidMessage)
_quickfix.InvalidMessage_swigregister(InvalidMessagePtr)

class ConfigError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigError, name)
    def __repr__(self):
        return "<C FIX::ConfigError instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfigError, 'this', _quickfix.new_ConfigError(*args))
        _swig_setattr(self, ConfigError, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfigError):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfigErrorPtr(ConfigError):
    def __init__(self, this):
        _swig_setattr(self, ConfigError, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfigError, 'thisown', 0)
        _swig_setattr(self, ConfigError,self.__class__,ConfigError)
_quickfix.ConfigError_swigregister(ConfigErrorPtr)

class RuntimeError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeError, name)
    def __repr__(self):
        return "<C FIX::RuntimeError instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RuntimeError, 'this', _quickfix.new_RuntimeError(*args))
        _swig_setattr(self, RuntimeError, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RuntimeError):
        try:
            if self.thisown: destroy(self)
        except: pass

class RuntimeErrorPtr(RuntimeError):
    def __init__(self, this):
        _swig_setattr(self, RuntimeError, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RuntimeError, 'thisown', 0)
        _swig_setattr(self, RuntimeError,self.__class__,RuntimeError)
_quickfix.RuntimeError_swigregister(RuntimeErrorPtr)

class InvalidTagNumber(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTagNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTagNumber, name)
    def __repr__(self):
        return "<C FIX::InvalidTagNumber instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InvalidTagNumber, 'this', _quickfix.new_InvalidTagNumber(*args))
        _swig_setattr(self, InvalidTagNumber, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.InvalidTagNumber_field_set
    __swig_getmethods__["field"] = _quickfix.InvalidTagNumber_field_get
    if _newclass:field = property(_quickfix.InvalidTagNumber_field_get, _quickfix.InvalidTagNumber_field_set)
    def __del__(self, destroy=_quickfix.delete_InvalidTagNumber):
        try:
            if self.thisown: destroy(self)
        except: pass

class InvalidTagNumberPtr(InvalidTagNumber):
    def __init__(self, this):
        _swig_setattr(self, InvalidTagNumber, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InvalidTagNumber, 'thisown', 0)
        _swig_setattr(self, InvalidTagNumber,self.__class__,InvalidTagNumber)
_quickfix.InvalidTagNumber_swigregister(InvalidTagNumberPtr)

class RequiredTagMissing(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RequiredTagMissing, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RequiredTagMissing, name)
    def __repr__(self):
        return "<C FIX::RequiredTagMissing instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RequiredTagMissing, 'this', _quickfix.new_RequiredTagMissing(*args))
        _swig_setattr(self, RequiredTagMissing, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.RequiredTagMissing_field_set
    __swig_getmethods__["field"] = _quickfix.RequiredTagMissing_field_get
    if _newclass:field = property(_quickfix.RequiredTagMissing_field_get, _quickfix.RequiredTagMissing_field_set)
    def __del__(self, destroy=_quickfix.delete_RequiredTagMissing):
        try:
            if self.thisown: destroy(self)
        except: pass

class RequiredTagMissingPtr(RequiredTagMissing):
    def __init__(self, this):
        _swig_setattr(self, RequiredTagMissing, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RequiredTagMissing, 'thisown', 0)
        _swig_setattr(self, RequiredTagMissing,self.__class__,RequiredTagMissing)
_quickfix.RequiredTagMissing_swigregister(RequiredTagMissingPtr)

class TagNotDefinedForMessage(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagNotDefinedForMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TagNotDefinedForMessage, name)
    def __repr__(self):
        return "<C FIX::TagNotDefinedForMessage instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TagNotDefinedForMessage, 'this', _quickfix.new_TagNotDefinedForMessage(*args))
        _swig_setattr(self, TagNotDefinedForMessage, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.TagNotDefinedForMessage_field_set
    __swig_getmethods__["field"] = _quickfix.TagNotDefinedForMessage_field_get
    if _newclass:field = property(_quickfix.TagNotDefinedForMessage_field_get, _quickfix.TagNotDefinedForMessage_field_set)
    def __del__(self, destroy=_quickfix.delete_TagNotDefinedForMessage):
        try:
            if self.thisown: destroy(self)
        except: pass

class TagNotDefinedForMessagePtr(TagNotDefinedForMessage):
    def __init__(self, this):
        _swig_setattr(self, TagNotDefinedForMessage, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TagNotDefinedForMessage, 'thisown', 0)
        _swig_setattr(self, TagNotDefinedForMessage,self.__class__,TagNotDefinedForMessage)
_quickfix.TagNotDefinedForMessage_swigregister(TagNotDefinedForMessagePtr)

class NoTagValue(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTagValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoTagValue, name)
    def __repr__(self):
        return "<C FIX::NoTagValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoTagValue, 'this', _quickfix.new_NoTagValue(*args))
        _swig_setattr(self, NoTagValue, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.NoTagValue_field_set
    __swig_getmethods__["field"] = _quickfix.NoTagValue_field_get
    if _newclass:field = property(_quickfix.NoTagValue_field_get, _quickfix.NoTagValue_field_set)
    def __del__(self, destroy=_quickfix.delete_NoTagValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoTagValuePtr(NoTagValue):
    def __init__(self, this):
        _swig_setattr(self, NoTagValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoTagValue, 'thisown', 0)
        _swig_setattr(self, NoTagValue,self.__class__,NoTagValue)
_quickfix.NoTagValue_swigregister(NoTagValuePtr)

class IncorrectTagValue(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectTagValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectTagValue, name)
    def __repr__(self):
        return "<C FIX::IncorrectTagValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IncorrectTagValue, 'this', _quickfix.new_IncorrectTagValue(*args))
        _swig_setattr(self, IncorrectTagValue, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.IncorrectTagValue_field_set
    __swig_getmethods__["field"] = _quickfix.IncorrectTagValue_field_get
    def __del__(self, destroy=_quickfix.delete_IncorrectTagValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class IncorrectTagValuePtr(IncorrectTagValue):
    def __init__(self, this):
        _swig_setattr(self, IncorrectTagValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IncorrectTagValue, 'thisown', 0)
        _swig_setattr(self, IncorrectTagValue,self.__class__,IncorrectTagValue)
_quickfix.IncorrectTagValue_swigregister(IncorrectTagValuePtr)

class IncorrectDataFormat(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectDataFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectDataFormat, name)
    def __repr__(self):
        return "<C FIX::IncorrectDataFormat instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IncorrectDataFormat, 'this', _quickfix.new_IncorrectDataFormat(*args))
        _swig_setattr(self, IncorrectDataFormat, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.IncorrectDataFormat_field_set
    __swig_getmethods__["field"] = _quickfix.IncorrectDataFormat_field_get
    def __del__(self, destroy=_quickfix.delete_IncorrectDataFormat):
        try:
            if self.thisown: destroy(self)
        except: pass

class IncorrectDataFormatPtr(IncorrectDataFormat):
    def __init__(self, this):
        _swig_setattr(self, IncorrectDataFormat, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IncorrectDataFormat, 'thisown', 0)
        _swig_setattr(self, IncorrectDataFormat,self.__class__,IncorrectDataFormat)
_quickfix.IncorrectDataFormat_swigregister(IncorrectDataFormatPtr)

class IncorrectMessageStructure(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectMessageStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectMessageStructure, name)
    def __repr__(self):
        return "<C FIX::IncorrectMessageStructure instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IncorrectMessageStructure, 'this', _quickfix.new_IncorrectMessageStructure(*args))
        _swig_setattr(self, IncorrectMessageStructure, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IncorrectMessageStructure):
        try:
            if self.thisown: destroy(self)
        except: pass

class IncorrectMessageStructurePtr(IncorrectMessageStructure):
    def __init__(self, this):
        _swig_setattr(self, IncorrectMessageStructure, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IncorrectMessageStructure, 'thisown', 0)
        _swig_setattr(self, IncorrectMessageStructure,self.__class__,IncorrectMessageStructure)
_quickfix.IncorrectMessageStructure_swigregister(IncorrectMessageStructurePtr)

class DuplicateFieldNumber(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuplicateFieldNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DuplicateFieldNumber, name)
    def __repr__(self):
        return "<C FIX::DuplicateFieldNumber instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DuplicateFieldNumber, 'this', _quickfix.new_DuplicateFieldNumber(*args))
        _swig_setattr(self, DuplicateFieldNumber, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DuplicateFieldNumber):
        try:
            if self.thisown: destroy(self)
        except: pass

class DuplicateFieldNumberPtr(DuplicateFieldNumber):
    def __init__(self, this):
        _swig_setattr(self, DuplicateFieldNumber, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DuplicateFieldNumber, 'thisown', 0)
        _swig_setattr(self, DuplicateFieldNumber,self.__class__,DuplicateFieldNumber)
_quickfix.DuplicateFieldNumber_swigregister(DuplicateFieldNumberPtr)

class InvalidMessageType(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidMessageType, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidMessageType, name)
    def __repr__(self):
        return "<C FIX::InvalidMessageType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InvalidMessageType, 'this', _quickfix.new_InvalidMessageType(*args))
        _swig_setattr(self, InvalidMessageType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InvalidMessageType):
        try:
            if self.thisown: destroy(self)
        except: pass

class InvalidMessageTypePtr(InvalidMessageType):
    def __init__(self, this):
        _swig_setattr(self, InvalidMessageType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InvalidMessageType, 'thisown', 0)
        _swig_setattr(self, InvalidMessageType,self.__class__,InvalidMessageType)
_quickfix.InvalidMessageType_swigregister(InvalidMessageTypePtr)

class UnsupportedMessageType(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedMessageType, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedMessageType, name)
    def __repr__(self):
        return "<C FIX::UnsupportedMessageType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnsupportedMessageType, 'this', _quickfix.new_UnsupportedMessageType(*args))
        _swig_setattr(self, UnsupportedMessageType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnsupportedMessageType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnsupportedMessageTypePtr(UnsupportedMessageType):
    def __init__(self, this):
        _swig_setattr(self, UnsupportedMessageType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnsupportedMessageType, 'thisown', 0)
        _swig_setattr(self, UnsupportedMessageType,self.__class__,UnsupportedMessageType)
_quickfix.UnsupportedMessageType_swigregister(UnsupportedMessageTypePtr)

class UnsupportedVersion(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedVersion, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedVersion, name)
    def __repr__(self):
        return "<C FIX::UnsupportedVersion instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnsupportedVersion, 'this', _quickfix.new_UnsupportedVersion(*args))
        _swig_setattr(self, UnsupportedVersion, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnsupportedVersion):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnsupportedVersionPtr(UnsupportedVersion):
    def __init__(self, this):
        _swig_setattr(self, UnsupportedVersion, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnsupportedVersion, 'thisown', 0)
        _swig_setattr(self, UnsupportedVersion,self.__class__,UnsupportedVersion)
_quickfix.UnsupportedVersion_swigregister(UnsupportedVersionPtr)

class TagOutOfOrder(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagOutOfOrder, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TagOutOfOrder, name)
    def __repr__(self):
        return "<C FIX::TagOutOfOrder instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TagOutOfOrder, 'this', _quickfix.new_TagOutOfOrder(*args))
        _swig_setattr(self, TagOutOfOrder, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.TagOutOfOrder_field_set
    __swig_getmethods__["field"] = _quickfix.TagOutOfOrder_field_get
    if _newclass:field = property(_quickfix.TagOutOfOrder_field_get, _quickfix.TagOutOfOrder_field_set)
    def __del__(self, destroy=_quickfix.delete_TagOutOfOrder):
        try:
            if self.thisown: destroy(self)
        except: pass

class TagOutOfOrderPtr(TagOutOfOrder):
    def __init__(self, this):
        _swig_setattr(self, TagOutOfOrder, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TagOutOfOrder, 'thisown', 0)
        _swig_setattr(self, TagOutOfOrder,self.__class__,TagOutOfOrder)
_quickfix.TagOutOfOrder_swigregister(TagOutOfOrderPtr)

class RepeatedTag(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatedTag, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatedTag, name)
    def __repr__(self):
        return "<C FIX::RepeatedTag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RepeatedTag, 'this', _quickfix.new_RepeatedTag(*args))
        _swig_setattr(self, RepeatedTag, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.RepeatedTag_field_set
    __swig_getmethods__["field"] = _quickfix.RepeatedTag_field_get
    def __del__(self, destroy=_quickfix.delete_RepeatedTag):
        try:
            if self.thisown: destroy(self)
        except: pass

class RepeatedTagPtr(RepeatedTag):
    def __init__(self, this):
        _swig_setattr(self, RepeatedTag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RepeatedTag, 'thisown', 0)
        _swig_setattr(self, RepeatedTag,self.__class__,RepeatedTag)
_quickfix.RepeatedTag_swigregister(RepeatedTagPtr)

class RepeatingGroupCountMismatch(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatingGroupCountMismatch, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatingGroupCountMismatch, name)
    def __repr__(self):
        return "<C FIX::RepeatingGroupCountMismatch instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RepeatingGroupCountMismatch, 'this', _quickfix.new_RepeatingGroupCountMismatch(*args))
        _swig_setattr(self, RepeatingGroupCountMismatch, 'thisown', 1)
    __swig_setmethods__["field"] = _quickfix.RepeatingGroupCountMismatch_field_set
    __swig_getmethods__["field"] = _quickfix.RepeatingGroupCountMismatch_field_get
    if _newclass:field = property(_quickfix.RepeatingGroupCountMismatch_field_get, _quickfix.RepeatingGroupCountMismatch_field_set)
    def __del__(self, destroy=_quickfix.delete_RepeatingGroupCountMismatch):
        try:
            if self.thisown: destroy(self)
        except: pass

class RepeatingGroupCountMismatchPtr(RepeatingGroupCountMismatch):
    def __init__(self, this):
        _swig_setattr(self, RepeatingGroupCountMismatch, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RepeatingGroupCountMismatch, 'thisown', 0)
        _swig_setattr(self, RepeatingGroupCountMismatch,self.__class__,RepeatingGroupCountMismatch)
_quickfix.RepeatingGroupCountMismatch_swigregister(RepeatingGroupCountMismatchPtr)

class DoNotSend(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoNotSend, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DoNotSend, name)
    def __repr__(self):
        return "<C FIX::DoNotSend instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DoNotSend, 'this', _quickfix.new_DoNotSend(*args))
        _swig_setattr(self, DoNotSend, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DoNotSend):
        try:
            if self.thisown: destroy(self)
        except: pass

class DoNotSendPtr(DoNotSend):
    def __init__(self, this):
        _swig_setattr(self, DoNotSend, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DoNotSend, 'thisown', 0)
        _swig_setattr(self, DoNotSend,self.__class__,DoNotSend)
_quickfix.DoNotSend_swigregister(DoNotSendPtr)

class RejectLogon(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RejectLogon, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RejectLogon, name)
    def __repr__(self):
        return "<C FIX::RejectLogon instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RejectLogon, 'this', _quickfix.new_RejectLogon(*args))
        _swig_setattr(self, RejectLogon, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RejectLogon):
        try:
            if self.thisown: destroy(self)
        except: pass

class RejectLogonPtr(RejectLogon):
    def __init__(self, this):
        _swig_setattr(self, RejectLogon, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RejectLogon, 'thisown', 0)
        _swig_setattr(self, RejectLogon,self.__class__,RejectLogon)
_quickfix.RejectLogon_swigregister(RejectLogonPtr)

class SessionNotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SessionNotFound, name)
    def __repr__(self):
        return "<C FIX::SessionNotFound instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SessionNotFound, 'this', _quickfix.new_SessionNotFound(*args))
        _swig_setattr(self, SessionNotFound, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SessionNotFound):
        try:
            if self.thisown: destroy(self)
        except: pass

class SessionNotFoundPtr(SessionNotFound):
    def __init__(self, this):
        _swig_setattr(self, SessionNotFound, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SessionNotFound, 'thisown', 0)
        _swig_setattr(self, SessionNotFound,self.__class__,SessionNotFound)
_quickfix.SessionNotFound_swigregister(SessionNotFoundPtr)

class IOException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    def __repr__(self):
        return "<C FIX::IOException instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOException, 'this', _quickfix.new_IOException(*args))
        _swig_setattr(self, IOException, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOException):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOExceptionPtr(IOException):
    def __init__(self, this):
        _swig_setattr(self, IOException, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOException, 'thisown', 0)
        _swig_setattr(self, IOException,self.__class__,IOException)
_quickfix.IOException_swigregister(IOExceptionPtr)

class FieldBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldBase, name)
    def __repr__(self):
        return "<C FIX::FieldBase instance at %s>" % (self.this,)
    def __str__(*args): return _quickfix.FieldBase___str__(*args)
    def __init__(self, *args):
        _swig_setattr(self, FieldBase, 'this', _quickfix.new_FieldBase(*args))
        _swig_setattr(self, FieldBase, 'thisown', 1)
    def setField(*args): return _quickfix.FieldBase_setField(*args)
    def setString(*args): return _quickfix.FieldBase_setString(*args)
    def getField(*args): return _quickfix.FieldBase_getField(*args)
    def getString(*args): return _quickfix.FieldBase_getString(*args)
    def getValue(*args): return _quickfix.FieldBase_getValue(*args)
    def getLength(*args): return _quickfix.FieldBase_getLength(*args)
    def getTotal(*args): return _quickfix.FieldBase_getTotal(*args)
    def __lt__(*args): return _quickfix.FieldBase___lt__(*args)
    def __del__(self, destroy=_quickfix.delete_FieldBase):
        try:
            if self.thisown: destroy(self)
        except: pass

class FieldBasePtr(FieldBase):
    def __init__(self, this):
        _swig_setattr(self, FieldBase, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FieldBase, 'thisown', 0)
        _swig_setattr(self, FieldBase,self.__class__,FieldBase)
_quickfix.FieldBase_swigregister(FieldBasePtr)

class StringField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StringField, name)
    def __repr__(self):
        return "<C FIX::StringField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StringField, 'this', _quickfix.new_StringField(*args))
        _swig_setattr(self, StringField, 'thisown', 1)
    def setValue(*args): return _quickfix.StringField_setValue(*args)
    def getValue(*args): return _quickfix.StringField_getValue(*args)
    def __lt__(*args): return _quickfix.StringField___lt__(*args)
    def __gt__(*args): return _quickfix.StringField___gt__(*args)
    def __eq__(*args): return _quickfix.StringField___eq__(*args)
    def __ne__(*args): return _quickfix.StringField___ne__(*args)
    def __le__(*args): return _quickfix.StringField___le__(*args)
    def __ge__(*args): return _quickfix.StringField___ge__(*args)
    def __del__(self, destroy=_quickfix.delete_StringField):
        try:
            if self.thisown: destroy(self)
        except: pass

class StringFieldPtr(StringField):
    def __init__(self, this):
        _swig_setattr(self, StringField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StringField, 'thisown', 0)
        _swig_setattr(self, StringField,self.__class__,StringField)
_quickfix.StringField_swigregister(StringFieldPtr)

class CharField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CharField, name)
    def __repr__(self):
        return "<C FIX::CharField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CharField, 'this', _quickfix.new_CharField(*args))
        _swig_setattr(self, CharField, 'thisown', 1)
    def setValue(*args): return _quickfix.CharField_setValue(*args)
    def getValue(*args): return _quickfix.CharField_getValue(*args)
    def __del__(self, destroy=_quickfix.delete_CharField):
        try:
            if self.thisown: destroy(self)
        except: pass

class CharFieldPtr(CharField):
    def __init__(self, this):
        _swig_setattr(self, CharField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CharField, 'thisown', 0)
        _swig_setattr(self, CharField,self.__class__,CharField)
_quickfix.CharField_swigregister(CharFieldPtr)

__gt__ = _quickfix.__gt__

__le__ = _quickfix.__le__

__ge__ = _quickfix.__ge__

class DoubleField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleField, name)
    def __repr__(self):
        return "<C FIX::DoubleField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DoubleField, 'this', _quickfix.new_DoubleField(*args))
        _swig_setattr(self, DoubleField, 'thisown', 1)
    def setValue(*args): return _quickfix.DoubleField_setValue(*args)
    def getValue(*args): return _quickfix.DoubleField_getValue(*args)
    def __del__(self, destroy=_quickfix.delete_DoubleField):
        try:
            if self.thisown: destroy(self)
        except: pass

class DoubleFieldPtr(DoubleField):
    def __init__(self, this):
        _swig_setattr(self, DoubleField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DoubleField, 'thisown', 0)
        _swig_setattr(self, DoubleField,self.__class__,DoubleField)
_quickfix.DoubleField_swigregister(DoubleFieldPtr)

class IntField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IntField, name)
    def __repr__(self):
        return "<C FIX::IntField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IntField, 'this', _quickfix.new_IntField(*args))
        _swig_setattr(self, IntField, 'thisown', 1)
    def setValue(*args): return _quickfix.IntField_setValue(*args)
    def getValue(*args): return _quickfix.IntField_getValue(*args)
    def __del__(self, destroy=_quickfix.delete_IntField):
        try:
            if self.thisown: destroy(self)
        except: pass

class IntFieldPtr(IntField):
    def __init__(self, this):
        _swig_setattr(self, IntField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IntField, 'thisown', 0)
        _swig_setattr(self, IntField,self.__class__,IntField)
_quickfix.IntField_swigregister(IntFieldPtr)

class BoolField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BoolField, name)
    def __repr__(self):
        return "<C FIX::BoolField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BoolField, 'this', _quickfix.new_BoolField(*args))
        _swig_setattr(self, BoolField, 'thisown', 1)
    def setValue(*args): return _quickfix.BoolField_setValue(*args)
    def getValue(*args): return _quickfix.BoolField_getValue(*args)
    def __del__(self, destroy=_quickfix.delete_BoolField):
        try:
            if self.thisown: destroy(self)
        except: pass

class BoolFieldPtr(BoolField):
    def __init__(self, this):
        _swig_setattr(self, BoolField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BoolField, 'thisown', 0)
        _swig_setattr(self, BoolField,self.__class__,BoolField)
_quickfix.BoolField_swigregister(BoolFieldPtr)

class UtcTimeStampField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcTimeStampField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UtcTimeStampField, name)
    def __repr__(self):
        return "<C FIX::UtcTimeStampField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UtcTimeStampField, 'this', _quickfix.new_UtcTimeStampField(*args))
        _swig_setattr(self, UtcTimeStampField, 'thisown', 1)
    def setValue(*args): return _quickfix.UtcTimeStampField_setValue(*args)
    def getValue(*args): return _quickfix.UtcTimeStampField_getValue(*args)
    def __lt__(*args): return _quickfix.UtcTimeStampField___lt__(*args)
    def __eq__(*args): return _quickfix.UtcTimeStampField___eq__(*args)
    def __ne__(*args): return _quickfix.UtcTimeStampField___ne__(*args)
    def __del__(self, destroy=_quickfix.delete_UtcTimeStampField):
        try:
            if self.thisown: destroy(self)
        except: pass

class UtcTimeStampFieldPtr(UtcTimeStampField):
    def __init__(self, this):
        _swig_setattr(self, UtcTimeStampField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UtcTimeStampField, 'thisown', 0)
        _swig_setattr(self, UtcTimeStampField,self.__class__,UtcTimeStampField)
_quickfix.UtcTimeStampField_swigregister(UtcTimeStampFieldPtr)

class UtcDateField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcDateField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UtcDateField, name)
    def __repr__(self):
        return "<C FIX::UtcDateField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UtcDateField, 'this', _quickfix.new_UtcDateField(*args))
        _swig_setattr(self, UtcDateField, 'thisown', 1)
    def setValue(*args): return _quickfix.UtcDateField_setValue(*args)
    def getValue(*args): return _quickfix.UtcDateField_getValue(*args)
    def __lt__(*args): return _quickfix.UtcDateField___lt__(*args)
    def __eq__(*args): return _quickfix.UtcDateField___eq__(*args)
    def __ne__(*args): return _quickfix.UtcDateField___ne__(*args)
    def __del__(self, destroy=_quickfix.delete_UtcDateField):
        try:
            if self.thisown: destroy(self)
        except: pass

class UtcDateFieldPtr(UtcDateField):
    def __init__(self, this):
        _swig_setattr(self, UtcDateField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UtcDateField, 'thisown', 0)
        _swig_setattr(self, UtcDateField,self.__class__,UtcDateField)
_quickfix.UtcDateField_swigregister(UtcDateFieldPtr)

class UtcTimeOnlyField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcTimeOnlyField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UtcTimeOnlyField, name)
    def __repr__(self):
        return "<C FIX::UtcTimeOnlyField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UtcTimeOnlyField, 'this', _quickfix.new_UtcTimeOnlyField(*args))
        _swig_setattr(self, UtcTimeOnlyField, 'thisown', 1)
    def setValue(*args): return _quickfix.UtcTimeOnlyField_setValue(*args)
    def getValue(*args): return _quickfix.UtcTimeOnlyField_getValue(*args)
    def __lt__(*args): return _quickfix.UtcTimeOnlyField___lt__(*args)
    def __eq__(*args): return _quickfix.UtcTimeOnlyField___eq__(*args)
    def __ne__(*args): return _quickfix.UtcTimeOnlyField___ne__(*args)
    def __del__(self, destroy=_quickfix.delete_UtcTimeOnlyField):
        try:
            if self.thisown: destroy(self)
        except: pass

class UtcTimeOnlyFieldPtr(UtcTimeOnlyField):
    def __init__(self, this):
        _swig_setattr(self, UtcTimeOnlyField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UtcTimeOnlyField, 'thisown', 0)
        _swig_setattr(self, UtcTimeOnlyField,self.__class__,UtcTimeOnlyField)
_quickfix.UtcTimeOnlyField_swigregister(UtcTimeOnlyFieldPtr)

class CheckSumField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckSumField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CheckSumField, name)
    def __repr__(self):
        return "<C FIX::CheckSumField instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CheckSumField, 'this', _quickfix.new_CheckSumField(*args))
        _swig_setattr(self, CheckSumField, 'thisown', 1)
    def setValue(*args): return _quickfix.CheckSumField_setValue(*args)
    def getValue(*args): return _quickfix.CheckSumField_getValue(*args)
    def __del__(self, destroy=_quickfix.delete_CheckSumField):
        try:
            if self.thisown: destroy(self)
        except: pass

class CheckSumFieldPtr(CheckSumField):
    def __init__(self, this):
        _swig_setattr(self, CheckSumField, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CheckSumField, 'thisown', 0)
        _swig_setattr(self, CheckSumField,self.__class__,CheckSumField)
_quickfix.CheckSumField_swigregister(CheckSumFieldPtr)

class FieldMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMap, name)
    def __repr__(self):
        return "<C FIX::FieldMap instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FieldMap, 'this', _quickfix.new_FieldMap(*args))
        _swig_setattr(self, FieldMap, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FieldMap):
        try:
            if self.thisown: destroy(self)
        except: pass
    def setField(*args): return _quickfix.FieldMap_setField(*args)
    def getField(*args): return _quickfix.FieldMap_getField(*args)
    def isSetField(*args): return _quickfix.FieldMap_isSetField(*args)
    def addGroup(*args): return _quickfix.FieldMap_addGroup(*args)
    def getGroup(*args): return _quickfix.FieldMap_getGroup(*args)
    def removeField(*args): return _quickfix.FieldMap_removeField(*args)
    def hasGroup(*args): return _quickfix.FieldMap_hasGroup(*args)
    def groupCount(*args): return _quickfix.FieldMap_groupCount(*args)
    def clear(*args): return _quickfix.FieldMap_clear(*args)
    def calculateString(*args): return _quickfix.FieldMap_calculateString(*args)
    def calculateLength(*args): return _quickfix.FieldMap_calculateLength(*args)
    def calculateTotal(*args): return _quickfix.FieldMap_calculateTotal(*args)
    def begin(*args): return _quickfix.FieldMap_begin(*args)
    def end(*args): return _quickfix.FieldMap_end(*args)
    def g_begin(*args): return _quickfix.FieldMap_g_begin(*args)
    def g_end(*args): return _quickfix.FieldMap_g_end(*args)

class FieldMapPtr(FieldMap):
    def __init__(self, this):
        _swig_setattr(self, FieldMap, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FieldMap, 'thisown', 0)
        _swig_setattr(self, FieldMap,self.__class__,FieldMap)
_quickfix.FieldMap_swigregister(FieldMapPtr)

class Message(FieldMap):
    __swig_setmethods__ = {}
    for _s in [FieldMap]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    def __repr__(self):
        return "<C FIX::Message instance at %s>" % (self.this,)
    def __str__(*args): return _quickfix.Message___str__(*args)
    def __init__(self, *args):
        _swig_setattr(self, Message, 'this', _quickfix.new_Message(*args))
        _swig_setattr(self, Message, 'thisown', 1)
    __swig_getmethods__["InitializeXML"] = lambda x: _quickfix.Message_InitializeXML
    if _newclass:InitializeXML = staticmethod(_quickfix.Message_InitializeXML)
    def addGroup(*args): return _quickfix.Message_addGroup(*args)
    def getGroup(*args): return _quickfix.Message_getGroup(*args)
    def hasGroup(*args): return _quickfix.Message_hasGroup(*args)
    def toString(*args): return _quickfix.Message_toString(*args)
    def getString(*args): return _quickfix.Message_getString(*args)
    def toXML(*args): return _quickfix.Message_toXML(*args)
    def setString(*args): return _quickfix.Message_setString(*args)
    def setGroup(*args): return _quickfix.Message_setGroup(*args)
    def setStringHeader(*args): return _quickfix.Message_setStringHeader(*args)
    def getHeader(*args): return _quickfix.Message_getHeader(*args)
    def getTrailer(*args): return _quickfix.Message_getTrailer(*args)
    def hasValidStructure(*args): return _quickfix.Message_hasValidStructure(*args)
    def bodyLength(*args): return _quickfix.Message_bodyLength(*args)
    def checkSum(*args): return _quickfix.Message_checkSum(*args)
    def isAdmin(*args): return _quickfix.Message_isAdmin(*args)
    def isApp(*args): return _quickfix.Message_isApp(*args)
    __swig_getmethods__["isAdminMsgType"] = lambda x: _quickfix.Message_isAdminMsgType
    if _newclass:isAdminMsgType = staticmethod(_quickfix.Message_isAdminMsgType)
    __swig_getmethods__["isHeaderField"] = lambda x: _quickfix.Message_isHeaderField
    if _newclass:isHeaderField = staticmethod(_quickfix.Message_isHeaderField)
    __swig_getmethods__["isHeaderField"] = lambda x: _quickfix.Message_isHeaderField
    if _newclass:isHeaderField = staticmethod(_quickfix.Message_isHeaderField)
    __swig_getmethods__["isTrailerField"] = lambda x: _quickfix.Message_isTrailerField
    if _newclass:isTrailerField = staticmethod(_quickfix.Message_isTrailerField)
    __swig_getmethods__["isTrailerField"] = lambda x: _quickfix.Message_isTrailerField
    if _newclass:isTrailerField = staticmethod(_quickfix.Message_isTrailerField)
    def getSessionID(*args): return _quickfix.Message_getSessionID(*args)
    def setSessionID(*args): return _quickfix.Message_setSessionID(*args)
    def __del__(self, destroy=_quickfix.delete_Message):
        try:
            if self.thisown: destroy(self)
        except: pass

class MessagePtr(Message):
    def __init__(self, this):
        _swig_setattr(self, Message, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Message, 'thisown', 0)
        _swig_setattr(self, Message,self.__class__,Message)
_quickfix.Message_swigregister(MessagePtr)
cvar = _quickfix.cvar
headerOrder = cvar.headerOrder

Message_InitializeXML = _quickfix.Message_InitializeXML

Message_isAdminMsgType = _quickfix.Message_isAdminMsgType

Message_isHeaderField = _quickfix.Message_isHeaderField

Message_isTrailerField = _quickfix.Message_isTrailerField


identifyType = _quickfix.identifyType
class Account(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Account, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Account, name)
    def __repr__(self):
        return "<C FIX::Account instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Account, 'this', _quickfix.new_Account(*args))
        _swig_setattr(self, Account, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Account):
        try:
            if self.thisown: destroy(self)
        except: pass

class AccountPtr(Account):
    def __init__(self, this):
        _swig_setattr(self, Account, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Account, 'thisown', 0)
        _swig_setattr(self, Account,self.__class__,Account)
_quickfix.Account_swigregister(AccountPtr)

class AdvId(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvId, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AdvId, name)
    def __repr__(self):
        return "<C FIX::AdvId instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AdvId, 'this', _quickfix.new_AdvId(*args))
        _swig_setattr(self, AdvId, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AdvId):
        try:
            if self.thisown: destroy(self)
        except: pass

class AdvIdPtr(AdvId):
    def __init__(self, this):
        _swig_setattr(self, AdvId, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AdvId, 'thisown', 0)
        _swig_setattr(self, AdvId,self.__class__,AdvId)
_quickfix.AdvId_swigregister(AdvIdPtr)

class AdvRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AdvRefID, name)
    def __repr__(self):
        return "<C FIX::AdvRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AdvRefID, 'this', _quickfix.new_AdvRefID(*args))
        _swig_setattr(self, AdvRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AdvRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AdvRefIDPtr(AdvRefID):
    def __init__(self, this):
        _swig_setattr(self, AdvRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AdvRefID, 'thisown', 0)
        _swig_setattr(self, AdvRefID,self.__class__,AdvRefID)
_quickfix.AdvRefID_swigregister(AdvRefIDPtr)

class AdvSide(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSide, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSide, name)
    def __repr__(self):
        return "<C FIX::AdvSide instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AdvSide, 'this', _quickfix.new_AdvSide(*args))
        _swig_setattr(self, AdvSide, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AdvSide):
        try:
            if self.thisown: destroy(self)
        except: pass

class AdvSidePtr(AdvSide):
    def __init__(self, this):
        _swig_setattr(self, AdvSide, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AdvSide, 'thisown', 0)
        _swig_setattr(self, AdvSide,self.__class__,AdvSide)
_quickfix.AdvSide_swigregister(AdvSidePtr)

class AdvTransType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AdvTransType, name)
    def __repr__(self):
        return "<C FIX::AdvTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AdvTransType, 'this', _quickfix.new_AdvTransType(*args))
        _swig_setattr(self, AdvTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AdvTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AdvTransTypePtr(AdvTransType):
    def __init__(self, this):
        _swig_setattr(self, AdvTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AdvTransType, 'thisown', 0)
        _swig_setattr(self, AdvTransType,self.__class__,AdvTransType)
_quickfix.AdvTransType_swigregister(AdvTransTypePtr)

class AvgPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPx, name)
    def __repr__(self):
        return "<C FIX::AvgPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AvgPx, 'this', _quickfix.new_AvgPx(*args))
        _swig_setattr(self, AvgPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AvgPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class AvgPxPtr(AvgPx):
    def __init__(self, this):
        _swig_setattr(self, AvgPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AvgPx, 'thisown', 0)
        _swig_setattr(self, AvgPx,self.__class__,AvgPx)
_quickfix.AvgPx_swigregister(AvgPxPtr)

class BeginSeqNo(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeginSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BeginSeqNo, name)
    def __repr__(self):
        return "<C FIX::BeginSeqNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BeginSeqNo, 'this', _quickfix.new_BeginSeqNo(*args))
        _swig_setattr(self, BeginSeqNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BeginSeqNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class BeginSeqNoPtr(BeginSeqNo):
    def __init__(self, this):
        _swig_setattr(self, BeginSeqNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BeginSeqNo, 'thisown', 0)
        _swig_setattr(self, BeginSeqNo,self.__class__,BeginSeqNo)
_quickfix.BeginSeqNo_swigregister(BeginSeqNoPtr)

class BeginString(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeginString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BeginString, name)
    def __repr__(self):
        return "<C FIX::BeginString instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BeginString, 'this', _quickfix.new_BeginString(*args))
        _swig_setattr(self, BeginString, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BeginString):
        try:
            if self.thisown: destroy(self)
        except: pass

class BeginStringPtr(BeginString):
    def __init__(self, this):
        _swig_setattr(self, BeginString, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BeginString, 'thisown', 0)
        _swig_setattr(self, BeginString,self.__class__,BeginString)
_quickfix.BeginString_swigregister(BeginStringPtr)

class BodyLength(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyLength, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BodyLength, name)
    def __repr__(self):
        return "<C FIX::BodyLength instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BodyLength, 'this', _quickfix.new_BodyLength(*args))
        _swig_setattr(self, BodyLength, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BodyLength):
        try:
            if self.thisown: destroy(self)
        except: pass

class BodyLengthPtr(BodyLength):
    def __init__(self, this):
        _swig_setattr(self, BodyLength, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BodyLength, 'thisown', 0)
        _swig_setattr(self, BodyLength,self.__class__,BodyLength)
_quickfix.BodyLength_swigregister(BodyLengthPtr)

class CheckSum(CheckSumField):
    __swig_setmethods__ = {}
    for _s in [CheckSumField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckSum, name, value)
    __swig_getmethods__ = {}
    for _s in [CheckSumField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CheckSum, name)
    def __repr__(self):
        return "<C FIX::CheckSum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CheckSum, 'this', _quickfix.new_CheckSum(*args))
        _swig_setattr(self, CheckSum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CheckSum):
        try:
            if self.thisown: destroy(self)
        except: pass

class CheckSumPtr(CheckSum):
    def __init__(self, this):
        _swig_setattr(self, CheckSum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CheckSum, 'thisown', 0)
        _swig_setattr(self, CheckSum,self.__class__,CheckSum)
_quickfix.CheckSum_swigregister(CheckSumPtr)

class ClOrdID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClOrdID, name)
    def __repr__(self):
        return "<C FIX::ClOrdID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClOrdID, 'this', _quickfix.new_ClOrdID(*args))
        _swig_setattr(self, ClOrdID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClOrdID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClOrdIDPtr(ClOrdID):
    def __init__(self, this):
        _swig_setattr(self, ClOrdID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClOrdID, 'thisown', 0)
        _swig_setattr(self, ClOrdID,self.__class__,ClOrdID)
_quickfix.ClOrdID_swigregister(ClOrdIDPtr)

class Commission(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Commission, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Commission, name)
    def __repr__(self):
        return "<C FIX::Commission instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Commission, 'this', _quickfix.new_Commission(*args))
        _swig_setattr(self, Commission, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Commission):
        try:
            if self.thisown: destroy(self)
        except: pass

class CommissionPtr(Commission):
    def __init__(self, this):
        _swig_setattr(self, Commission, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Commission, 'thisown', 0)
        _swig_setattr(self, Commission,self.__class__,Commission)
_quickfix.Commission_swigregister(CommissionPtr)

class CommType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CommType, name)
    def __repr__(self):
        return "<C FIX::CommType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CommType, 'this', _quickfix.new_CommType(*args))
        _swig_setattr(self, CommType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CommType):
        try:
            if self.thisown: destroy(self)
        except: pass

class CommTypePtr(CommType):
    def __init__(self, this):
        _swig_setattr(self, CommType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CommType, 'thisown', 0)
        _swig_setattr(self, CommType,self.__class__,CommType)
_quickfix.CommType_swigregister(CommTypePtr)

class CumQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CumQty, name)
    def __repr__(self):
        return "<C FIX::CumQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CumQty, 'this', _quickfix.new_CumQty(*args))
        _swig_setattr(self, CumQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CumQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class CumQtyPtr(CumQty):
    def __init__(self, this):
        _swig_setattr(self, CumQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CumQty, 'thisown', 0)
        _swig_setattr(self, CumQty,self.__class__,CumQty)
_quickfix.CumQty_swigregister(CumQtyPtr)

class Currency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Currency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Currency, name)
    def __repr__(self):
        return "<C FIX::Currency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Currency, 'this', _quickfix.new_Currency(*args))
        _swig_setattr(self, Currency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Currency):
        try:
            if self.thisown: destroy(self)
        except: pass

class CurrencyPtr(Currency):
    def __init__(self, this):
        _swig_setattr(self, Currency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Currency, 'thisown', 0)
        _swig_setattr(self, Currency,self.__class__,Currency)
_quickfix.Currency_swigregister(CurrencyPtr)

class EndSeqNo(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EndSeqNo, name)
    def __repr__(self):
        return "<C FIX::EndSeqNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EndSeqNo, 'this', _quickfix.new_EndSeqNo(*args))
        _swig_setattr(self, EndSeqNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EndSeqNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class EndSeqNoPtr(EndSeqNo):
    def __init__(self, this):
        _swig_setattr(self, EndSeqNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EndSeqNo, 'thisown', 0)
        _swig_setattr(self, EndSeqNo,self.__class__,EndSeqNo)
_quickfix.EndSeqNo_swigregister(EndSeqNoPtr)

class ExecID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecID, name)
    def __repr__(self):
        return "<C FIX::ExecID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecID, 'this', _quickfix.new_ExecID(*args))
        _swig_setattr(self, ExecID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecIDPtr(ExecID):
    def __init__(self, this):
        _swig_setattr(self, ExecID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecID, 'thisown', 0)
        _swig_setattr(self, ExecID,self.__class__,ExecID)
_quickfix.ExecID_swigregister(ExecIDPtr)

class ExecInst(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecInst, name)
    def __repr__(self):
        return "<C FIX::ExecInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecInst, 'this', _quickfix.new_ExecInst(*args))
        _swig_setattr(self, ExecInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecInstPtr(ExecInst):
    def __init__(self, this):
        _swig_setattr(self, ExecInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecInst, 'thisown', 0)
        _swig_setattr(self, ExecInst,self.__class__,ExecInst)
_quickfix.ExecInst_swigregister(ExecInstPtr)

class ExecRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecRefID, name)
    def __repr__(self):
        return "<C FIX::ExecRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecRefID, 'this', _quickfix.new_ExecRefID(*args))
        _swig_setattr(self, ExecRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecRefIDPtr(ExecRefID):
    def __init__(self, this):
        _swig_setattr(self, ExecRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecRefID, 'thisown', 0)
        _swig_setattr(self, ExecRefID,self.__class__,ExecRefID)
_quickfix.ExecRefID_swigregister(ExecRefIDPtr)

class HandlInst(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HandlInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HandlInst, name)
    def __repr__(self):
        return "<C FIX::HandlInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HandlInst, 'this', _quickfix.new_HandlInst(*args))
        _swig_setattr(self, HandlInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HandlInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class HandlInstPtr(HandlInst):
    def __init__(self, this):
        _swig_setattr(self, HandlInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HandlInst, 'thisown', 0)
        _swig_setattr(self, HandlInst,self.__class__,HandlInst)
_quickfix.HandlInst_swigregister(HandlInstPtr)

class SecurityIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityIDSource, name)
    def __repr__(self):
        return "<C FIX::SecurityIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityIDSource, 'this', _quickfix.new_SecurityIDSource(*args))
        _swig_setattr(self, SecurityIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityIDSourcePtr(SecurityIDSource):
    def __init__(self, this):
        _swig_setattr(self, SecurityIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityIDSource, 'thisown', 0)
        _swig_setattr(self, SecurityIDSource,self.__class__,SecurityIDSource)
_quickfix.SecurityIDSource_swigregister(SecurityIDSourcePtr)

class IOIid(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIid, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIid, name)
    def __repr__(self):
        return "<C FIX::IOIid instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIid, 'this', _quickfix.new_IOIid(*args))
        _swig_setattr(self, IOIid, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIid):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOIidPtr(IOIid):
    def __init__(self, this):
        _swig_setattr(self, IOIid, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIid, 'thisown', 0)
        _swig_setattr(self, IOIid,self.__class__,IOIid)
_quickfix.IOIid_swigregister(IOIidPtr)

class IOIQltyInd(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIQltyInd, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIQltyInd, name)
    def __repr__(self):
        return "<C FIX::IOIQltyInd instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIQltyInd, 'this', _quickfix.new_IOIQltyInd(*args))
        _swig_setattr(self, IOIQltyInd, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIQltyInd):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOIQltyIndPtr(IOIQltyInd):
    def __init__(self, this):
        _swig_setattr(self, IOIQltyInd, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIQltyInd, 'thisown', 0)
        _swig_setattr(self, IOIQltyInd,self.__class__,IOIQltyInd)
_quickfix.IOIQltyInd_swigregister(IOIQltyIndPtr)

class IOIRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIRefID, name)
    def __repr__(self):
        return "<C FIX::IOIRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIRefID, 'this', _quickfix.new_IOIRefID(*args))
        _swig_setattr(self, IOIRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOIRefIDPtr(IOIRefID):
    def __init__(self, this):
        _swig_setattr(self, IOIRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIRefID, 'thisown', 0)
        _swig_setattr(self, IOIRefID,self.__class__,IOIRefID)
_quickfix.IOIRefID_swigregister(IOIRefIDPtr)

class IOIQty(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIQty, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIQty, name)
    def __repr__(self):
        return "<C FIX::IOIQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIQty, 'this', _quickfix.new_IOIQty(*args))
        _swig_setattr(self, IOIQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOIQtyPtr(IOIQty):
    def __init__(self, this):
        _swig_setattr(self, IOIQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIQty, 'thisown', 0)
        _swig_setattr(self, IOIQty,self.__class__,IOIQty)
_quickfix.IOIQty_swigregister(IOIQtyPtr)

class IOITransType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOITransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOITransType, name)
    def __repr__(self):
        return "<C FIX::IOITransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOITransType, 'this', _quickfix.new_IOITransType(*args))
        _swig_setattr(self, IOITransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOITransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOITransTypePtr(IOITransType):
    def __init__(self, this):
        _swig_setattr(self, IOITransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOITransType, 'thisown', 0)
        _swig_setattr(self, IOITransType,self.__class__,IOITransType)
_quickfix.IOITransType_swigregister(IOITransTypePtr)

class LastCapacity(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastCapacity, name)
    def __repr__(self):
        return "<C FIX::LastCapacity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastCapacity, 'this', _quickfix.new_LastCapacity(*args))
        _swig_setattr(self, LastCapacity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastCapacity):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastCapacityPtr(LastCapacity):
    def __init__(self, this):
        _swig_setattr(self, LastCapacity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastCapacity, 'thisown', 0)
        _swig_setattr(self, LastCapacity,self.__class__,LastCapacity)
_quickfix.LastCapacity_swigregister(LastCapacityPtr)

class LastMkt(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastMkt, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastMkt, name)
    def __repr__(self):
        return "<C FIX::LastMkt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastMkt, 'this', _quickfix.new_LastMkt(*args))
        _swig_setattr(self, LastMkt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastMkt):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastMktPtr(LastMkt):
    def __init__(self, this):
        _swig_setattr(self, LastMkt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastMkt, 'thisown', 0)
        _swig_setattr(self, LastMkt,self.__class__,LastMkt)
_quickfix.LastMkt_swigregister(LastMktPtr)

class LastPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastPx, name)
    def __repr__(self):
        return "<C FIX::LastPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastPx, 'this', _quickfix.new_LastPx(*args))
        _swig_setattr(self, LastPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastPxPtr(LastPx):
    def __init__(self, this):
        _swig_setattr(self, LastPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastPx, 'thisown', 0)
        _swig_setattr(self, LastPx,self.__class__,LastPx)
_quickfix.LastPx_swigregister(LastPxPtr)

class LastQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastQty, name)
    def __repr__(self):
        return "<C FIX::LastQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastQty, 'this', _quickfix.new_LastQty(*args))
        _swig_setattr(self, LastQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastQtyPtr(LastQty):
    def __init__(self, this):
        _swig_setattr(self, LastQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastQty, 'thisown', 0)
        _swig_setattr(self, LastQty,self.__class__,LastQty)
_quickfix.LastQty_swigregister(LastQtyPtr)

class LinesOfText(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinesOfText, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LinesOfText, name)
    def __repr__(self):
        return "<C FIX::LinesOfText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LinesOfText, 'this', _quickfix.new_LinesOfText(*args))
        _swig_setattr(self, LinesOfText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LinesOfText):
        try:
            if self.thisown: destroy(self)
        except: pass

class LinesOfTextPtr(LinesOfText):
    def __init__(self, this):
        _swig_setattr(self, LinesOfText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LinesOfText, 'thisown', 0)
        _swig_setattr(self, LinesOfText,self.__class__,LinesOfText)
_quickfix.LinesOfText_swigregister(LinesOfTextPtr)

class MsgSeqNum(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MsgSeqNum, name)
    def __repr__(self):
        return "<C FIX::MsgSeqNum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MsgSeqNum, 'this', _quickfix.new_MsgSeqNum(*args))
        _swig_setattr(self, MsgSeqNum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MsgSeqNum):
        try:
            if self.thisown: destroy(self)
        except: pass

class MsgSeqNumPtr(MsgSeqNum):
    def __init__(self, this):
        _swig_setattr(self, MsgSeqNum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MsgSeqNum, 'thisown', 0)
        _swig_setattr(self, MsgSeqNum,self.__class__,MsgSeqNum)
_quickfix.MsgSeqNum_swigregister(MsgSeqNumPtr)

class MsgType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MsgType, name)
    def __repr__(self):
        return "<C FIX::MsgType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MsgType, 'this', _quickfix.new_MsgType(*args))
        _swig_setattr(self, MsgType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MsgType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MsgTypePtr(MsgType):
    def __init__(self, this):
        _swig_setattr(self, MsgType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MsgType, 'thisown', 0)
        _swig_setattr(self, MsgType,self.__class__,MsgType)
_quickfix.MsgType_swigregister(MsgTypePtr)

class NewSeqNo(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NewSeqNo, name)
    def __repr__(self):
        return "<C FIX::NewSeqNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NewSeqNo, 'this', _quickfix.new_NewSeqNo(*args))
        _swig_setattr(self, NewSeqNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NewSeqNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class NewSeqNoPtr(NewSeqNo):
    def __init__(self, this):
        _swig_setattr(self, NewSeqNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NewSeqNo, 'thisown', 0)
        _swig_setattr(self, NewSeqNo,self.__class__,NewSeqNo)
_quickfix.NewSeqNo_swigregister(NewSeqNoPtr)

class OrderID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderID, name)
    def __repr__(self):
        return "<C FIX::OrderID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderID, 'this', _quickfix.new_OrderID(*args))
        _swig_setattr(self, OrderID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderIDPtr(OrderID):
    def __init__(self, this):
        _swig_setattr(self, OrderID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderID, 'thisown', 0)
        _swig_setattr(self, OrderID,self.__class__,OrderID)
_quickfix.OrderID_swigregister(OrderIDPtr)

class OrderQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderQty, name)
    def __repr__(self):
        return "<C FIX::OrderQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderQty, 'this', _quickfix.new_OrderQty(*args))
        _swig_setattr(self, OrderQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderQtyPtr(OrderQty):
    def __init__(self, this):
        _swig_setattr(self, OrderQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderQty, 'thisown', 0)
        _swig_setattr(self, OrderQty,self.__class__,OrderQty)
_quickfix.OrderQty_swigregister(OrderQtyPtr)

class OrdStatus(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrdStatus, name)
    def __repr__(self):
        return "<C FIX::OrdStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrdStatus, 'this', _quickfix.new_OrdStatus(*args))
        _swig_setattr(self, OrdStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrdStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrdStatusPtr(OrdStatus):
    def __init__(self, this):
        _swig_setattr(self, OrdStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrdStatus, 'thisown', 0)
        _swig_setattr(self, OrdStatus,self.__class__,OrdStatus)
_quickfix.OrdStatus_swigregister(OrdStatusPtr)

class OrdType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrdType, name)
    def __repr__(self):
        return "<C FIX::OrdType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrdType, 'this', _quickfix.new_OrdType(*args))
        _swig_setattr(self, OrdType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrdType):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrdTypePtr(OrdType):
    def __init__(self, this):
        _swig_setattr(self, OrdType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrdType, 'thisown', 0)
        _swig_setattr(self, OrdType,self.__class__,OrdType)
_quickfix.OrdType_swigregister(OrdTypePtr)

class OrigClOrdID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrigClOrdID, name)
    def __repr__(self):
        return "<C FIX::OrigClOrdID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrigClOrdID, 'this', _quickfix.new_OrigClOrdID(*args))
        _swig_setattr(self, OrigClOrdID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrigClOrdID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrigClOrdIDPtr(OrigClOrdID):
    def __init__(self, this):
        _swig_setattr(self, OrigClOrdID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrigClOrdID, 'thisown', 0)
        _swig_setattr(self, OrigClOrdID,self.__class__,OrigClOrdID)
_quickfix.OrigClOrdID_swigregister(OrigClOrdIDPtr)

class OrigTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrigTime, name)
    def __repr__(self):
        return "<C FIX::OrigTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrigTime, 'this', _quickfix.new_OrigTime(*args))
        _swig_setattr(self, OrigTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrigTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrigTimePtr(OrigTime):
    def __init__(self, this):
        _swig_setattr(self, OrigTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrigTime, 'thisown', 0)
        _swig_setattr(self, OrigTime,self.__class__,OrigTime)
_quickfix.OrigTime_swigregister(OrigTimePtr)

class PossDupFlag(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PossDupFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PossDupFlag, name)
    def __repr__(self):
        return "<C FIX::PossDupFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PossDupFlag, 'this', _quickfix.new_PossDupFlag(*args))
        _swig_setattr(self, PossDupFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PossDupFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class PossDupFlagPtr(PossDupFlag):
    def __init__(self, this):
        _swig_setattr(self, PossDupFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PossDupFlag, 'thisown', 0)
        _swig_setattr(self, PossDupFlag,self.__class__,PossDupFlag)
_quickfix.PossDupFlag_swigregister(PossDupFlagPtr)

class Price(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Price, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Price, name)
    def __repr__(self):
        return "<C FIX::Price instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Price, 'this', _quickfix.new_Price(*args))
        _swig_setattr(self, Price, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Price):
        try:
            if self.thisown: destroy(self)
        except: pass

class PricePtr(Price):
    def __init__(self, this):
        _swig_setattr(self, Price, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Price, 'thisown', 0)
        _swig_setattr(self, Price,self.__class__,Price)
_quickfix.Price_swigregister(PricePtr)

class RefSeqNum(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RefSeqNum, name)
    def __repr__(self):
        return "<C FIX::RefSeqNum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RefSeqNum, 'this', _quickfix.new_RefSeqNum(*args))
        _swig_setattr(self, RefSeqNum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RefSeqNum):
        try:
            if self.thisown: destroy(self)
        except: pass

class RefSeqNumPtr(RefSeqNum):
    def __init__(self, this):
        _swig_setattr(self, RefSeqNum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RefSeqNum, 'thisown', 0)
        _swig_setattr(self, RefSeqNum,self.__class__,RefSeqNum)
_quickfix.RefSeqNum_swigregister(RefSeqNumPtr)

class SecurityID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityID, name)
    def __repr__(self):
        return "<C FIX::SecurityID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityID, 'this', _quickfix.new_SecurityID(*args))
        _swig_setattr(self, SecurityID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityIDPtr(SecurityID):
    def __init__(self, this):
        _swig_setattr(self, SecurityID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityID, 'thisown', 0)
        _swig_setattr(self, SecurityID,self.__class__,SecurityID)
_quickfix.SecurityID_swigregister(SecurityIDPtr)

class SenderCompID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SenderCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SenderCompID, name)
    def __repr__(self):
        return "<C FIX::SenderCompID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SenderCompID, 'this', _quickfix.new_SenderCompID(*args))
        _swig_setattr(self, SenderCompID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SenderCompID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SenderCompIDPtr(SenderCompID):
    def __init__(self, this):
        _swig_setattr(self, SenderCompID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SenderCompID, 'thisown', 0)
        _swig_setattr(self, SenderCompID,self.__class__,SenderCompID)
_quickfix.SenderCompID_swigregister(SenderCompIDPtr)

class SenderSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SenderSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SenderSubID, name)
    def __repr__(self):
        return "<C FIX::SenderSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SenderSubID, 'this', _quickfix.new_SenderSubID(*args))
        _swig_setattr(self, SenderSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SenderSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SenderSubIDPtr(SenderSubID):
    def __init__(self, this):
        _swig_setattr(self, SenderSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SenderSubID, 'thisown', 0)
        _swig_setattr(self, SenderSubID,self.__class__,SenderSubID)
_quickfix.SenderSubID_swigregister(SenderSubIDPtr)

class SendingTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SendingTime, name)
    def __repr__(self):
        return "<C FIX::SendingTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SendingTime, 'this', _quickfix.new_SendingTime(*args))
        _swig_setattr(self, SendingTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SendingTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class SendingTimePtr(SendingTime):
    def __init__(self, this):
        _swig_setattr(self, SendingTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SendingTime, 'thisown', 0)
        _swig_setattr(self, SendingTime,self.__class__,SendingTime)
_quickfix.SendingTime_swigregister(SendingTimePtr)

class Quantity(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quantity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Quantity, name)
    def __repr__(self):
        return "<C FIX::Quantity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Quantity, 'this', _quickfix.new_Quantity(*args))
        _swig_setattr(self, Quantity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Quantity):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuantityPtr(Quantity):
    def __init__(self, this):
        _swig_setattr(self, Quantity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Quantity, 'thisown', 0)
        _swig_setattr(self, Quantity,self.__class__,Quantity)
_quickfix.Quantity_swigregister(QuantityPtr)

class Side(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Side, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Side, name)
    def __repr__(self):
        return "<C FIX::Side instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Side, 'this', _quickfix.new_Side(*args))
        _swig_setattr(self, Side, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Side):
        try:
            if self.thisown: destroy(self)
        except: pass

class SidePtr(Side):
    def __init__(self, this):
        _swig_setattr(self, Side, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Side, 'thisown', 0)
        _swig_setattr(self, Side,self.__class__,Side)
_quickfix.Side_swigregister(SidePtr)

class Symbol(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Symbol, name)
    def __repr__(self):
        return "<C FIX::Symbol instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Symbol, 'this', _quickfix.new_Symbol(*args))
        _swig_setattr(self, Symbol, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Symbol):
        try:
            if self.thisown: destroy(self)
        except: pass

class SymbolPtr(Symbol):
    def __init__(self, this):
        _swig_setattr(self, Symbol, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Symbol, 'thisown', 0)
        _swig_setattr(self, Symbol,self.__class__,Symbol)
_quickfix.Symbol_swigregister(SymbolPtr)

class TargetCompID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TargetCompID, name)
    def __repr__(self):
        return "<C FIX::TargetCompID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TargetCompID, 'this', _quickfix.new_TargetCompID(*args))
        _swig_setattr(self, TargetCompID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TargetCompID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TargetCompIDPtr(TargetCompID):
    def __init__(self, this):
        _swig_setattr(self, TargetCompID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TargetCompID, 'thisown', 0)
        _swig_setattr(self, TargetCompID,self.__class__,TargetCompID)
_quickfix.TargetCompID_swigregister(TargetCompIDPtr)

class TargetSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TargetSubID, name)
    def __repr__(self):
        return "<C FIX::TargetSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TargetSubID, 'this', _quickfix.new_TargetSubID(*args))
        _swig_setattr(self, TargetSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TargetSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TargetSubIDPtr(TargetSubID):
    def __init__(self, this):
        _swig_setattr(self, TargetSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TargetSubID, 'thisown', 0)
        _swig_setattr(self, TargetSubID,self.__class__,TargetSubID)
_quickfix.TargetSubID_swigregister(TargetSubIDPtr)

class Text(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    def __repr__(self):
        return "<C FIX::Text instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Text, 'this', _quickfix.new_Text(*args))
        _swig_setattr(self, Text, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Text):
        try:
            if self.thisown: destroy(self)
        except: pass

class TextPtr(Text):
    def __init__(self, this):
        _swig_setattr(self, Text, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Text, 'thisown', 0)
        _swig_setattr(self, Text,self.__class__,Text)
_quickfix.Text_swigregister(TextPtr)

class TimeInForce(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInForce, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInForce, name)
    def __repr__(self):
        return "<C FIX::TimeInForce instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TimeInForce, 'this', _quickfix.new_TimeInForce(*args))
        _swig_setattr(self, TimeInForce, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TimeInForce):
        try:
            if self.thisown: destroy(self)
        except: pass

class TimeInForcePtr(TimeInForce):
    def __init__(self, this):
        _swig_setattr(self, TimeInForce, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TimeInForce, 'thisown', 0)
        _swig_setattr(self, TimeInForce,self.__class__,TimeInForce)
_quickfix.TimeInForce_swigregister(TimeInForcePtr)

class TransactTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransactTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TransactTime, name)
    def __repr__(self):
        return "<C FIX::TransactTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TransactTime, 'this', _quickfix.new_TransactTime(*args))
        _swig_setattr(self, TransactTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TransactTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TransactTimePtr(TransactTime):
    def __init__(self, this):
        _swig_setattr(self, TransactTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TransactTime, 'thisown', 0)
        _swig_setattr(self, TransactTime,self.__class__,TransactTime)
_quickfix.TransactTime_swigregister(TransactTimePtr)

class Urgency(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Urgency, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Urgency, name)
    def __repr__(self):
        return "<C FIX::Urgency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Urgency, 'this', _quickfix.new_Urgency(*args))
        _swig_setattr(self, Urgency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Urgency):
        try:
            if self.thisown: destroy(self)
        except: pass

class UrgencyPtr(Urgency):
    def __init__(self, this):
        _swig_setattr(self, Urgency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Urgency, 'thisown', 0)
        _swig_setattr(self, Urgency,self.__class__,Urgency)
_quickfix.Urgency_swigregister(UrgencyPtr)

class ValidUntilTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValidUntilTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ValidUntilTime, name)
    def __repr__(self):
        return "<C FIX::ValidUntilTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ValidUntilTime, 'this', _quickfix.new_ValidUntilTime(*args))
        _swig_setattr(self, ValidUntilTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ValidUntilTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class ValidUntilTimePtr(ValidUntilTime):
    def __init__(self, this):
        _swig_setattr(self, ValidUntilTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ValidUntilTime, 'thisown', 0)
        _swig_setattr(self, ValidUntilTime,self.__class__,ValidUntilTime)
_quickfix.ValidUntilTime_swigregister(ValidUntilTimePtr)

class SettlType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlType, name)
    def __repr__(self):
        return "<C FIX::SettlType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlType, 'this', _quickfix.new_SettlType(*args))
        _swig_setattr(self, SettlType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlTypePtr(SettlType):
    def __init__(self, this):
        _swig_setattr(self, SettlType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlType, 'thisown', 0)
        _swig_setattr(self, SettlType,self.__class__,SettlType)
_quickfix.SettlType_swigregister(SettlTypePtr)

class SettlDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDate, name)
    def __repr__(self):
        return "<C FIX::SettlDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlDate, 'this', _quickfix.new_SettlDate(*args))
        _swig_setattr(self, SettlDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlDatePtr(SettlDate):
    def __init__(self, this):
        _swig_setattr(self, SettlDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlDate, 'thisown', 0)
        _swig_setattr(self, SettlDate,self.__class__,SettlDate)
_quickfix.SettlDate_swigregister(SettlDatePtr)

class SymbolSfx(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolSfx, name)
    def __repr__(self):
        return "<C FIX::SymbolSfx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SymbolSfx, 'this', _quickfix.new_SymbolSfx(*args))
        _swig_setattr(self, SymbolSfx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SymbolSfx):
        try:
            if self.thisown: destroy(self)
        except: pass

class SymbolSfxPtr(SymbolSfx):
    def __init__(self, this):
        _swig_setattr(self, SymbolSfx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SymbolSfx, 'thisown', 0)
        _swig_setattr(self, SymbolSfx,self.__class__,SymbolSfx)
_quickfix.SymbolSfx_swigregister(SymbolSfxPtr)

class ListID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListID, name)
    def __repr__(self):
        return "<C FIX::ListID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListID, 'this', _quickfix.new_ListID(*args))
        _swig_setattr(self, ListID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListIDPtr(ListID):
    def __init__(self, this):
        _swig_setattr(self, ListID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListID, 'thisown', 0)
        _swig_setattr(self, ListID,self.__class__,ListID)
_quickfix.ListID_swigregister(ListIDPtr)

class ListSeqNo(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListSeqNo, name)
    def __repr__(self):
        return "<C FIX::ListSeqNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListSeqNo, 'this', _quickfix.new_ListSeqNo(*args))
        _swig_setattr(self, ListSeqNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListSeqNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListSeqNoPtr(ListSeqNo):
    def __init__(self, this):
        _swig_setattr(self, ListSeqNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListSeqNo, 'thisown', 0)
        _swig_setattr(self, ListSeqNo,self.__class__,ListSeqNo)
_quickfix.ListSeqNo_swigregister(ListSeqNoPtr)

class TotNoOrders(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoOrders, name)
    def __repr__(self):
        return "<C FIX::TotNoOrders instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNoOrders, 'this', _quickfix.new_TotNoOrders(*args))
        _swig_setattr(self, TotNoOrders, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNoOrders):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNoOrdersPtr(TotNoOrders):
    def __init__(self, this):
        _swig_setattr(self, TotNoOrders, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNoOrders, 'thisown', 0)
        _swig_setattr(self, TotNoOrders,self.__class__,TotNoOrders)
_quickfix.TotNoOrders_swigregister(TotNoOrdersPtr)

class ListNoOrds(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListNoOrds, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListNoOrds, name)
    def __repr__(self):
        return "<C FIX::ListNoOrds instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListNoOrds, 'this', _quickfix.new_ListNoOrds(*args))
        _swig_setattr(self, ListNoOrds, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListNoOrds):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListNoOrdsPtr(ListNoOrds):
    def __init__(self, this):
        _swig_setattr(self, ListNoOrds, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListNoOrds, 'thisown', 0)
        _swig_setattr(self, ListNoOrds,self.__class__,ListNoOrds)
_quickfix.ListNoOrds_swigregister(ListNoOrdsPtr)

class ListExecInst(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListExecInst, name)
    def __repr__(self):
        return "<C FIX::ListExecInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListExecInst, 'this', _quickfix.new_ListExecInst(*args))
        _swig_setattr(self, ListExecInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListExecInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListExecInstPtr(ListExecInst):
    def __init__(self, this):
        _swig_setattr(self, ListExecInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListExecInst, 'thisown', 0)
        _swig_setattr(self, ListExecInst,self.__class__,ListExecInst)
_quickfix.ListExecInst_swigregister(ListExecInstPtr)

class AllocID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocID, name)
    def __repr__(self):
        return "<C FIX::AllocID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocID, 'this', _quickfix.new_AllocID(*args))
        _swig_setattr(self, AllocID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocIDPtr(AllocID):
    def __init__(self, this):
        _swig_setattr(self, AllocID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocID, 'thisown', 0)
        _swig_setattr(self, AllocID,self.__class__,AllocID)
_quickfix.AllocID_swigregister(AllocIDPtr)

class AllocTransType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocTransType, name)
    def __repr__(self):
        return "<C FIX::AllocTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocTransType, 'this', _quickfix.new_AllocTransType(*args))
        _swig_setattr(self, AllocTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocTransTypePtr(AllocTransType):
    def __init__(self, this):
        _swig_setattr(self, AllocTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocTransType, 'thisown', 0)
        _swig_setattr(self, AllocTransType,self.__class__,AllocTransType)
_quickfix.AllocTransType_swigregister(AllocTransTypePtr)

class RefAllocID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RefAllocID, name)
    def __repr__(self):
        return "<C FIX::RefAllocID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RefAllocID, 'this', _quickfix.new_RefAllocID(*args))
        _swig_setattr(self, RefAllocID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RefAllocID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RefAllocIDPtr(RefAllocID):
    def __init__(self, this):
        _swig_setattr(self, RefAllocID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RefAllocID, 'thisown', 0)
        _swig_setattr(self, RefAllocID,self.__class__,RefAllocID)
_quickfix.RefAllocID_swigregister(RefAllocIDPtr)

class NoOrders(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoOrders, name)
    def __repr__(self):
        return "<C FIX::NoOrders instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoOrders, 'this', _quickfix.new_NoOrders(*args))
        _swig_setattr(self, NoOrders, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoOrders):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoOrdersPtr(NoOrders):
    def __init__(self, this):
        _swig_setattr(self, NoOrders, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoOrders, 'thisown', 0)
        _swig_setattr(self, NoOrders,self.__class__,NoOrders)
_quickfix.NoOrders_swigregister(NoOrdersPtr)

class AvgPxPrecision(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPxPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPxPrecision, name)
    def __repr__(self):
        return "<C FIX::AvgPxPrecision instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AvgPxPrecision, 'this', _quickfix.new_AvgPxPrecision(*args))
        _swig_setattr(self, AvgPxPrecision, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AvgPxPrecision):
        try:
            if self.thisown: destroy(self)
        except: pass

class AvgPxPrecisionPtr(AvgPxPrecision):
    def __init__(self, this):
        _swig_setattr(self, AvgPxPrecision, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AvgPxPrecision, 'thisown', 0)
        _swig_setattr(self, AvgPxPrecision,self.__class__,AvgPxPrecision)
_quickfix.AvgPxPrecision_swigregister(AvgPxPrecisionPtr)

class TradeDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeDate, name)
    def __repr__(self):
        return "<C FIX::TradeDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeDate, 'this', _quickfix.new_TradeDate(*args))
        _swig_setattr(self, TradeDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeDatePtr(TradeDate):
    def __init__(self, this):
        _swig_setattr(self, TradeDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeDate, 'thisown', 0)
        _swig_setattr(self, TradeDate,self.__class__,TradeDate)
_quickfix.TradeDate_swigregister(TradeDatePtr)

class PositionEffect(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionEffect, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PositionEffect, name)
    def __repr__(self):
        return "<C FIX::PositionEffect instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PositionEffect, 'this', _quickfix.new_PositionEffect(*args))
        _swig_setattr(self, PositionEffect, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PositionEffect):
        try:
            if self.thisown: destroy(self)
        except: pass

class PositionEffectPtr(PositionEffect):
    def __init__(self, this):
        _swig_setattr(self, PositionEffect, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PositionEffect, 'thisown', 0)
        _swig_setattr(self, PositionEffect,self.__class__,PositionEffect)
_quickfix.PositionEffect_swigregister(PositionEffectPtr)

class NoAllocs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAllocs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoAllocs, name)
    def __repr__(self):
        return "<C FIX::NoAllocs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoAllocs, 'this', _quickfix.new_NoAllocs(*args))
        _swig_setattr(self, NoAllocs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoAllocs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoAllocsPtr(NoAllocs):
    def __init__(self, this):
        _swig_setattr(self, NoAllocs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoAllocs, 'thisown', 0)
        _swig_setattr(self, NoAllocs,self.__class__,NoAllocs)
_quickfix.NoAllocs_swigregister(NoAllocsPtr)

class AllocAccount(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAccount, name)
    def __repr__(self):
        return "<C FIX::AllocAccount instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocAccount, 'this', _quickfix.new_AllocAccount(*args))
        _swig_setattr(self, AllocAccount, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocAccount):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocAccountPtr(AllocAccount):
    def __init__(self, this):
        _swig_setattr(self, AllocAccount, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocAccount, 'thisown', 0)
        _swig_setattr(self, AllocAccount,self.__class__,AllocAccount)
_quickfix.AllocAccount_swigregister(AllocAccountPtr)

class AllocQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocQty, name)
    def __repr__(self):
        return "<C FIX::AllocQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocQty, 'this', _quickfix.new_AllocQty(*args))
        _swig_setattr(self, AllocQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocQtyPtr(AllocQty):
    def __init__(self, this):
        _swig_setattr(self, AllocQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocQty, 'thisown', 0)
        _swig_setattr(self, AllocQty,self.__class__,AllocQty)
_quickfix.AllocQty_swigregister(AllocQtyPtr)

class ProcessCode(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessCode, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessCode, name)
    def __repr__(self):
        return "<C FIX::ProcessCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ProcessCode, 'this', _quickfix.new_ProcessCode(*args))
        _swig_setattr(self, ProcessCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ProcessCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class ProcessCodePtr(ProcessCode):
    def __init__(self, this):
        _swig_setattr(self, ProcessCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ProcessCode, 'thisown', 0)
        _swig_setattr(self, ProcessCode,self.__class__,ProcessCode)
_quickfix.ProcessCode_swigregister(ProcessCodePtr)

class NoRpts(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRpts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoRpts, name)
    def __repr__(self):
        return "<C FIX::NoRpts instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoRpts, 'this', _quickfix.new_NoRpts(*args))
        _swig_setattr(self, NoRpts, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoRpts):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoRptsPtr(NoRpts):
    def __init__(self, this):
        _swig_setattr(self, NoRpts, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoRpts, 'thisown', 0)
        _swig_setattr(self, NoRpts,self.__class__,NoRpts)
_quickfix.NoRpts_swigregister(NoRptsPtr)

class RptSeq(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RptSeq, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RptSeq, name)
    def __repr__(self):
        return "<C FIX::RptSeq instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RptSeq, 'this', _quickfix.new_RptSeq(*args))
        _swig_setattr(self, RptSeq, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RptSeq):
        try:
            if self.thisown: destroy(self)
        except: pass

class RptSeqPtr(RptSeq):
    def __init__(self, this):
        _swig_setattr(self, RptSeq, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RptSeq, 'thisown', 0)
        _swig_setattr(self, RptSeq,self.__class__,RptSeq)
_quickfix.RptSeq_swigregister(RptSeqPtr)

class CxlQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CxlQty, name)
    def __repr__(self):
        return "<C FIX::CxlQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CxlQty, 'this', _quickfix.new_CxlQty(*args))
        _swig_setattr(self, CxlQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CxlQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class CxlQtyPtr(CxlQty):
    def __init__(self, this):
        _swig_setattr(self, CxlQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CxlQty, 'thisown', 0)
        _swig_setattr(self, CxlQty,self.__class__,CxlQty)
_quickfix.CxlQty_swigregister(CxlQtyPtr)

class NoDlvyInst(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDlvyInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoDlvyInst, name)
    def __repr__(self):
        return "<C FIX::NoDlvyInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoDlvyInst, 'this', _quickfix.new_NoDlvyInst(*args))
        _swig_setattr(self, NoDlvyInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoDlvyInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoDlvyInstPtr(NoDlvyInst):
    def __init__(self, this):
        _swig_setattr(self, NoDlvyInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoDlvyInst, 'thisown', 0)
        _swig_setattr(self, NoDlvyInst,self.__class__,NoDlvyInst)
_quickfix.NoDlvyInst_swigregister(NoDlvyInstPtr)

class AllocStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocStatus, name)
    def __repr__(self):
        return "<C FIX::AllocStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocStatus, 'this', _quickfix.new_AllocStatus(*args))
        _swig_setattr(self, AllocStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocStatusPtr(AllocStatus):
    def __init__(self, this):
        _swig_setattr(self, AllocStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocStatus, 'thisown', 0)
        _swig_setattr(self, AllocStatus,self.__class__,AllocStatus)
_quickfix.AllocStatus_swigregister(AllocStatusPtr)

class AllocRejCode(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocRejCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocRejCode, name)
    def __repr__(self):
        return "<C FIX::AllocRejCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocRejCode, 'this', _quickfix.new_AllocRejCode(*args))
        _swig_setattr(self, AllocRejCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocRejCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocRejCodePtr(AllocRejCode):
    def __init__(self, this):
        _swig_setattr(self, AllocRejCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocRejCode, 'thisown', 0)
        _swig_setattr(self, AllocRejCode,self.__class__,AllocRejCode)
_quickfix.AllocRejCode_swigregister(AllocRejCodePtr)

class Signature(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Signature, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Signature, name)
    def __repr__(self):
        return "<C FIX::Signature instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Signature, 'this', _quickfix.new_Signature(*args))
        _swig_setattr(self, Signature, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Signature):
        try:
            if self.thisown: destroy(self)
        except: pass

class SignaturePtr(Signature):
    def __init__(self, this):
        _swig_setattr(self, Signature, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Signature, 'thisown', 0)
        _swig_setattr(self, Signature,self.__class__,Signature)
_quickfix.Signature_swigregister(SignaturePtr)

class SecureDataLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecureDataLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecureDataLen, name)
    def __repr__(self):
        return "<C FIX::SecureDataLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecureDataLen, 'this', _quickfix.new_SecureDataLen(*args))
        _swig_setattr(self, SecureDataLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecureDataLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecureDataLenPtr(SecureDataLen):
    def __init__(self, this):
        _swig_setattr(self, SecureDataLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecureDataLen, 'thisown', 0)
        _swig_setattr(self, SecureDataLen,self.__class__,SecureDataLen)
_quickfix.SecureDataLen_swigregister(SecureDataLenPtr)

class SecureData(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecureData, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecureData, name)
    def __repr__(self):
        return "<C FIX::SecureData instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecureData, 'this', _quickfix.new_SecureData(*args))
        _swig_setattr(self, SecureData, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecureData):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecureDataPtr(SecureData):
    def __init__(self, this):
        _swig_setattr(self, SecureData, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecureData, 'thisown', 0)
        _swig_setattr(self, SecureData,self.__class__,SecureData)
_quickfix.SecureData_swigregister(SecureDataPtr)

class SignatureLength(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureLength, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureLength, name)
    def __repr__(self):
        return "<C FIX::SignatureLength instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SignatureLength, 'this', _quickfix.new_SignatureLength(*args))
        _swig_setattr(self, SignatureLength, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SignatureLength):
        try:
            if self.thisown: destroy(self)
        except: pass

class SignatureLengthPtr(SignatureLength):
    def __init__(self, this):
        _swig_setattr(self, SignatureLength, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SignatureLength, 'thisown', 0)
        _swig_setattr(self, SignatureLength,self.__class__,SignatureLength)
_quickfix.SignatureLength_swigregister(SignatureLengthPtr)

class EmailType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmailType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EmailType, name)
    def __repr__(self):
        return "<C FIX::EmailType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EmailType, 'this', _quickfix.new_EmailType(*args))
        _swig_setattr(self, EmailType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EmailType):
        try:
            if self.thisown: destroy(self)
        except: pass

class EmailTypePtr(EmailType):
    def __init__(self, this):
        _swig_setattr(self, EmailType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EmailType, 'thisown', 0)
        _swig_setattr(self, EmailType,self.__class__,EmailType)
_quickfix.EmailType_swigregister(EmailTypePtr)

class RawDataLength(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawDataLength, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RawDataLength, name)
    def __repr__(self):
        return "<C FIX::RawDataLength instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RawDataLength, 'this', _quickfix.new_RawDataLength(*args))
        _swig_setattr(self, RawDataLength, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RawDataLength):
        try:
            if self.thisown: destroy(self)
        except: pass

class RawDataLengthPtr(RawDataLength):
    def __init__(self, this):
        _swig_setattr(self, RawDataLength, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RawDataLength, 'thisown', 0)
        _swig_setattr(self, RawDataLength,self.__class__,RawDataLength)
_quickfix.RawDataLength_swigregister(RawDataLengthPtr)

class RawData(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawData, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RawData, name)
    def __repr__(self):
        return "<C FIX::RawData instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RawData, 'this', _quickfix.new_RawData(*args))
        _swig_setattr(self, RawData, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RawData):
        try:
            if self.thisown: destroy(self)
        except: pass

class RawDataPtr(RawData):
    def __init__(self, this):
        _swig_setattr(self, RawData, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RawData, 'thisown', 0)
        _swig_setattr(self, RawData,self.__class__,RawData)
_quickfix.RawData_swigregister(RawDataPtr)

class PossResend(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PossResend, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PossResend, name)
    def __repr__(self):
        return "<C FIX::PossResend instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PossResend, 'this', _quickfix.new_PossResend(*args))
        _swig_setattr(self, PossResend, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PossResend):
        try:
            if self.thisown: destroy(self)
        except: pass

class PossResendPtr(PossResend):
    def __init__(self, this):
        _swig_setattr(self, PossResend, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PossResend, 'thisown', 0)
        _swig_setattr(self, PossResend,self.__class__,PossResend)
_quickfix.PossResend_swigregister(PossResendPtr)

class EncryptMethod(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptMethod, name)
    def __repr__(self):
        return "<C FIX::EncryptMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncryptMethod, 'this', _quickfix.new_EncryptMethod(*args))
        _swig_setattr(self, EncryptMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncryptMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncryptMethodPtr(EncryptMethod):
    def __init__(self, this):
        _swig_setattr(self, EncryptMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncryptMethod, 'thisown', 0)
        _swig_setattr(self, EncryptMethod,self.__class__,EncryptMethod)
_quickfix.EncryptMethod_swigregister(EncryptMethodPtr)

class StopPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StopPx, name)
    def __repr__(self):
        return "<C FIX::StopPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StopPx, 'this', _quickfix.new_StopPx(*args))
        _swig_setattr(self, StopPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StopPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class StopPxPtr(StopPx):
    def __init__(self, this):
        _swig_setattr(self, StopPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StopPx, 'thisown', 0)
        _swig_setattr(self, StopPx,self.__class__,StopPx)
_quickfix.StopPx_swigregister(StopPxPtr)

class ExDestination(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExDestination, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExDestination, name)
    def __repr__(self):
        return "<C FIX::ExDestination instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExDestination, 'this', _quickfix.new_ExDestination(*args))
        _swig_setattr(self, ExDestination, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExDestination):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExDestinationPtr(ExDestination):
    def __init__(self, this):
        _swig_setattr(self, ExDestination, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExDestination, 'thisown', 0)
        _swig_setattr(self, ExDestination,self.__class__,ExDestination)
_quickfix.ExDestination_swigregister(ExDestinationPtr)

class CxlRejReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CxlRejReason, name)
    def __repr__(self):
        return "<C FIX::CxlRejReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CxlRejReason, 'this', _quickfix.new_CxlRejReason(*args))
        _swig_setattr(self, CxlRejReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CxlRejReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class CxlRejReasonPtr(CxlRejReason):
    def __init__(self, this):
        _swig_setattr(self, CxlRejReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CxlRejReason, 'thisown', 0)
        _swig_setattr(self, CxlRejReason,self.__class__,CxlRejReason)
_quickfix.CxlRejReason_swigregister(CxlRejReasonPtr)

class OrdRejReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrdRejReason, name)
    def __repr__(self):
        return "<C FIX::OrdRejReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrdRejReason, 'this', _quickfix.new_OrdRejReason(*args))
        _swig_setattr(self, OrdRejReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrdRejReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrdRejReasonPtr(OrdRejReason):
    def __init__(self, this):
        _swig_setattr(self, OrdRejReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrdRejReason, 'thisown', 0)
        _swig_setattr(self, OrdRejReason,self.__class__,OrdRejReason)
_quickfix.OrdRejReason_swigregister(OrdRejReasonPtr)

class IOIQualifier(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIQualifier, name)
    def __repr__(self):
        return "<C FIX::IOIQualifier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIQualifier, 'this', _quickfix.new_IOIQualifier(*args))
        _swig_setattr(self, IOIQualifier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIQualifier):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOIQualifierPtr(IOIQualifier):
    def __init__(self, this):
        _swig_setattr(self, IOIQualifier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIQualifier, 'thisown', 0)
        _swig_setattr(self, IOIQualifier,self.__class__,IOIQualifier)
_quickfix.IOIQualifier_swigregister(IOIQualifierPtr)

class WaveNo(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveNo, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, WaveNo, name)
    def __repr__(self):
        return "<C FIX::WaveNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, WaveNo, 'this', _quickfix.new_WaveNo(*args))
        _swig_setattr(self, WaveNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_WaveNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class WaveNoPtr(WaveNo):
    def __init__(self, this):
        _swig_setattr(self, WaveNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, WaveNo, 'thisown', 0)
        _swig_setattr(self, WaveNo,self.__class__,WaveNo)
_quickfix.WaveNo_swigregister(WaveNoPtr)

class Issuer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Issuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Issuer, name)
    def __repr__(self):
        return "<C FIX::Issuer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Issuer, 'this', _quickfix.new_Issuer(*args))
        _swig_setattr(self, Issuer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Issuer):
        try:
            if self.thisown: destroy(self)
        except: pass

class IssuerPtr(Issuer):
    def __init__(self, this):
        _swig_setattr(self, Issuer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Issuer, 'thisown', 0)
        _swig_setattr(self, Issuer,self.__class__,Issuer)
_quickfix.Issuer_swigregister(IssuerPtr)

class SecurityDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityDesc, name)
    def __repr__(self):
        return "<C FIX::SecurityDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityDesc, 'this', _quickfix.new_SecurityDesc(*args))
        _swig_setattr(self, SecurityDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityDescPtr(SecurityDesc):
    def __init__(self, this):
        _swig_setattr(self, SecurityDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityDesc, 'thisown', 0)
        _swig_setattr(self, SecurityDesc,self.__class__,SecurityDesc)
_quickfix.SecurityDesc_swigregister(SecurityDescPtr)

class HeartBtInt(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeartBtInt, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HeartBtInt, name)
    def __repr__(self):
        return "<C FIX::HeartBtInt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HeartBtInt, 'this', _quickfix.new_HeartBtInt(*args))
        _swig_setattr(self, HeartBtInt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HeartBtInt):
        try:
            if self.thisown: destroy(self)
        except: pass

class HeartBtIntPtr(HeartBtInt):
    def __init__(self, this):
        _swig_setattr(self, HeartBtInt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HeartBtInt, 'thisown', 0)
        _swig_setattr(self, HeartBtInt,self.__class__,HeartBtInt)
_quickfix.HeartBtInt_swigregister(HeartBtIntPtr)

class MinQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MinQty, name)
    def __repr__(self):
        return "<C FIX::MinQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MinQty, 'this', _quickfix.new_MinQty(*args))
        _swig_setattr(self, MinQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MinQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class MinQtyPtr(MinQty):
    def __init__(self, this):
        _swig_setattr(self, MinQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MinQty, 'thisown', 0)
        _swig_setattr(self, MinQty,self.__class__,MinQty)
_quickfix.MinQty_swigregister(MinQtyPtr)

class MaxFloor(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxFloor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaxFloor, name)
    def __repr__(self):
        return "<C FIX::MaxFloor instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaxFloor, 'this', _quickfix.new_MaxFloor(*args))
        _swig_setattr(self, MaxFloor, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaxFloor):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaxFloorPtr(MaxFloor):
    def __init__(self, this):
        _swig_setattr(self, MaxFloor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaxFloor, 'thisown', 0)
        _swig_setattr(self, MaxFloor,self.__class__,MaxFloor)
_quickfix.MaxFloor_swigregister(MaxFloorPtr)

class TestReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TestReqID, name)
    def __repr__(self):
        return "<C FIX::TestReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TestReqID, 'this', _quickfix.new_TestReqID(*args))
        _swig_setattr(self, TestReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TestReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TestReqIDPtr(TestReqID):
    def __init__(self, this):
        _swig_setattr(self, TestReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TestReqID, 'thisown', 0)
        _swig_setattr(self, TestReqID,self.__class__,TestReqID)
_quickfix.TestReqID_swigregister(TestReqIDPtr)

class ReportToExch(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportToExch, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ReportToExch, name)
    def __repr__(self):
        return "<C FIX::ReportToExch instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ReportToExch, 'this', _quickfix.new_ReportToExch(*args))
        _swig_setattr(self, ReportToExch, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ReportToExch):
        try:
            if self.thisown: destroy(self)
        except: pass

class ReportToExchPtr(ReportToExch):
    def __init__(self, this):
        _swig_setattr(self, ReportToExch, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ReportToExch, 'thisown', 0)
        _swig_setattr(self, ReportToExch,self.__class__,ReportToExch)
_quickfix.ReportToExch_swigregister(ReportToExchPtr)

class LocateReqd(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocateReqd, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LocateReqd, name)
    def __repr__(self):
        return "<C FIX::LocateReqd instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LocateReqd, 'this', _quickfix.new_LocateReqd(*args))
        _swig_setattr(self, LocateReqd, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LocateReqd):
        try:
            if self.thisown: destroy(self)
        except: pass

class LocateReqdPtr(LocateReqd):
    def __init__(self, this):
        _swig_setattr(self, LocateReqd, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LocateReqd, 'thisown', 0)
        _swig_setattr(self, LocateReqd,self.__class__,LocateReqd)
_quickfix.LocateReqd_swigregister(LocateReqdPtr)

class OnBehalfOfCompID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfCompID, name)
    def __repr__(self):
        return "<C FIX::OnBehalfOfCompID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OnBehalfOfCompID, 'this', _quickfix.new_OnBehalfOfCompID(*args))
        _swig_setattr(self, OnBehalfOfCompID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OnBehalfOfCompID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OnBehalfOfCompIDPtr(OnBehalfOfCompID):
    def __init__(self, this):
        _swig_setattr(self, OnBehalfOfCompID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OnBehalfOfCompID, 'thisown', 0)
        _swig_setattr(self, OnBehalfOfCompID,self.__class__,OnBehalfOfCompID)
_quickfix.OnBehalfOfCompID_swigregister(OnBehalfOfCompIDPtr)

class OnBehalfOfSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfSubID, name)
    def __repr__(self):
        return "<C FIX::OnBehalfOfSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OnBehalfOfSubID, 'this', _quickfix.new_OnBehalfOfSubID(*args))
        _swig_setattr(self, OnBehalfOfSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OnBehalfOfSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OnBehalfOfSubIDPtr(OnBehalfOfSubID):
    def __init__(self, this):
        _swig_setattr(self, OnBehalfOfSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OnBehalfOfSubID, 'thisown', 0)
        _swig_setattr(self, OnBehalfOfSubID,self.__class__,OnBehalfOfSubID)
_quickfix.OnBehalfOfSubID_swigregister(OnBehalfOfSubIDPtr)

class QuoteID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteID, name)
    def __repr__(self):
        return "<C FIX::QuoteID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteID, 'this', _quickfix.new_QuoteID(*args))
        _swig_setattr(self, QuoteID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteID):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteIDPtr(QuoteID):
    def __init__(self, this):
        _swig_setattr(self, QuoteID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteID, 'thisown', 0)
        _swig_setattr(self, QuoteID,self.__class__,QuoteID)
_quickfix.QuoteID_swigregister(QuoteIDPtr)

class NetMoney(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetMoney, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetMoney, name)
    def __repr__(self):
        return "<C FIX::NetMoney instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetMoney, 'this', _quickfix.new_NetMoney(*args))
        _swig_setattr(self, NetMoney, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetMoney):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetMoneyPtr(NetMoney):
    def __init__(self, this):
        _swig_setattr(self, NetMoney, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetMoney, 'thisown', 0)
        _swig_setattr(self, NetMoney,self.__class__,NetMoney)
_quickfix.NetMoney_swigregister(NetMoneyPtr)

class SettlCurrAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrAmt, name)
    def __repr__(self):
        return "<C FIX::SettlCurrAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlCurrAmt, 'this', _quickfix.new_SettlCurrAmt(*args))
        _swig_setattr(self, SettlCurrAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlCurrAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlCurrAmtPtr(SettlCurrAmt):
    def __init__(self, this):
        _swig_setattr(self, SettlCurrAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlCurrAmt, 'thisown', 0)
        _swig_setattr(self, SettlCurrAmt,self.__class__,SettlCurrAmt)
_quickfix.SettlCurrAmt_swigregister(SettlCurrAmtPtr)

class SettlCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrency, name)
    def __repr__(self):
        return "<C FIX::SettlCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlCurrency, 'this', _quickfix.new_SettlCurrency(*args))
        _swig_setattr(self, SettlCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlCurrencyPtr(SettlCurrency):
    def __init__(self, this):
        _swig_setattr(self, SettlCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlCurrency, 'thisown', 0)
        _swig_setattr(self, SettlCurrency,self.__class__,SettlCurrency)
_quickfix.SettlCurrency_swigregister(SettlCurrencyPtr)

class ForexReq(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForexReq, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ForexReq, name)
    def __repr__(self):
        return "<C FIX::ForexReq instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ForexReq, 'this', _quickfix.new_ForexReq(*args))
        _swig_setattr(self, ForexReq, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ForexReq):
        try:
            if self.thisown: destroy(self)
        except: pass

class ForexReqPtr(ForexReq):
    def __init__(self, this):
        _swig_setattr(self, ForexReq, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ForexReq, 'thisown', 0)
        _swig_setattr(self, ForexReq,self.__class__,ForexReq)
_quickfix.ForexReq_swigregister(ForexReqPtr)

class OrigSendingTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigSendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrigSendingTime, name)
    def __repr__(self):
        return "<C FIX::OrigSendingTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrigSendingTime, 'this', _quickfix.new_OrigSendingTime(*args))
        _swig_setattr(self, OrigSendingTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrigSendingTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrigSendingTimePtr(OrigSendingTime):
    def __init__(self, this):
        _swig_setattr(self, OrigSendingTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrigSendingTime, 'thisown', 0)
        _swig_setattr(self, OrigSendingTime,self.__class__,OrigSendingTime)
_quickfix.OrigSendingTime_swigregister(OrigSendingTimePtr)

class GapFillFlag(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, GapFillFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, GapFillFlag, name)
    def __repr__(self):
        return "<C FIX::GapFillFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, GapFillFlag, 'this', _quickfix.new_GapFillFlag(*args))
        _swig_setattr(self, GapFillFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_GapFillFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class GapFillFlagPtr(GapFillFlag):
    def __init__(self, this):
        _swig_setattr(self, GapFillFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, GapFillFlag, 'thisown', 0)
        _swig_setattr(self, GapFillFlag,self.__class__,GapFillFlag)
_quickfix.GapFillFlag_swigregister(GapFillFlagPtr)

class NoExecs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoExecs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoExecs, name)
    def __repr__(self):
        return "<C FIX::NoExecs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoExecs, 'this', _quickfix.new_NoExecs(*args))
        _swig_setattr(self, NoExecs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoExecs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoExecsPtr(NoExecs):
    def __init__(self, this):
        _swig_setattr(self, NoExecs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoExecs, 'thisown', 0)
        _swig_setattr(self, NoExecs,self.__class__,NoExecs)
_quickfix.NoExecs_swigregister(NoExecsPtr)

class ExpireTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpireTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExpireTime, name)
    def __repr__(self):
        return "<C FIX::ExpireTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExpireTime, 'this', _quickfix.new_ExpireTime(*args))
        _swig_setattr(self, ExpireTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExpireTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExpireTimePtr(ExpireTime):
    def __init__(self, this):
        _swig_setattr(self, ExpireTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExpireTime, 'thisown', 0)
        _swig_setattr(self, ExpireTime,self.__class__,ExpireTime)
_quickfix.ExpireTime_swigregister(ExpireTimePtr)

class DKReason(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DKReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DKReason, name)
    def __repr__(self):
        return "<C FIX::DKReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DKReason, 'this', _quickfix.new_DKReason(*args))
        _swig_setattr(self, DKReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DKReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class DKReasonPtr(DKReason):
    def __init__(self, this):
        _swig_setattr(self, DKReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DKReason, 'thisown', 0)
        _swig_setattr(self, DKReason,self.__class__,DKReason)
_quickfix.DKReason_swigregister(DKReasonPtr)

class DeliverToCompID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliverToCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeliverToCompID, name)
    def __repr__(self):
        return "<C FIX::DeliverToCompID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeliverToCompID, 'this', _quickfix.new_DeliverToCompID(*args))
        _swig_setattr(self, DeliverToCompID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeliverToCompID):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeliverToCompIDPtr(DeliverToCompID):
    def __init__(self, this):
        _swig_setattr(self, DeliverToCompID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeliverToCompID, 'thisown', 0)
        _swig_setattr(self, DeliverToCompID,self.__class__,DeliverToCompID)
_quickfix.DeliverToCompID_swigregister(DeliverToCompIDPtr)

class DeliverToSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliverToSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeliverToSubID, name)
    def __repr__(self):
        return "<C FIX::DeliverToSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeliverToSubID, 'this', _quickfix.new_DeliverToSubID(*args))
        _swig_setattr(self, DeliverToSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeliverToSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeliverToSubIDPtr(DeliverToSubID):
    def __init__(self, this):
        _swig_setattr(self, DeliverToSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeliverToSubID, 'thisown', 0)
        _swig_setattr(self, DeliverToSubID,self.__class__,DeliverToSubID)
_quickfix.DeliverToSubID_swigregister(DeliverToSubIDPtr)

class IOINaturalFlag(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOINaturalFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOINaturalFlag, name)
    def __repr__(self):
        return "<C FIX::IOINaturalFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOINaturalFlag, 'this', _quickfix.new_IOINaturalFlag(*args))
        _swig_setattr(self, IOINaturalFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOINaturalFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOINaturalFlagPtr(IOINaturalFlag):
    def __init__(self, this):
        _swig_setattr(self, IOINaturalFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOINaturalFlag, 'thisown', 0)
        _swig_setattr(self, IOINaturalFlag,self.__class__,IOINaturalFlag)
_quickfix.IOINaturalFlag_swigregister(IOINaturalFlagPtr)

class QuoteReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteReqID, name)
    def __repr__(self):
        return "<C FIX::QuoteReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteReqID, 'this', _quickfix.new_QuoteReqID(*args))
        _swig_setattr(self, QuoteReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteReqIDPtr(QuoteReqID):
    def __init__(self, this):
        _swig_setattr(self, QuoteReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteReqID, 'thisown', 0)
        _swig_setattr(self, QuoteReqID,self.__class__,QuoteReqID)
_quickfix.QuoteReqID_swigregister(QuoteReqIDPtr)

class BidPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidPx, name)
    def __repr__(self):
        return "<C FIX::BidPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidPx, 'this', _quickfix.new_BidPx(*args))
        _swig_setattr(self, BidPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidPxPtr(BidPx):
    def __init__(self, this):
        _swig_setattr(self, BidPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidPx, 'thisown', 0)
        _swig_setattr(self, BidPx,self.__class__,BidPx)
_quickfix.BidPx_swigregister(BidPxPtr)

class OfferPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OfferPx, name)
    def __repr__(self):
        return "<C FIX::OfferPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OfferPx, 'this', _quickfix.new_OfferPx(*args))
        _swig_setattr(self, OfferPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OfferPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class OfferPxPtr(OfferPx):
    def __init__(self, this):
        _swig_setattr(self, OfferPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OfferPx, 'thisown', 0)
        _swig_setattr(self, OfferPx,self.__class__,OfferPx)
_quickfix.OfferPx_swigregister(OfferPxPtr)

class BidSize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidSize, name)
    def __repr__(self):
        return "<C FIX::BidSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidSize, 'this', _quickfix.new_BidSize(*args))
        _swig_setattr(self, BidSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidSizePtr(BidSize):
    def __init__(self, this):
        _swig_setattr(self, BidSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidSize, 'thisown', 0)
        _swig_setattr(self, BidSize,self.__class__,BidSize)
_quickfix.BidSize_swigregister(BidSizePtr)

class OfferSize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OfferSize, name)
    def __repr__(self):
        return "<C FIX::OfferSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OfferSize, 'this', _quickfix.new_OfferSize(*args))
        _swig_setattr(self, OfferSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OfferSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class OfferSizePtr(OfferSize):
    def __init__(self, this):
        _swig_setattr(self, OfferSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OfferSize, 'thisown', 0)
        _swig_setattr(self, OfferSize,self.__class__,OfferSize)
_quickfix.OfferSize_swigregister(OfferSizePtr)

class NoMiscFees(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMiscFees, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoMiscFees, name)
    def __repr__(self):
        return "<C FIX::NoMiscFees instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoMiscFees, 'this', _quickfix.new_NoMiscFees(*args))
        _swig_setattr(self, NoMiscFees, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoMiscFees):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoMiscFeesPtr(NoMiscFees):
    def __init__(self, this):
        _swig_setattr(self, NoMiscFees, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoMiscFees, 'thisown', 0)
        _swig_setattr(self, NoMiscFees,self.__class__,NoMiscFees)
_quickfix.NoMiscFees_swigregister(NoMiscFeesPtr)

class MiscFeeAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeAmt, name)
    def __repr__(self):
        return "<C FIX::MiscFeeAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MiscFeeAmt, 'this', _quickfix.new_MiscFeeAmt(*args))
        _swig_setattr(self, MiscFeeAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MiscFeeAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class MiscFeeAmtPtr(MiscFeeAmt):
    def __init__(self, this):
        _swig_setattr(self, MiscFeeAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MiscFeeAmt, 'thisown', 0)
        _swig_setattr(self, MiscFeeAmt,self.__class__,MiscFeeAmt)
_quickfix.MiscFeeAmt_swigregister(MiscFeeAmtPtr)

class MiscFeeCurr(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeCurr, name)
    def __repr__(self):
        return "<C FIX::MiscFeeCurr instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MiscFeeCurr, 'this', _quickfix.new_MiscFeeCurr(*args))
        _swig_setattr(self, MiscFeeCurr, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MiscFeeCurr):
        try:
            if self.thisown: destroy(self)
        except: pass

class MiscFeeCurrPtr(MiscFeeCurr):
    def __init__(self, this):
        _swig_setattr(self, MiscFeeCurr, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MiscFeeCurr, 'thisown', 0)
        _swig_setattr(self, MiscFeeCurr,self.__class__,MiscFeeCurr)
_quickfix.MiscFeeCurr_swigregister(MiscFeeCurrPtr)

class MiscFeeType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeType, name)
    def __repr__(self):
        return "<C FIX::MiscFeeType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MiscFeeType, 'this', _quickfix.new_MiscFeeType(*args))
        _swig_setattr(self, MiscFeeType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MiscFeeType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MiscFeeTypePtr(MiscFeeType):
    def __init__(self, this):
        _swig_setattr(self, MiscFeeType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MiscFeeType, 'thisown', 0)
        _swig_setattr(self, MiscFeeType,self.__class__,MiscFeeType)
_quickfix.MiscFeeType_swigregister(MiscFeeTypePtr)

class PrevClosePx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrevClosePx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PrevClosePx, name)
    def __repr__(self):
        return "<C FIX::PrevClosePx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PrevClosePx, 'this', _quickfix.new_PrevClosePx(*args))
        _swig_setattr(self, PrevClosePx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PrevClosePx):
        try:
            if self.thisown: destroy(self)
        except: pass

class PrevClosePxPtr(PrevClosePx):
    def __init__(self, this):
        _swig_setattr(self, PrevClosePx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PrevClosePx, 'thisown', 0)
        _swig_setattr(self, PrevClosePx,self.__class__,PrevClosePx)
_quickfix.PrevClosePx_swigregister(PrevClosePxPtr)

class ResetSeqNumFlag(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResetSeqNumFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ResetSeqNumFlag, name)
    def __repr__(self):
        return "<C FIX::ResetSeqNumFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ResetSeqNumFlag, 'this', _quickfix.new_ResetSeqNumFlag(*args))
        _swig_setattr(self, ResetSeqNumFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ResetSeqNumFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class ResetSeqNumFlagPtr(ResetSeqNumFlag):
    def __init__(self, this):
        _swig_setattr(self, ResetSeqNumFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ResetSeqNumFlag, 'thisown', 0)
        _swig_setattr(self, ResetSeqNumFlag,self.__class__,ResetSeqNumFlag)
_quickfix.ResetSeqNumFlag_swigregister(ResetSeqNumFlagPtr)

class SenderLocationID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SenderLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SenderLocationID, name)
    def __repr__(self):
        return "<C FIX::SenderLocationID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SenderLocationID, 'this', _quickfix.new_SenderLocationID(*args))
        _swig_setattr(self, SenderLocationID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SenderLocationID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SenderLocationIDPtr(SenderLocationID):
    def __init__(self, this):
        _swig_setattr(self, SenderLocationID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SenderLocationID, 'thisown', 0)
        _swig_setattr(self, SenderLocationID,self.__class__,SenderLocationID)
_quickfix.SenderLocationID_swigregister(SenderLocationIDPtr)

class TargetLocationID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TargetLocationID, name)
    def __repr__(self):
        return "<C FIX::TargetLocationID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TargetLocationID, 'this', _quickfix.new_TargetLocationID(*args))
        _swig_setattr(self, TargetLocationID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TargetLocationID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TargetLocationIDPtr(TargetLocationID):
    def __init__(self, this):
        _swig_setattr(self, TargetLocationID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TargetLocationID, 'thisown', 0)
        _swig_setattr(self, TargetLocationID,self.__class__,TargetLocationID)
_quickfix.TargetLocationID_swigregister(TargetLocationIDPtr)

class OnBehalfOfLocationID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfLocationID, name)
    def __repr__(self):
        return "<C FIX::OnBehalfOfLocationID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OnBehalfOfLocationID, 'this', _quickfix.new_OnBehalfOfLocationID(*args))
        _swig_setattr(self, OnBehalfOfLocationID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OnBehalfOfLocationID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OnBehalfOfLocationIDPtr(OnBehalfOfLocationID):
    def __init__(self, this):
        _swig_setattr(self, OnBehalfOfLocationID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OnBehalfOfLocationID, 'thisown', 0)
        _swig_setattr(self, OnBehalfOfLocationID,self.__class__,OnBehalfOfLocationID)
_quickfix.OnBehalfOfLocationID_swigregister(OnBehalfOfLocationIDPtr)

class DeliverToLocationID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliverToLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeliverToLocationID, name)
    def __repr__(self):
        return "<C FIX::DeliverToLocationID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeliverToLocationID, 'this', _quickfix.new_DeliverToLocationID(*args))
        _swig_setattr(self, DeliverToLocationID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeliverToLocationID):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeliverToLocationIDPtr(DeliverToLocationID):
    def __init__(self, this):
        _swig_setattr(self, DeliverToLocationID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeliverToLocationID, 'thisown', 0)
        _swig_setattr(self, DeliverToLocationID,self.__class__,DeliverToLocationID)
_quickfix.DeliverToLocationID_swigregister(DeliverToLocationIDPtr)

class NoRelatedSym(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRelatedSym, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoRelatedSym, name)
    def __repr__(self):
        return "<C FIX::NoRelatedSym instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoRelatedSym, 'this', _quickfix.new_NoRelatedSym(*args))
        _swig_setattr(self, NoRelatedSym, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoRelatedSym):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoRelatedSymPtr(NoRelatedSym):
    def __init__(self, this):
        _swig_setattr(self, NoRelatedSym, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoRelatedSym, 'thisown', 0)
        _swig_setattr(self, NoRelatedSym,self.__class__,NoRelatedSym)
_quickfix.NoRelatedSym_swigregister(NoRelatedSymPtr)

class Subject(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subject, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Subject, name)
    def __repr__(self):
        return "<C FIX::Subject instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Subject, 'this', _quickfix.new_Subject(*args))
        _swig_setattr(self, Subject, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Subject):
        try:
            if self.thisown: destroy(self)
        except: pass

class SubjectPtr(Subject):
    def __init__(self, this):
        _swig_setattr(self, Subject, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Subject, 'thisown', 0)
        _swig_setattr(self, Subject,self.__class__,Subject)
_quickfix.Subject_swigregister(SubjectPtr)

class Headline(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Headline, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Headline, name)
    def __repr__(self):
        return "<C FIX::Headline instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Headline, 'this', _quickfix.new_Headline(*args))
        _swig_setattr(self, Headline, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Headline):
        try:
            if self.thisown: destroy(self)
        except: pass

class HeadlinePtr(Headline):
    def __init__(self, this):
        _swig_setattr(self, Headline, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Headline, 'thisown', 0)
        _swig_setattr(self, Headline,self.__class__,Headline)
_quickfix.Headline_swigregister(HeadlinePtr)

class URLLink(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, URLLink, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, URLLink, name)
    def __repr__(self):
        return "<C FIX::URLLink instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, URLLink, 'this', _quickfix.new_URLLink(*args))
        _swig_setattr(self, URLLink, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_URLLink):
        try:
            if self.thisown: destroy(self)
        except: pass

class URLLinkPtr(URLLink):
    def __init__(self, this):
        _swig_setattr(self, URLLink, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, URLLink, 'thisown', 0)
        _swig_setattr(self, URLLink,self.__class__,URLLink)
_quickfix.URLLink_swigregister(URLLinkPtr)

class ExecType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecType, name)
    def __repr__(self):
        return "<C FIX::ExecType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecType, 'this', _quickfix.new_ExecType(*args))
        _swig_setattr(self, ExecType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecTypePtr(ExecType):
    def __init__(self, this):
        _swig_setattr(self, ExecType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecType, 'thisown', 0)
        _swig_setattr(self, ExecType,self.__class__,ExecType)
_quickfix.ExecType_swigregister(ExecTypePtr)

class LeavesQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LeavesQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LeavesQty, name)
    def __repr__(self):
        return "<C FIX::LeavesQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LeavesQty, 'this', _quickfix.new_LeavesQty(*args))
        _swig_setattr(self, LeavesQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LeavesQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LeavesQtyPtr(LeavesQty):
    def __init__(self, this):
        _swig_setattr(self, LeavesQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LeavesQty, 'thisown', 0)
        _swig_setattr(self, LeavesQty,self.__class__,LeavesQty)
_quickfix.LeavesQty_swigregister(LeavesQtyPtr)

class CashOrderQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashOrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashOrderQty, name)
    def __repr__(self):
        return "<C FIX::CashOrderQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashOrderQty, 'this', _quickfix.new_CashOrderQty(*args))
        _swig_setattr(self, CashOrderQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashOrderQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashOrderQtyPtr(CashOrderQty):
    def __init__(self, this):
        _swig_setattr(self, CashOrderQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashOrderQty, 'thisown', 0)
        _swig_setattr(self, CashOrderQty,self.__class__,CashOrderQty)
_quickfix.CashOrderQty_swigregister(CashOrderQtyPtr)

class AllocAvgPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAvgPx, name)
    def __repr__(self):
        return "<C FIX::AllocAvgPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocAvgPx, 'this', _quickfix.new_AllocAvgPx(*args))
        _swig_setattr(self, AllocAvgPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocAvgPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocAvgPxPtr(AllocAvgPx):
    def __init__(self, this):
        _swig_setattr(self, AllocAvgPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocAvgPx, 'thisown', 0)
        _swig_setattr(self, AllocAvgPx,self.__class__,AllocAvgPx)
_quickfix.AllocAvgPx_swigregister(AllocAvgPxPtr)

class AllocNetMoney(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocNetMoney, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocNetMoney, name)
    def __repr__(self):
        return "<C FIX::AllocNetMoney instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocNetMoney, 'this', _quickfix.new_AllocNetMoney(*args))
        _swig_setattr(self, AllocNetMoney, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocNetMoney):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocNetMoneyPtr(AllocNetMoney):
    def __init__(self, this):
        _swig_setattr(self, AllocNetMoney, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocNetMoney, 'thisown', 0)
        _swig_setattr(self, AllocNetMoney,self.__class__,AllocNetMoney)
_quickfix.AllocNetMoney_swigregister(AllocNetMoneyPtr)

class SettlCurrFxRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrFxRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrFxRate, name)
    def __repr__(self):
        return "<C FIX::SettlCurrFxRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlCurrFxRate, 'this', _quickfix.new_SettlCurrFxRate(*args))
        _swig_setattr(self, SettlCurrFxRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlCurrFxRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlCurrFxRatePtr(SettlCurrFxRate):
    def __init__(self, this):
        _swig_setattr(self, SettlCurrFxRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlCurrFxRate, 'thisown', 0)
        _swig_setattr(self, SettlCurrFxRate,self.__class__,SettlCurrFxRate)
_quickfix.SettlCurrFxRate_swigregister(SettlCurrFxRatePtr)

class SettlCurrFxRateCalc(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrFxRateCalc, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrFxRateCalc, name)
    def __repr__(self):
        return "<C FIX::SettlCurrFxRateCalc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlCurrFxRateCalc, 'this', _quickfix.new_SettlCurrFxRateCalc(*args))
        _swig_setattr(self, SettlCurrFxRateCalc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlCurrFxRateCalc):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlCurrFxRateCalcPtr(SettlCurrFxRateCalc):
    def __init__(self, this):
        _swig_setattr(self, SettlCurrFxRateCalc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlCurrFxRateCalc, 'thisown', 0)
        _swig_setattr(self, SettlCurrFxRateCalc,self.__class__,SettlCurrFxRateCalc)
_quickfix.SettlCurrFxRateCalc_swigregister(SettlCurrFxRateCalcPtr)

class NumDaysInterest(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumDaysInterest, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NumDaysInterest, name)
    def __repr__(self):
        return "<C FIX::NumDaysInterest instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NumDaysInterest, 'this', _quickfix.new_NumDaysInterest(*args))
        _swig_setattr(self, NumDaysInterest, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NumDaysInterest):
        try:
            if self.thisown: destroy(self)
        except: pass

class NumDaysInterestPtr(NumDaysInterest):
    def __init__(self, this):
        _swig_setattr(self, NumDaysInterest, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NumDaysInterest, 'thisown', 0)
        _swig_setattr(self, NumDaysInterest,self.__class__,NumDaysInterest)
_quickfix.NumDaysInterest_swigregister(NumDaysInterestPtr)

class AccruedInterestRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccruedInterestRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AccruedInterestRate, name)
    def __repr__(self):
        return "<C FIX::AccruedInterestRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AccruedInterestRate, 'this', _quickfix.new_AccruedInterestRate(*args))
        _swig_setattr(self, AccruedInterestRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AccruedInterestRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class AccruedInterestRatePtr(AccruedInterestRate):
    def __init__(self, this):
        _swig_setattr(self, AccruedInterestRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AccruedInterestRate, 'thisown', 0)
        _swig_setattr(self, AccruedInterestRate,self.__class__,AccruedInterestRate)
_quickfix.AccruedInterestRate_swigregister(AccruedInterestRatePtr)

class AccruedInterestAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AccruedInterestAmt, name)
    def __repr__(self):
        return "<C FIX::AccruedInterestAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AccruedInterestAmt, 'this', _quickfix.new_AccruedInterestAmt(*args))
        _swig_setattr(self, AccruedInterestAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AccruedInterestAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class AccruedInterestAmtPtr(AccruedInterestAmt):
    def __init__(self, this):
        _swig_setattr(self, AccruedInterestAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AccruedInterestAmt, 'thisown', 0)
        _swig_setattr(self, AccruedInterestAmt,self.__class__,AccruedInterestAmt)
_quickfix.AccruedInterestAmt_swigregister(AccruedInterestAmtPtr)

class SettlInstMode(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstMode, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstMode, name)
    def __repr__(self):
        return "<C FIX::SettlInstMode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstMode, 'this', _quickfix.new_SettlInstMode(*args))
        _swig_setattr(self, SettlInstMode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstMode):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstModePtr(SettlInstMode):
    def __init__(self, this):
        _swig_setattr(self, SettlInstMode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstMode, 'thisown', 0)
        _swig_setattr(self, SettlInstMode,self.__class__,SettlInstMode)
_quickfix.SettlInstMode_swigregister(SettlInstModePtr)

class AllocText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocText, name)
    def __repr__(self):
        return "<C FIX::AllocText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocText, 'this', _quickfix.new_AllocText(*args))
        _swig_setattr(self, AllocText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocText):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocTextPtr(AllocText):
    def __init__(self, this):
        _swig_setattr(self, AllocText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocText, 'thisown', 0)
        _swig_setattr(self, AllocText,self.__class__,AllocText)
_quickfix.AllocText_swigregister(AllocTextPtr)

class SettlInstID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstID, name)
    def __repr__(self):
        return "<C FIX::SettlInstID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstID, 'this', _quickfix.new_SettlInstID(*args))
        _swig_setattr(self, SettlInstID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstIDPtr(SettlInstID):
    def __init__(self, this):
        _swig_setattr(self, SettlInstID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstID, 'thisown', 0)
        _swig_setattr(self, SettlInstID,self.__class__,SettlInstID)
_quickfix.SettlInstID_swigregister(SettlInstIDPtr)

class SettlInstTransType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstTransType, name)
    def __repr__(self):
        return "<C FIX::SettlInstTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstTransType, 'this', _quickfix.new_SettlInstTransType(*args))
        _swig_setattr(self, SettlInstTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstTransTypePtr(SettlInstTransType):
    def __init__(self, this):
        _swig_setattr(self, SettlInstTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstTransType, 'thisown', 0)
        _swig_setattr(self, SettlInstTransType,self.__class__,SettlInstTransType)
_quickfix.SettlInstTransType_swigregister(SettlInstTransTypePtr)

class EmailThreadID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmailThreadID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EmailThreadID, name)
    def __repr__(self):
        return "<C FIX::EmailThreadID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EmailThreadID, 'this', _quickfix.new_EmailThreadID(*args))
        _swig_setattr(self, EmailThreadID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EmailThreadID):
        try:
            if self.thisown: destroy(self)
        except: pass

class EmailThreadIDPtr(EmailThreadID):
    def __init__(self, this):
        _swig_setattr(self, EmailThreadID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EmailThreadID, 'thisown', 0)
        _swig_setattr(self, EmailThreadID,self.__class__,EmailThreadID)
_quickfix.EmailThreadID_swigregister(EmailThreadIDPtr)

class SettlInstSource(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstSource, name)
    def __repr__(self):
        return "<C FIX::SettlInstSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstSource, 'this', _quickfix.new_SettlInstSource(*args))
        _swig_setattr(self, SettlInstSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstSourcePtr(SettlInstSource):
    def __init__(self, this):
        _swig_setattr(self, SettlInstSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstSource, 'thisown', 0)
        _swig_setattr(self, SettlInstSource,self.__class__,SettlInstSource)
_quickfix.SettlInstSource_swigregister(SettlInstSourcePtr)

class SecurityType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityType, name)
    def __repr__(self):
        return "<C FIX::SecurityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityType, 'this', _quickfix.new_SecurityType(*args))
        _swig_setattr(self, SecurityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityTypePtr(SecurityType):
    def __init__(self, this):
        _swig_setattr(self, SecurityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityType, 'thisown', 0)
        _swig_setattr(self, SecurityType,self.__class__,SecurityType)
_quickfix.SecurityType_swigregister(SecurityTypePtr)

class EffectiveTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectiveTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EffectiveTime, name)
    def __repr__(self):
        return "<C FIX::EffectiveTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EffectiveTime, 'this', _quickfix.new_EffectiveTime(*args))
        _swig_setattr(self, EffectiveTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EffectiveTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class EffectiveTimePtr(EffectiveTime):
    def __init__(self, this):
        _swig_setattr(self, EffectiveTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EffectiveTime, 'thisown', 0)
        _swig_setattr(self, EffectiveTime,self.__class__,EffectiveTime)
_quickfix.EffectiveTime_swigregister(EffectiveTimePtr)

class StandInstDbType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandInstDbType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StandInstDbType, name)
    def __repr__(self):
        return "<C FIX::StandInstDbType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StandInstDbType, 'this', _quickfix.new_StandInstDbType(*args))
        _swig_setattr(self, StandInstDbType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StandInstDbType):
        try:
            if self.thisown: destroy(self)
        except: pass

class StandInstDbTypePtr(StandInstDbType):
    def __init__(self, this):
        _swig_setattr(self, StandInstDbType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StandInstDbType, 'thisown', 0)
        _swig_setattr(self, StandInstDbType,self.__class__,StandInstDbType)
_quickfix.StandInstDbType_swigregister(StandInstDbTypePtr)

class StandInstDbName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandInstDbName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StandInstDbName, name)
    def __repr__(self):
        return "<C FIX::StandInstDbName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StandInstDbName, 'this', _quickfix.new_StandInstDbName(*args))
        _swig_setattr(self, StandInstDbName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StandInstDbName):
        try:
            if self.thisown: destroy(self)
        except: pass

class StandInstDbNamePtr(StandInstDbName):
    def __init__(self, this):
        _swig_setattr(self, StandInstDbName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StandInstDbName, 'thisown', 0)
        _swig_setattr(self, StandInstDbName,self.__class__,StandInstDbName)
_quickfix.StandInstDbName_swigregister(StandInstDbNamePtr)

class StandInstDbID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandInstDbID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StandInstDbID, name)
    def __repr__(self):
        return "<C FIX::StandInstDbID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StandInstDbID, 'this', _quickfix.new_StandInstDbID(*args))
        _swig_setattr(self, StandInstDbID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StandInstDbID):
        try:
            if self.thisown: destroy(self)
        except: pass

class StandInstDbIDPtr(StandInstDbID):
    def __init__(self, this):
        _swig_setattr(self, StandInstDbID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StandInstDbID, 'thisown', 0)
        _swig_setattr(self, StandInstDbID,self.__class__,StandInstDbID)
_quickfix.StandInstDbID_swigregister(StandInstDbIDPtr)

class SettlDeliveryType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDeliveryType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDeliveryType, name)
    def __repr__(self):
        return "<C FIX::SettlDeliveryType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlDeliveryType, 'this', _quickfix.new_SettlDeliveryType(*args))
        _swig_setattr(self, SettlDeliveryType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlDeliveryType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlDeliveryTypePtr(SettlDeliveryType):
    def __init__(self, this):
        _swig_setattr(self, SettlDeliveryType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlDeliveryType, 'thisown', 0)
        _swig_setattr(self, SettlDeliveryType,self.__class__,SettlDeliveryType)
_quickfix.SettlDeliveryType_swigregister(SettlDeliveryTypePtr)

class BidSpotRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidSpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidSpotRate, name)
    def __repr__(self):
        return "<C FIX::BidSpotRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidSpotRate, 'this', _quickfix.new_BidSpotRate(*args))
        _swig_setattr(self, BidSpotRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidSpotRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidSpotRatePtr(BidSpotRate):
    def __init__(self, this):
        _swig_setattr(self, BidSpotRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidSpotRate, 'thisown', 0)
        _swig_setattr(self, BidSpotRate,self.__class__,BidSpotRate)
_quickfix.BidSpotRate_swigregister(BidSpotRatePtr)

class BidForwardPoints(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidForwardPoints, name)
    def __repr__(self):
        return "<C FIX::BidForwardPoints instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidForwardPoints, 'this', _quickfix.new_BidForwardPoints(*args))
        _swig_setattr(self, BidForwardPoints, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidForwardPoints):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidForwardPointsPtr(BidForwardPoints):
    def __init__(self, this):
        _swig_setattr(self, BidForwardPoints, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidForwardPoints, 'thisown', 0)
        _swig_setattr(self, BidForwardPoints,self.__class__,BidForwardPoints)
_quickfix.BidForwardPoints_swigregister(BidForwardPointsPtr)

class OfferSpotRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferSpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OfferSpotRate, name)
    def __repr__(self):
        return "<C FIX::OfferSpotRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OfferSpotRate, 'this', _quickfix.new_OfferSpotRate(*args))
        _swig_setattr(self, OfferSpotRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OfferSpotRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class OfferSpotRatePtr(OfferSpotRate):
    def __init__(self, this):
        _swig_setattr(self, OfferSpotRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OfferSpotRate, 'thisown', 0)
        _swig_setattr(self, OfferSpotRate,self.__class__,OfferSpotRate)
_quickfix.OfferSpotRate_swigregister(OfferSpotRatePtr)

class OfferForwardPoints(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OfferForwardPoints, name)
    def __repr__(self):
        return "<C FIX::OfferForwardPoints instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OfferForwardPoints, 'this', _quickfix.new_OfferForwardPoints(*args))
        _swig_setattr(self, OfferForwardPoints, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OfferForwardPoints):
        try:
            if self.thisown: destroy(self)
        except: pass

class OfferForwardPointsPtr(OfferForwardPoints):
    def __init__(self, this):
        _swig_setattr(self, OfferForwardPoints, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OfferForwardPoints, 'thisown', 0)
        _swig_setattr(self, OfferForwardPoints,self.__class__,OfferForwardPoints)
_quickfix.OfferForwardPoints_swigregister(OfferForwardPointsPtr)

class OrderQty2(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderQty2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderQty2, name)
    def __repr__(self):
        return "<C FIX::OrderQty2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderQty2, 'this', _quickfix.new_OrderQty2(*args))
        _swig_setattr(self, OrderQty2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderQty2):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderQty2Ptr(OrderQty2):
    def __init__(self, this):
        _swig_setattr(self, OrderQty2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderQty2, 'thisown', 0)
        _swig_setattr(self, OrderQty2,self.__class__,OrderQty2)
_quickfix.OrderQty2_swigregister(OrderQty2Ptr)

class SettlDate2(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDate2, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDate2, name)
    def __repr__(self):
        return "<C FIX::SettlDate2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlDate2, 'this', _quickfix.new_SettlDate2(*args))
        _swig_setattr(self, SettlDate2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlDate2):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlDate2Ptr(SettlDate2):
    def __init__(self, this):
        _swig_setattr(self, SettlDate2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlDate2, 'thisown', 0)
        _swig_setattr(self, SettlDate2,self.__class__,SettlDate2)
_quickfix.SettlDate2_swigregister(SettlDate2Ptr)

class LastSpotRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastSpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastSpotRate, name)
    def __repr__(self):
        return "<C FIX::LastSpotRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastSpotRate, 'this', _quickfix.new_LastSpotRate(*args))
        _swig_setattr(self, LastSpotRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastSpotRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastSpotRatePtr(LastSpotRate):
    def __init__(self, this):
        _swig_setattr(self, LastSpotRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastSpotRate, 'thisown', 0)
        _swig_setattr(self, LastSpotRate,self.__class__,LastSpotRate)
_quickfix.LastSpotRate_swigregister(LastSpotRatePtr)

class LastForwardPoints(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastForwardPoints, name)
    def __repr__(self):
        return "<C FIX::LastForwardPoints instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastForwardPoints, 'this', _quickfix.new_LastForwardPoints(*args))
        _swig_setattr(self, LastForwardPoints, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastForwardPoints):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastForwardPointsPtr(LastForwardPoints):
    def __init__(self, this):
        _swig_setattr(self, LastForwardPoints, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastForwardPoints, 'thisown', 0)
        _swig_setattr(self, LastForwardPoints,self.__class__,LastForwardPoints)
_quickfix.LastForwardPoints_swigregister(LastForwardPointsPtr)

class AllocLinkID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocLinkID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocLinkID, name)
    def __repr__(self):
        return "<C FIX::AllocLinkID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocLinkID, 'this', _quickfix.new_AllocLinkID(*args))
        _swig_setattr(self, AllocLinkID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocLinkID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocLinkIDPtr(AllocLinkID):
    def __init__(self, this):
        _swig_setattr(self, AllocLinkID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocLinkID, 'thisown', 0)
        _swig_setattr(self, AllocLinkID,self.__class__,AllocLinkID)
_quickfix.AllocLinkID_swigregister(AllocLinkIDPtr)

class AllocLinkType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocLinkType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocLinkType, name)
    def __repr__(self):
        return "<C FIX::AllocLinkType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocLinkType, 'this', _quickfix.new_AllocLinkType(*args))
        _swig_setattr(self, AllocLinkType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocLinkType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocLinkTypePtr(AllocLinkType):
    def __init__(self, this):
        _swig_setattr(self, AllocLinkType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocLinkType, 'thisown', 0)
        _swig_setattr(self, AllocLinkType,self.__class__,AllocLinkType)
_quickfix.AllocLinkType_swigregister(AllocLinkTypePtr)

class SecondaryOrderID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryOrderID, name)
    def __repr__(self):
        return "<C FIX::SecondaryOrderID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryOrderID, 'this', _quickfix.new_SecondaryOrderID(*args))
        _swig_setattr(self, SecondaryOrderID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryOrderID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryOrderIDPtr(SecondaryOrderID):
    def __init__(self, this):
        _swig_setattr(self, SecondaryOrderID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryOrderID, 'thisown', 0)
        _swig_setattr(self, SecondaryOrderID,self.__class__,SecondaryOrderID)
_quickfix.SecondaryOrderID_swigregister(SecondaryOrderIDPtr)

class NoIOIQualifiers(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoIOIQualifiers, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoIOIQualifiers, name)
    def __repr__(self):
        return "<C FIX::NoIOIQualifiers instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoIOIQualifiers, 'this', _quickfix.new_NoIOIQualifiers(*args))
        _swig_setattr(self, NoIOIQualifiers, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoIOIQualifiers):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoIOIQualifiersPtr(NoIOIQualifiers):
    def __init__(self, this):
        _swig_setattr(self, NoIOIQualifiers, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoIOIQualifiers, 'thisown', 0)
        _swig_setattr(self, NoIOIQualifiers,self.__class__,NoIOIQualifiers)
_quickfix.NoIOIQualifiers_swigregister(NoIOIQualifiersPtr)

class MaturityMonthYear(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityMonthYear, name)
    def __repr__(self):
        return "<C FIX::MaturityMonthYear instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaturityMonthYear, 'this', _quickfix.new_MaturityMonthYear(*args))
        _swig_setattr(self, MaturityMonthYear, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaturityMonthYear):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaturityMonthYearPtr(MaturityMonthYear):
    def __init__(self, this):
        _swig_setattr(self, MaturityMonthYear, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaturityMonthYear, 'thisown', 0)
        _swig_setattr(self, MaturityMonthYear,self.__class__,MaturityMonthYear)
_quickfix.MaturityMonthYear_swigregister(MaturityMonthYearPtr)

class StrikePrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StrikePrice, name)
    def __repr__(self):
        return "<C FIX::StrikePrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StrikePrice, 'this', _quickfix.new_StrikePrice(*args))
        _swig_setattr(self, StrikePrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StrikePrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class StrikePricePtr(StrikePrice):
    def __init__(self, this):
        _swig_setattr(self, StrikePrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StrikePrice, 'thisown', 0)
        _swig_setattr(self, StrikePrice,self.__class__,StrikePrice)
_quickfix.StrikePrice_swigregister(StrikePricePtr)

class CoveredOrUncovered(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoveredOrUncovered, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CoveredOrUncovered, name)
    def __repr__(self):
        return "<C FIX::CoveredOrUncovered instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CoveredOrUncovered, 'this', _quickfix.new_CoveredOrUncovered(*args))
        _swig_setattr(self, CoveredOrUncovered, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CoveredOrUncovered):
        try:
            if self.thisown: destroy(self)
        except: pass

class CoveredOrUncoveredPtr(CoveredOrUncovered):
    def __init__(self, this):
        _swig_setattr(self, CoveredOrUncovered, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CoveredOrUncovered, 'thisown', 0)
        _swig_setattr(self, CoveredOrUncovered,self.__class__,CoveredOrUncovered)
_quickfix.CoveredOrUncovered_swigregister(CoveredOrUncoveredPtr)

class OptAttribute(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OptAttribute, name)
    def __repr__(self):
        return "<C FIX::OptAttribute instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OptAttribute, 'this', _quickfix.new_OptAttribute(*args))
        _swig_setattr(self, OptAttribute, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OptAttribute):
        try:
            if self.thisown: destroy(self)
        except: pass

class OptAttributePtr(OptAttribute):
    def __init__(self, this):
        _swig_setattr(self, OptAttribute, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OptAttribute, 'thisown', 0)
        _swig_setattr(self, OptAttribute,self.__class__,OptAttribute)
_quickfix.OptAttribute_swigregister(OptAttributePtr)

class SecurityExchange(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityExchange, name)
    def __repr__(self):
        return "<C FIX::SecurityExchange instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityExchange, 'this', _quickfix.new_SecurityExchange(*args))
        _swig_setattr(self, SecurityExchange, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityExchange):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityExchangePtr(SecurityExchange):
    def __init__(self, this):
        _swig_setattr(self, SecurityExchange, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityExchange, 'thisown', 0)
        _swig_setattr(self, SecurityExchange,self.__class__,SecurityExchange)
_quickfix.SecurityExchange_swigregister(SecurityExchangePtr)

class NotifyBrokerOfCredit(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyBrokerOfCredit, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyBrokerOfCredit, name)
    def __repr__(self):
        return "<C FIX::NotifyBrokerOfCredit instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NotifyBrokerOfCredit, 'this', _quickfix.new_NotifyBrokerOfCredit(*args))
        _swig_setattr(self, NotifyBrokerOfCredit, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NotifyBrokerOfCredit):
        try:
            if self.thisown: destroy(self)
        except: pass

class NotifyBrokerOfCreditPtr(NotifyBrokerOfCredit):
    def __init__(self, this):
        _swig_setattr(self, NotifyBrokerOfCredit, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NotifyBrokerOfCredit, 'thisown', 0)
        _swig_setattr(self, NotifyBrokerOfCredit,self.__class__,NotifyBrokerOfCredit)
_quickfix.NotifyBrokerOfCredit_swigregister(NotifyBrokerOfCreditPtr)

class AllocHandlInst(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocHandlInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocHandlInst, name)
    def __repr__(self):
        return "<C FIX::AllocHandlInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocHandlInst, 'this', _quickfix.new_AllocHandlInst(*args))
        _swig_setattr(self, AllocHandlInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocHandlInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocHandlInstPtr(AllocHandlInst):
    def __init__(self, this):
        _swig_setattr(self, AllocHandlInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocHandlInst, 'thisown', 0)
        _swig_setattr(self, AllocHandlInst,self.__class__,AllocHandlInst)
_quickfix.AllocHandlInst_swigregister(AllocHandlInstPtr)

class MaxShow(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxShow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaxShow, name)
    def __repr__(self):
        return "<C FIX::MaxShow instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaxShow, 'this', _quickfix.new_MaxShow(*args))
        _swig_setattr(self, MaxShow, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaxShow):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaxShowPtr(MaxShow):
    def __init__(self, this):
        _swig_setattr(self, MaxShow, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaxShow, 'thisown', 0)
        _swig_setattr(self, MaxShow,self.__class__,MaxShow)
_quickfix.MaxShow_swigregister(MaxShowPtr)

class PegOffsetValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegOffsetValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegOffsetValue, name)
    def __repr__(self):
        return "<C FIX::PegOffsetValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegOffsetValue, 'this', _quickfix.new_PegOffsetValue(*args))
        _swig_setattr(self, PegOffsetValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegOffsetValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegOffsetValuePtr(PegOffsetValue):
    def __init__(self, this):
        _swig_setattr(self, PegOffsetValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegOffsetValue, 'thisown', 0)
        _swig_setattr(self, PegOffsetValue,self.__class__,PegOffsetValue)
_quickfix.PegOffsetValue_swigregister(PegOffsetValuePtr)

class XmlDataLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlDataLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, XmlDataLen, name)
    def __repr__(self):
        return "<C FIX::XmlDataLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, XmlDataLen, 'this', _quickfix.new_XmlDataLen(*args))
        _swig_setattr(self, XmlDataLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_XmlDataLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class XmlDataLenPtr(XmlDataLen):
    def __init__(self, this):
        _swig_setattr(self, XmlDataLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, XmlDataLen, 'thisown', 0)
        _swig_setattr(self, XmlDataLen,self.__class__,XmlDataLen)
_quickfix.XmlDataLen_swigregister(XmlDataLenPtr)

class XmlData(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlData, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, XmlData, name)
    def __repr__(self):
        return "<C FIX::XmlData instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, XmlData, 'this', _quickfix.new_XmlData(*args))
        _swig_setattr(self, XmlData, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_XmlData):
        try:
            if self.thisown: destroy(self)
        except: pass

class XmlDataPtr(XmlData):
    def __init__(self, this):
        _swig_setattr(self, XmlData, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, XmlData, 'thisown', 0)
        _swig_setattr(self, XmlData,self.__class__,XmlData)
_quickfix.XmlData_swigregister(XmlDataPtr)

class SettlInstRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstRefID, name)
    def __repr__(self):
        return "<C FIX::SettlInstRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstRefID, 'this', _quickfix.new_SettlInstRefID(*args))
        _swig_setattr(self, SettlInstRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstRefIDPtr(SettlInstRefID):
    def __init__(self, this):
        _swig_setattr(self, SettlInstRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstRefID, 'thisown', 0)
        _swig_setattr(self, SettlInstRefID,self.__class__,SettlInstRefID)
_quickfix.SettlInstRefID_swigregister(SettlInstRefIDPtr)

class NoRoutingIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRoutingIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoRoutingIDs, name)
    def __repr__(self):
        return "<C FIX::NoRoutingIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoRoutingIDs, 'this', _quickfix.new_NoRoutingIDs(*args))
        _swig_setattr(self, NoRoutingIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoRoutingIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoRoutingIDsPtr(NoRoutingIDs):
    def __init__(self, this):
        _swig_setattr(self, NoRoutingIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoRoutingIDs, 'thisown', 0)
        _swig_setattr(self, NoRoutingIDs,self.__class__,NoRoutingIDs)
_quickfix.NoRoutingIDs_swigregister(NoRoutingIDsPtr)

class RoutingType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingType, name)
    def __repr__(self):
        return "<C FIX::RoutingType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RoutingType, 'this', _quickfix.new_RoutingType(*args))
        _swig_setattr(self, RoutingType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RoutingType):
        try:
            if self.thisown: destroy(self)
        except: pass

class RoutingTypePtr(RoutingType):
    def __init__(self, this):
        _swig_setattr(self, RoutingType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RoutingType, 'thisown', 0)
        _swig_setattr(self, RoutingType,self.__class__,RoutingType)
_quickfix.RoutingType_swigregister(RoutingTypePtr)

class RoutingID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingID, name)
    def __repr__(self):
        return "<C FIX::RoutingID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RoutingID, 'this', _quickfix.new_RoutingID(*args))
        _swig_setattr(self, RoutingID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RoutingID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RoutingIDPtr(RoutingID):
    def __init__(self, this):
        _swig_setattr(self, RoutingID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RoutingID, 'thisown', 0)
        _swig_setattr(self, RoutingID,self.__class__,RoutingID)
_quickfix.RoutingID_swigregister(RoutingIDPtr)

class Spread(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spread, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Spread, name)
    def __repr__(self):
        return "<C FIX::Spread instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Spread, 'this', _quickfix.new_Spread(*args))
        _swig_setattr(self, Spread, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Spread):
        try:
            if self.thisown: destroy(self)
        except: pass

class SpreadPtr(Spread):
    def __init__(self, this):
        _swig_setattr(self, Spread, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Spread, 'thisown', 0)
        _swig_setattr(self, Spread,self.__class__,Spread)
_quickfix.Spread_swigregister(SpreadPtr)

class BenchmarkCurveCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkCurveCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkCurveCurrency, name)
    def __repr__(self):
        return "<C FIX::BenchmarkCurveCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkCurveCurrency, 'this', _quickfix.new_BenchmarkCurveCurrency(*args))
        _swig_setattr(self, BenchmarkCurveCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkCurveCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkCurveCurrencyPtr(BenchmarkCurveCurrency):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkCurveCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkCurveCurrency, 'thisown', 0)
        _swig_setattr(self, BenchmarkCurveCurrency,self.__class__,BenchmarkCurveCurrency)
_quickfix.BenchmarkCurveCurrency_swigregister(BenchmarkCurveCurrencyPtr)

class BenchmarkCurveName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkCurveName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkCurveName, name)
    def __repr__(self):
        return "<C FIX::BenchmarkCurveName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkCurveName, 'this', _quickfix.new_BenchmarkCurveName(*args))
        _swig_setattr(self, BenchmarkCurveName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkCurveName):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkCurveNamePtr(BenchmarkCurveName):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkCurveName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkCurveName, 'thisown', 0)
        _swig_setattr(self, BenchmarkCurveName,self.__class__,BenchmarkCurveName)
_quickfix.BenchmarkCurveName_swigregister(BenchmarkCurveNamePtr)

class BenchmarkCurvePoint(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkCurvePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkCurvePoint, name)
    def __repr__(self):
        return "<C FIX::BenchmarkCurvePoint instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkCurvePoint, 'this', _quickfix.new_BenchmarkCurvePoint(*args))
        _swig_setattr(self, BenchmarkCurvePoint, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkCurvePoint):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkCurvePointPtr(BenchmarkCurvePoint):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkCurvePoint, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkCurvePoint, 'thisown', 0)
        _swig_setattr(self, BenchmarkCurvePoint,self.__class__,BenchmarkCurvePoint)
_quickfix.BenchmarkCurvePoint_swigregister(BenchmarkCurvePointPtr)

class CouponRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CouponRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CouponRate, name)
    def __repr__(self):
        return "<C FIX::CouponRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CouponRate, 'this', _quickfix.new_CouponRate(*args))
        _swig_setattr(self, CouponRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CouponRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class CouponRatePtr(CouponRate):
    def __init__(self, this):
        _swig_setattr(self, CouponRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CouponRate, 'thisown', 0)
        _swig_setattr(self, CouponRate,self.__class__,CouponRate)
_quickfix.CouponRate_swigregister(CouponRatePtr)

class CouponPaymentDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CouponPaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CouponPaymentDate, name)
    def __repr__(self):
        return "<C FIX::CouponPaymentDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CouponPaymentDate, 'this', _quickfix.new_CouponPaymentDate(*args))
        _swig_setattr(self, CouponPaymentDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CouponPaymentDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class CouponPaymentDatePtr(CouponPaymentDate):
    def __init__(self, this):
        _swig_setattr(self, CouponPaymentDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CouponPaymentDate, 'thisown', 0)
        _swig_setattr(self, CouponPaymentDate,self.__class__,CouponPaymentDate)
_quickfix.CouponPaymentDate_swigregister(CouponPaymentDatePtr)

class IssueDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IssueDate, name)
    def __repr__(self):
        return "<C FIX::IssueDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IssueDate, 'this', _quickfix.new_IssueDate(*args))
        _swig_setattr(self, IssueDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IssueDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class IssueDatePtr(IssueDate):
    def __init__(self, this):
        _swig_setattr(self, IssueDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IssueDate, 'thisown', 0)
        _swig_setattr(self, IssueDate,self.__class__,IssueDate)
_quickfix.IssueDate_swigregister(IssueDatePtr)

class RepurchaseTerm(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepurchaseTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RepurchaseTerm, name)
    def __repr__(self):
        return "<C FIX::RepurchaseTerm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RepurchaseTerm, 'this', _quickfix.new_RepurchaseTerm(*args))
        _swig_setattr(self, RepurchaseTerm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RepurchaseTerm):
        try:
            if self.thisown: destroy(self)
        except: pass

class RepurchaseTermPtr(RepurchaseTerm):
    def __init__(self, this):
        _swig_setattr(self, RepurchaseTerm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RepurchaseTerm, 'thisown', 0)
        _swig_setattr(self, RepurchaseTerm,self.__class__,RepurchaseTerm)
_quickfix.RepurchaseTerm_swigregister(RepurchaseTermPtr)

class RepurchaseRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepurchaseRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RepurchaseRate, name)
    def __repr__(self):
        return "<C FIX::RepurchaseRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RepurchaseRate, 'this', _quickfix.new_RepurchaseRate(*args))
        _swig_setattr(self, RepurchaseRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RepurchaseRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class RepurchaseRatePtr(RepurchaseRate):
    def __init__(self, this):
        _swig_setattr(self, RepurchaseRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RepurchaseRate, 'thisown', 0)
        _swig_setattr(self, RepurchaseRate,self.__class__,RepurchaseRate)
_quickfix.RepurchaseRate_swigregister(RepurchaseRatePtr)

class Factor(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Factor, name)
    def __repr__(self):
        return "<C FIX::Factor instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Factor, 'this', _quickfix.new_Factor(*args))
        _swig_setattr(self, Factor, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Factor):
        try:
            if self.thisown: destroy(self)
        except: pass

class FactorPtr(Factor):
    def __init__(self, this):
        _swig_setattr(self, Factor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Factor, 'thisown', 0)
        _swig_setattr(self, Factor,self.__class__,Factor)
_quickfix.Factor_swigregister(FactorPtr)

class TradeOriginationDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeOriginationDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeOriginationDate, name)
    def __repr__(self):
        return "<C FIX::TradeOriginationDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeOriginationDate, 'this', _quickfix.new_TradeOriginationDate(*args))
        _swig_setattr(self, TradeOriginationDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeOriginationDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeOriginationDatePtr(TradeOriginationDate):
    def __init__(self, this):
        _swig_setattr(self, TradeOriginationDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeOriginationDate, 'thisown', 0)
        _swig_setattr(self, TradeOriginationDate,self.__class__,TradeOriginationDate)
_quickfix.TradeOriginationDate_swigregister(TradeOriginationDatePtr)

class ExDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExDate, name)
    def __repr__(self):
        return "<C FIX::ExDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExDate, 'this', _quickfix.new_ExDate(*args))
        _swig_setattr(self, ExDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExDatePtr(ExDate):
    def __init__(self, this):
        _swig_setattr(self, ExDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExDate, 'thisown', 0)
        _swig_setattr(self, ExDate,self.__class__,ExDate)
_quickfix.ExDate_swigregister(ExDatePtr)

class ContractMultiplier(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContractMultiplier, name)
    def __repr__(self):
        return "<C FIX::ContractMultiplier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContractMultiplier, 'this', _quickfix.new_ContractMultiplier(*args))
        _swig_setattr(self, ContractMultiplier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContractMultiplier):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContractMultiplierPtr(ContractMultiplier):
    def __init__(self, this):
        _swig_setattr(self, ContractMultiplier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContractMultiplier, 'thisown', 0)
        _swig_setattr(self, ContractMultiplier,self.__class__,ContractMultiplier)
_quickfix.ContractMultiplier_swigregister(ContractMultiplierPtr)

class NoStipulations(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStipulations, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoStipulations, name)
    def __repr__(self):
        return "<C FIX::NoStipulations instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoStipulations, 'this', _quickfix.new_NoStipulations(*args))
        _swig_setattr(self, NoStipulations, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoStipulations):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoStipulationsPtr(NoStipulations):
    def __init__(self, this):
        _swig_setattr(self, NoStipulations, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoStipulations, 'thisown', 0)
        _swig_setattr(self, NoStipulations,self.__class__,NoStipulations)
_quickfix.NoStipulations_swigregister(NoStipulationsPtr)

class StipulationType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StipulationType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StipulationType, name)
    def __repr__(self):
        return "<C FIX::StipulationType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StipulationType, 'this', _quickfix.new_StipulationType(*args))
        _swig_setattr(self, StipulationType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StipulationType):
        try:
            if self.thisown: destroy(self)
        except: pass

class StipulationTypePtr(StipulationType):
    def __init__(self, this):
        _swig_setattr(self, StipulationType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StipulationType, 'thisown', 0)
        _swig_setattr(self, StipulationType,self.__class__,StipulationType)
_quickfix.StipulationType_swigregister(StipulationTypePtr)

class StipulationValue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StipulationValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StipulationValue, name)
    def __repr__(self):
        return "<C FIX::StipulationValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StipulationValue, 'this', _quickfix.new_StipulationValue(*args))
        _swig_setattr(self, StipulationValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StipulationValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class StipulationValuePtr(StipulationValue):
    def __init__(self, this):
        _swig_setattr(self, StipulationValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StipulationValue, 'thisown', 0)
        _swig_setattr(self, StipulationValue,self.__class__,StipulationValue)
_quickfix.StipulationValue_swigregister(StipulationValuePtr)

class YieldType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, YieldType, name)
    def __repr__(self):
        return "<C FIX::YieldType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, YieldType, 'this', _quickfix.new_YieldType(*args))
        _swig_setattr(self, YieldType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_YieldType):
        try:
            if self.thisown: destroy(self)
        except: pass

class YieldTypePtr(YieldType):
    def __init__(self, this):
        _swig_setattr(self, YieldType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, YieldType, 'thisown', 0)
        _swig_setattr(self, YieldType,self.__class__,YieldType)
_quickfix.YieldType_swigregister(YieldTypePtr)

class Yield(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Yield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Yield, name)
    def __repr__(self):
        return "<C FIX::Yield instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Yield, 'this', _quickfix.new_Yield(*args))
        _swig_setattr(self, Yield, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Yield):
        try:
            if self.thisown: destroy(self)
        except: pass

class YieldPtr(Yield):
    def __init__(self, this):
        _swig_setattr(self, Yield, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Yield, 'thisown', 0)
        _swig_setattr(self, Yield,self.__class__,Yield)
_quickfix.Yield_swigregister(YieldPtr)

class TotalTakedown(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalTakedown, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalTakedown, name)
    def __repr__(self):
        return "<C FIX::TotalTakedown instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalTakedown, 'this', _quickfix.new_TotalTakedown(*args))
        _swig_setattr(self, TotalTakedown, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalTakedown):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalTakedownPtr(TotalTakedown):
    def __init__(self, this):
        _swig_setattr(self, TotalTakedown, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalTakedown, 'thisown', 0)
        _swig_setattr(self, TotalTakedown,self.__class__,TotalTakedown)
_quickfix.TotalTakedown_swigregister(TotalTakedownPtr)

class Concession(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Concession, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Concession, name)
    def __repr__(self):
        return "<C FIX::Concession instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Concession, 'this', _quickfix.new_Concession(*args))
        _swig_setattr(self, Concession, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Concession):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConcessionPtr(Concession):
    def __init__(self, this):
        _swig_setattr(self, Concession, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Concession, 'thisown', 0)
        _swig_setattr(self, Concession,self.__class__,Concession)
_quickfix.Concession_swigregister(ConcessionPtr)

class RepoCollateralSecurityType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepoCollateralSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RepoCollateralSecurityType, name)
    def __repr__(self):
        return "<C FIX::RepoCollateralSecurityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RepoCollateralSecurityType, 'this', _quickfix.new_RepoCollateralSecurityType(*args))
        _swig_setattr(self, RepoCollateralSecurityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RepoCollateralSecurityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class RepoCollateralSecurityTypePtr(RepoCollateralSecurityType):
    def __init__(self, this):
        _swig_setattr(self, RepoCollateralSecurityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RepoCollateralSecurityType, 'thisown', 0)
        _swig_setattr(self, RepoCollateralSecurityType,self.__class__,RepoCollateralSecurityType)
_quickfix.RepoCollateralSecurityType_swigregister(RepoCollateralSecurityTypePtr)

class RedemptionDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RedemptionDate, name)
    def __repr__(self):
        return "<C FIX::RedemptionDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RedemptionDate, 'this', _quickfix.new_RedemptionDate(*args))
        _swig_setattr(self, RedemptionDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RedemptionDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class RedemptionDatePtr(RedemptionDate):
    def __init__(self, this):
        _swig_setattr(self, RedemptionDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RedemptionDate, 'thisown', 0)
        _swig_setattr(self, RedemptionDate,self.__class__,RedemptionDate)
_quickfix.RedemptionDate_swigregister(RedemptionDatePtr)

class UnderlyingCouponPaymentDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCouponPaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCouponPaymentDate, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCouponPaymentDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCouponPaymentDate, 'this', _quickfix.new_UnderlyingCouponPaymentDate(*args))
        _swig_setattr(self, UnderlyingCouponPaymentDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCouponPaymentDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCouponPaymentDatePtr(UnderlyingCouponPaymentDate):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCouponPaymentDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCouponPaymentDate, 'thisown', 0)
        _swig_setattr(self, UnderlyingCouponPaymentDate,self.__class__,UnderlyingCouponPaymentDate)
_quickfix.UnderlyingCouponPaymentDate_swigregister(UnderlyingCouponPaymentDatePtr)

class UnderlyingIssueDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIssueDate, name)
    def __repr__(self):
        return "<C FIX::UnderlyingIssueDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingIssueDate, 'this', _quickfix.new_UnderlyingIssueDate(*args))
        _swig_setattr(self, UnderlyingIssueDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingIssueDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingIssueDatePtr(UnderlyingIssueDate):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingIssueDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingIssueDate, 'thisown', 0)
        _swig_setattr(self, UnderlyingIssueDate,self.__class__,UnderlyingIssueDate)
_quickfix.UnderlyingIssueDate_swigregister(UnderlyingIssueDatePtr)

class UnderlyingRepoCollateralSecurityType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRepoCollateralSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRepoCollateralSecurityType, name)
    def __repr__(self):
        return "<C FIX::UnderlyingRepoCollateralSecurityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingRepoCollateralSecurityType, 'this', _quickfix.new_UnderlyingRepoCollateralSecurityType(*args))
        _swig_setattr(self, UnderlyingRepoCollateralSecurityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingRepoCollateralSecurityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingRepoCollateralSecurityTypePtr(UnderlyingRepoCollateralSecurityType):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingRepoCollateralSecurityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingRepoCollateralSecurityType, 'thisown', 0)
        _swig_setattr(self, UnderlyingRepoCollateralSecurityType,self.__class__,UnderlyingRepoCollateralSecurityType)
_quickfix.UnderlyingRepoCollateralSecurityType_swigregister(UnderlyingRepoCollateralSecurityTypePtr)

class UnderlyingRepurchaseTerm(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRepurchaseTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRepurchaseTerm, name)
    def __repr__(self):
        return "<C FIX::UnderlyingRepurchaseTerm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingRepurchaseTerm, 'this', _quickfix.new_UnderlyingRepurchaseTerm(*args))
        _swig_setattr(self, UnderlyingRepurchaseTerm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingRepurchaseTerm):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingRepurchaseTermPtr(UnderlyingRepurchaseTerm):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingRepurchaseTerm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingRepurchaseTerm, 'thisown', 0)
        _swig_setattr(self, UnderlyingRepurchaseTerm,self.__class__,UnderlyingRepurchaseTerm)
_quickfix.UnderlyingRepurchaseTerm_swigregister(UnderlyingRepurchaseTermPtr)

class UnderlyingRepurchaseRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRepurchaseRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRepurchaseRate, name)
    def __repr__(self):
        return "<C FIX::UnderlyingRepurchaseRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingRepurchaseRate, 'this', _quickfix.new_UnderlyingRepurchaseRate(*args))
        _swig_setattr(self, UnderlyingRepurchaseRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingRepurchaseRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingRepurchaseRatePtr(UnderlyingRepurchaseRate):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingRepurchaseRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingRepurchaseRate, 'thisown', 0)
        _swig_setattr(self, UnderlyingRepurchaseRate,self.__class__,UnderlyingRepurchaseRate)
_quickfix.UnderlyingRepurchaseRate_swigregister(UnderlyingRepurchaseRatePtr)

class UnderlyingFactor(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingFactor, name)
    def __repr__(self):
        return "<C FIX::UnderlyingFactor instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingFactor, 'this', _quickfix.new_UnderlyingFactor(*args))
        _swig_setattr(self, UnderlyingFactor, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingFactor):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingFactorPtr(UnderlyingFactor):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingFactor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingFactor, 'thisown', 0)
        _swig_setattr(self, UnderlyingFactor,self.__class__,UnderlyingFactor)
_quickfix.UnderlyingFactor_swigregister(UnderlyingFactorPtr)

class UnderlyingRedemptionDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRedemptionDate, name)
    def __repr__(self):
        return "<C FIX::UnderlyingRedemptionDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingRedemptionDate, 'this', _quickfix.new_UnderlyingRedemptionDate(*args))
        _swig_setattr(self, UnderlyingRedemptionDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingRedemptionDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingRedemptionDatePtr(UnderlyingRedemptionDate):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingRedemptionDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingRedemptionDate, 'thisown', 0)
        _swig_setattr(self, UnderlyingRedemptionDate,self.__class__,UnderlyingRedemptionDate)
_quickfix.UnderlyingRedemptionDate_swigregister(UnderlyingRedemptionDatePtr)

class LegCouponPaymentDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCouponPaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCouponPaymentDate, name)
    def __repr__(self):
        return "<C FIX::LegCouponPaymentDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCouponPaymentDate, 'this', _quickfix.new_LegCouponPaymentDate(*args))
        _swig_setattr(self, LegCouponPaymentDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCouponPaymentDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCouponPaymentDatePtr(LegCouponPaymentDate):
    def __init__(self, this):
        _swig_setattr(self, LegCouponPaymentDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCouponPaymentDate, 'thisown', 0)
        _swig_setattr(self, LegCouponPaymentDate,self.__class__,LegCouponPaymentDate)
_quickfix.LegCouponPaymentDate_swigregister(LegCouponPaymentDatePtr)

class LegIssueDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegIssueDate, name)
    def __repr__(self):
        return "<C FIX::LegIssueDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegIssueDate, 'this', _quickfix.new_LegIssueDate(*args))
        _swig_setattr(self, LegIssueDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegIssueDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegIssueDatePtr(LegIssueDate):
    def __init__(self, this):
        _swig_setattr(self, LegIssueDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegIssueDate, 'thisown', 0)
        _swig_setattr(self, LegIssueDate,self.__class__,LegIssueDate)
_quickfix.LegIssueDate_swigregister(LegIssueDatePtr)

class LegRepoCollateralSecurityType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRepoCollateralSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegRepoCollateralSecurityType, name)
    def __repr__(self):
        return "<C FIX::LegRepoCollateralSecurityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegRepoCollateralSecurityType, 'this', _quickfix.new_LegRepoCollateralSecurityType(*args))
        _swig_setattr(self, LegRepoCollateralSecurityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegRepoCollateralSecurityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegRepoCollateralSecurityTypePtr(LegRepoCollateralSecurityType):
    def __init__(self, this):
        _swig_setattr(self, LegRepoCollateralSecurityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegRepoCollateralSecurityType, 'thisown', 0)
        _swig_setattr(self, LegRepoCollateralSecurityType,self.__class__,LegRepoCollateralSecurityType)
_quickfix.LegRepoCollateralSecurityType_swigregister(LegRepoCollateralSecurityTypePtr)

class LegRepurchaseTerm(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRepurchaseTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegRepurchaseTerm, name)
    def __repr__(self):
        return "<C FIX::LegRepurchaseTerm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegRepurchaseTerm, 'this', _quickfix.new_LegRepurchaseTerm(*args))
        _swig_setattr(self, LegRepurchaseTerm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegRepurchaseTerm):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegRepurchaseTermPtr(LegRepurchaseTerm):
    def __init__(self, this):
        _swig_setattr(self, LegRepurchaseTerm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegRepurchaseTerm, 'thisown', 0)
        _swig_setattr(self, LegRepurchaseTerm,self.__class__,LegRepurchaseTerm)
_quickfix.LegRepurchaseTerm_swigregister(LegRepurchaseTermPtr)

class LegRepurchaseRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRepurchaseRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegRepurchaseRate, name)
    def __repr__(self):
        return "<C FIX::LegRepurchaseRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegRepurchaseRate, 'this', _quickfix.new_LegRepurchaseRate(*args))
        _swig_setattr(self, LegRepurchaseRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegRepurchaseRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegRepurchaseRatePtr(LegRepurchaseRate):
    def __init__(self, this):
        _swig_setattr(self, LegRepurchaseRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegRepurchaseRate, 'thisown', 0)
        _swig_setattr(self, LegRepurchaseRate,self.__class__,LegRepurchaseRate)
_quickfix.LegRepurchaseRate_swigregister(LegRepurchaseRatePtr)

class LegFactor(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegFactor, name)
    def __repr__(self):
        return "<C FIX::LegFactor instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegFactor, 'this', _quickfix.new_LegFactor(*args))
        _swig_setattr(self, LegFactor, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegFactor):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegFactorPtr(LegFactor):
    def __init__(self, this):
        _swig_setattr(self, LegFactor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegFactor, 'thisown', 0)
        _swig_setattr(self, LegFactor,self.__class__,LegFactor)
_quickfix.LegFactor_swigregister(LegFactorPtr)

class LegRedemptionDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegRedemptionDate, name)
    def __repr__(self):
        return "<C FIX::LegRedemptionDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegRedemptionDate, 'this', _quickfix.new_LegRedemptionDate(*args))
        _swig_setattr(self, LegRedemptionDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegRedemptionDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegRedemptionDatePtr(LegRedemptionDate):
    def __init__(self, this):
        _swig_setattr(self, LegRedemptionDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegRedemptionDate, 'thisown', 0)
        _swig_setattr(self, LegRedemptionDate,self.__class__,LegRedemptionDate)
_quickfix.LegRedemptionDate_swigregister(LegRedemptionDatePtr)

class CreditRating(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreditRating, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CreditRating, name)
    def __repr__(self):
        return "<C FIX::CreditRating instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CreditRating, 'this', _quickfix.new_CreditRating(*args))
        _swig_setattr(self, CreditRating, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CreditRating):
        try:
            if self.thisown: destroy(self)
        except: pass

class CreditRatingPtr(CreditRating):
    def __init__(self, this):
        _swig_setattr(self, CreditRating, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CreditRating, 'thisown', 0)
        _swig_setattr(self, CreditRating,self.__class__,CreditRating)
_quickfix.CreditRating_swigregister(CreditRatingPtr)

class UnderlyingCreditRating(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCreditRating, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCreditRating, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCreditRating instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCreditRating, 'this', _quickfix.new_UnderlyingCreditRating(*args))
        _swig_setattr(self, UnderlyingCreditRating, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCreditRating):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCreditRatingPtr(UnderlyingCreditRating):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCreditRating, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCreditRating, 'thisown', 0)
        _swig_setattr(self, UnderlyingCreditRating,self.__class__,UnderlyingCreditRating)
_quickfix.UnderlyingCreditRating_swigregister(UnderlyingCreditRatingPtr)

class LegCreditRating(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCreditRating, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCreditRating, name)
    def __repr__(self):
        return "<C FIX::LegCreditRating instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCreditRating, 'this', _quickfix.new_LegCreditRating(*args))
        _swig_setattr(self, LegCreditRating, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCreditRating):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCreditRatingPtr(LegCreditRating):
    def __init__(self, this):
        _swig_setattr(self, LegCreditRating, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCreditRating, 'thisown', 0)
        _swig_setattr(self, LegCreditRating,self.__class__,LegCreditRating)
_quickfix.LegCreditRating_swigregister(LegCreditRatingPtr)

class TradedFlatSwitch(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradedFlatSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradedFlatSwitch, name)
    def __repr__(self):
        return "<C FIX::TradedFlatSwitch instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradedFlatSwitch, 'this', _quickfix.new_TradedFlatSwitch(*args))
        _swig_setattr(self, TradedFlatSwitch, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradedFlatSwitch):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradedFlatSwitchPtr(TradedFlatSwitch):
    def __init__(self, this):
        _swig_setattr(self, TradedFlatSwitch, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradedFlatSwitch, 'thisown', 0)
        _swig_setattr(self, TradedFlatSwitch,self.__class__,TradedFlatSwitch)
_quickfix.TradedFlatSwitch_swigregister(TradedFlatSwitchPtr)

class BasisFeatureDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisFeatureDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BasisFeatureDate, name)
    def __repr__(self):
        return "<C FIX::BasisFeatureDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BasisFeatureDate, 'this', _quickfix.new_BasisFeatureDate(*args))
        _swig_setattr(self, BasisFeatureDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BasisFeatureDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class BasisFeatureDatePtr(BasisFeatureDate):
    def __init__(self, this):
        _swig_setattr(self, BasisFeatureDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BasisFeatureDate, 'thisown', 0)
        _swig_setattr(self, BasisFeatureDate,self.__class__,BasisFeatureDate)
_quickfix.BasisFeatureDate_swigregister(BasisFeatureDatePtr)

class BasisFeaturePrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisFeaturePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BasisFeaturePrice, name)
    def __repr__(self):
        return "<C FIX::BasisFeaturePrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BasisFeaturePrice, 'this', _quickfix.new_BasisFeaturePrice(*args))
        _swig_setattr(self, BasisFeaturePrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BasisFeaturePrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class BasisFeaturePricePtr(BasisFeaturePrice):
    def __init__(self, this):
        _swig_setattr(self, BasisFeaturePrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BasisFeaturePrice, 'thisown', 0)
        _swig_setattr(self, BasisFeaturePrice,self.__class__,BasisFeaturePrice)
_quickfix.BasisFeaturePrice_swigregister(BasisFeaturePricePtr)

class MDReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDReqID, name)
    def __repr__(self):
        return "<C FIX::MDReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDReqID, 'this', _quickfix.new_MDReqID(*args))
        _swig_setattr(self, MDReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDReqIDPtr(MDReqID):
    def __init__(self, this):
        _swig_setattr(self, MDReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDReqID, 'thisown', 0)
        _swig_setattr(self, MDReqID,self.__class__,MDReqID)
_quickfix.MDReqID_swigregister(MDReqIDPtr)

class SubscriptionRequestType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionRequestType, name)
    def __repr__(self):
        return "<C FIX::SubscriptionRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SubscriptionRequestType, 'this', _quickfix.new_SubscriptionRequestType(*args))
        _swig_setattr(self, SubscriptionRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SubscriptionRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SubscriptionRequestTypePtr(SubscriptionRequestType):
    def __init__(self, this):
        _swig_setattr(self, SubscriptionRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SubscriptionRequestType, 'thisown', 0)
        _swig_setattr(self, SubscriptionRequestType,self.__class__,SubscriptionRequestType)
_quickfix.SubscriptionRequestType_swigregister(SubscriptionRequestTypePtr)

class MarketDepth(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketDepth, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MarketDepth, name)
    def __repr__(self):
        return "<C FIX::MarketDepth instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MarketDepth, 'this', _quickfix.new_MarketDepth(*args))
        _swig_setattr(self, MarketDepth, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MarketDepth):
        try:
            if self.thisown: destroy(self)
        except: pass

class MarketDepthPtr(MarketDepth):
    def __init__(self, this):
        _swig_setattr(self, MarketDepth, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MarketDepth, 'thisown', 0)
        _swig_setattr(self, MarketDepth,self.__class__,MarketDepth)
_quickfix.MarketDepth_swigregister(MarketDepthPtr)

class MDUpdateType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDUpdateType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDUpdateType, name)
    def __repr__(self):
        return "<C FIX::MDUpdateType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDUpdateType, 'this', _quickfix.new_MDUpdateType(*args))
        _swig_setattr(self, MDUpdateType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDUpdateType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDUpdateTypePtr(MDUpdateType):
    def __init__(self, this):
        _swig_setattr(self, MDUpdateType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDUpdateType, 'thisown', 0)
        _swig_setattr(self, MDUpdateType,self.__class__,MDUpdateType)
_quickfix.MDUpdateType_swigregister(MDUpdateTypePtr)

class AggregatedBook(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregatedBook, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AggregatedBook, name)
    def __repr__(self):
        return "<C FIX::AggregatedBook instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AggregatedBook, 'this', _quickfix.new_AggregatedBook(*args))
        _swig_setattr(self, AggregatedBook, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AggregatedBook):
        try:
            if self.thisown: destroy(self)
        except: pass

class AggregatedBookPtr(AggregatedBook):
    def __init__(self, this):
        _swig_setattr(self, AggregatedBook, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AggregatedBook, 'thisown', 0)
        _swig_setattr(self, AggregatedBook,self.__class__,AggregatedBook)
_quickfix.AggregatedBook_swigregister(AggregatedBookPtr)

class NoMDEntryTypes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMDEntryTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoMDEntryTypes, name)
    def __repr__(self):
        return "<C FIX::NoMDEntryTypes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoMDEntryTypes, 'this', _quickfix.new_NoMDEntryTypes(*args))
        _swig_setattr(self, NoMDEntryTypes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoMDEntryTypes):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoMDEntryTypesPtr(NoMDEntryTypes):
    def __init__(self, this):
        _swig_setattr(self, NoMDEntryTypes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoMDEntryTypes, 'thisown', 0)
        _swig_setattr(self, NoMDEntryTypes,self.__class__,NoMDEntryTypes)
_quickfix.NoMDEntryTypes_swigregister(NoMDEntryTypesPtr)

class NoMDEntries(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMDEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoMDEntries, name)
    def __repr__(self):
        return "<C FIX::NoMDEntries instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoMDEntries, 'this', _quickfix.new_NoMDEntries(*args))
        _swig_setattr(self, NoMDEntries, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoMDEntries):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoMDEntriesPtr(NoMDEntries):
    def __init__(self, this):
        _swig_setattr(self, NoMDEntries, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoMDEntries, 'thisown', 0)
        _swig_setattr(self, NoMDEntries,self.__class__,NoMDEntries)
_quickfix.NoMDEntries_swigregister(NoMDEntriesPtr)

class MDEntryType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryType, name)
    def __repr__(self):
        return "<C FIX::MDEntryType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryType, 'this', _quickfix.new_MDEntryType(*args))
        _swig_setattr(self, MDEntryType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryTypePtr(MDEntryType):
    def __init__(self, this):
        _swig_setattr(self, MDEntryType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryType, 'thisown', 0)
        _swig_setattr(self, MDEntryType,self.__class__,MDEntryType)
_quickfix.MDEntryType_swigregister(MDEntryTypePtr)

class MDEntryPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryPx, name)
    def __repr__(self):
        return "<C FIX::MDEntryPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryPx, 'this', _quickfix.new_MDEntryPx(*args))
        _swig_setattr(self, MDEntryPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryPxPtr(MDEntryPx):
    def __init__(self, this):
        _swig_setattr(self, MDEntryPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryPx, 'thisown', 0)
        _swig_setattr(self, MDEntryPx,self.__class__,MDEntryPx)
_quickfix.MDEntryPx_swigregister(MDEntryPxPtr)

class MDEntrySize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntrySize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntrySize, name)
    def __repr__(self):
        return "<C FIX::MDEntrySize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntrySize, 'this', _quickfix.new_MDEntrySize(*args))
        _swig_setattr(self, MDEntrySize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntrySize):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntrySizePtr(MDEntrySize):
    def __init__(self, this):
        _swig_setattr(self, MDEntrySize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntrySize, 'thisown', 0)
        _swig_setattr(self, MDEntrySize,self.__class__,MDEntrySize)
_quickfix.MDEntrySize_swigregister(MDEntrySizePtr)

class MDEntryDate(UtcDateField):
    __swig_setmethods__ = {}
    for _s in [UtcDateField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryDate, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcDateField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryDate, name)
    def __repr__(self):
        return "<C FIX::MDEntryDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryDate, 'this', _quickfix.new_MDEntryDate(*args))
        _swig_setattr(self, MDEntryDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryDatePtr(MDEntryDate):
    def __init__(self, this):
        _swig_setattr(self, MDEntryDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryDate, 'thisown', 0)
        _swig_setattr(self, MDEntryDate,self.__class__,MDEntryDate)
_quickfix.MDEntryDate_swigregister(MDEntryDatePtr)

class MDEntryTime(UtcTimeOnlyField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeOnlyField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeOnlyField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryTime, name)
    def __repr__(self):
        return "<C FIX::MDEntryTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryTime, 'this', _quickfix.new_MDEntryTime(*args))
        _swig_setattr(self, MDEntryTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryTimePtr(MDEntryTime):
    def __init__(self, this):
        _swig_setattr(self, MDEntryTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryTime, 'thisown', 0)
        _swig_setattr(self, MDEntryTime,self.__class__,MDEntryTime)
_quickfix.MDEntryTime_swigregister(MDEntryTimePtr)

class TickDirection(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TickDirection, name)
    def __repr__(self):
        return "<C FIX::TickDirection instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TickDirection, 'this', _quickfix.new_TickDirection(*args))
        _swig_setattr(self, TickDirection, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TickDirection):
        try:
            if self.thisown: destroy(self)
        except: pass

class TickDirectionPtr(TickDirection):
    def __init__(self, this):
        _swig_setattr(self, TickDirection, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TickDirection, 'thisown', 0)
        _swig_setattr(self, TickDirection,self.__class__,TickDirection)
_quickfix.TickDirection_swigregister(TickDirectionPtr)

class MDMkt(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDMkt, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDMkt, name)
    def __repr__(self):
        return "<C FIX::MDMkt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDMkt, 'this', _quickfix.new_MDMkt(*args))
        _swig_setattr(self, MDMkt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDMkt):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDMktPtr(MDMkt):
    def __init__(self, this):
        _swig_setattr(self, MDMkt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDMkt, 'thisown', 0)
        _swig_setattr(self, MDMkt,self.__class__,MDMkt)
_quickfix.MDMkt_swigregister(MDMktPtr)

class QuoteCondition(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteCondition, name)
    def __repr__(self):
        return "<C FIX::QuoteCondition instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteCondition, 'this', _quickfix.new_QuoteCondition(*args))
        _swig_setattr(self, QuoteCondition, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteCondition):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteConditionPtr(QuoteCondition):
    def __init__(self, this):
        _swig_setattr(self, QuoteCondition, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteCondition, 'thisown', 0)
        _swig_setattr(self, QuoteCondition,self.__class__,QuoteCondition)
_quickfix.QuoteCondition_swigregister(QuoteConditionPtr)

class TradeCondition(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeCondition, name)
    def __repr__(self):
        return "<C FIX::TradeCondition instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeCondition, 'this', _quickfix.new_TradeCondition(*args))
        _swig_setattr(self, TradeCondition, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeCondition):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeConditionPtr(TradeCondition):
    def __init__(self, this):
        _swig_setattr(self, TradeCondition, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeCondition, 'thisown', 0)
        _swig_setattr(self, TradeCondition,self.__class__,TradeCondition)
_quickfix.TradeCondition_swigregister(TradeConditionPtr)

class MDEntryID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryID, name)
    def __repr__(self):
        return "<C FIX::MDEntryID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryID, 'this', _quickfix.new_MDEntryID(*args))
        _swig_setattr(self, MDEntryID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryID):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryIDPtr(MDEntryID):
    def __init__(self, this):
        _swig_setattr(self, MDEntryID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryID, 'thisown', 0)
        _swig_setattr(self, MDEntryID,self.__class__,MDEntryID)
_quickfix.MDEntryID_swigregister(MDEntryIDPtr)

class MDUpdateAction(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDUpdateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDUpdateAction, name)
    def __repr__(self):
        return "<C FIX::MDUpdateAction instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDUpdateAction, 'this', _quickfix.new_MDUpdateAction(*args))
        _swig_setattr(self, MDUpdateAction, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDUpdateAction):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDUpdateActionPtr(MDUpdateAction):
    def __init__(self, this):
        _swig_setattr(self, MDUpdateAction, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDUpdateAction, 'thisown', 0)
        _swig_setattr(self, MDUpdateAction,self.__class__,MDUpdateAction)
_quickfix.MDUpdateAction_swigregister(MDUpdateActionPtr)

class MDEntryRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryRefID, name)
    def __repr__(self):
        return "<C FIX::MDEntryRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryRefID, 'this', _quickfix.new_MDEntryRefID(*args))
        _swig_setattr(self, MDEntryRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryRefIDPtr(MDEntryRefID):
    def __init__(self, this):
        _swig_setattr(self, MDEntryRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryRefID, 'thisown', 0)
        _swig_setattr(self, MDEntryRefID,self.__class__,MDEntryRefID)
_quickfix.MDEntryRefID_swigregister(MDEntryRefIDPtr)

class MDReqRejReason(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDReqRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDReqRejReason, name)
    def __repr__(self):
        return "<C FIX::MDReqRejReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDReqRejReason, 'this', _quickfix.new_MDReqRejReason(*args))
        _swig_setattr(self, MDReqRejReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDReqRejReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDReqRejReasonPtr(MDReqRejReason):
    def __init__(self, this):
        _swig_setattr(self, MDReqRejReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDReqRejReason, 'thisown', 0)
        _swig_setattr(self, MDReqRejReason,self.__class__,MDReqRejReason)
_quickfix.MDReqRejReason_swigregister(MDReqRejReasonPtr)

class MDEntryOriginator(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryOriginator, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryOriginator, name)
    def __repr__(self):
        return "<C FIX::MDEntryOriginator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryOriginator, 'this', _quickfix.new_MDEntryOriginator(*args))
        _swig_setattr(self, MDEntryOriginator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryOriginator):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryOriginatorPtr(MDEntryOriginator):
    def __init__(self, this):
        _swig_setattr(self, MDEntryOriginator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryOriginator, 'thisown', 0)
        _swig_setattr(self, MDEntryOriginator,self.__class__,MDEntryOriginator)
_quickfix.MDEntryOriginator_swigregister(MDEntryOriginatorPtr)

class LocationID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LocationID, name)
    def __repr__(self):
        return "<C FIX::LocationID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LocationID, 'this', _quickfix.new_LocationID(*args))
        _swig_setattr(self, LocationID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LocationID):
        try:
            if self.thisown: destroy(self)
        except: pass

class LocationIDPtr(LocationID):
    def __init__(self, this):
        _swig_setattr(self, LocationID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LocationID, 'thisown', 0)
        _swig_setattr(self, LocationID,self.__class__,LocationID)
_quickfix.LocationID_swigregister(LocationIDPtr)

class DeskID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeskID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeskID, name)
    def __repr__(self):
        return "<C FIX::DeskID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeskID, 'this', _quickfix.new_DeskID(*args))
        _swig_setattr(self, DeskID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeskID):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeskIDPtr(DeskID):
    def __init__(self, this):
        _swig_setattr(self, DeskID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeskID, 'thisown', 0)
        _swig_setattr(self, DeskID,self.__class__,DeskID)
_quickfix.DeskID_swigregister(DeskIDPtr)

class DeleteReason(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeleteReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeleteReason, name)
    def __repr__(self):
        return "<C FIX::DeleteReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeleteReason, 'this', _quickfix.new_DeleteReason(*args))
        _swig_setattr(self, DeleteReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeleteReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeleteReasonPtr(DeleteReason):
    def __init__(self, this):
        _swig_setattr(self, DeleteReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeleteReason, 'thisown', 0)
        _swig_setattr(self, DeleteReason,self.__class__,DeleteReason)
_quickfix.DeleteReason_swigregister(DeleteReasonPtr)

class OpenCloseSettlFlag(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCloseSettlFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCloseSettlFlag, name)
    def __repr__(self):
        return "<C FIX::OpenCloseSettlFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OpenCloseSettlFlag, 'this', _quickfix.new_OpenCloseSettlFlag(*args))
        _swig_setattr(self, OpenCloseSettlFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OpenCloseSettlFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class OpenCloseSettlFlagPtr(OpenCloseSettlFlag):
    def __init__(self, this):
        _swig_setattr(self, OpenCloseSettlFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OpenCloseSettlFlag, 'thisown', 0)
        _swig_setattr(self, OpenCloseSettlFlag,self.__class__,OpenCloseSettlFlag)
_quickfix.OpenCloseSettlFlag_swigregister(OpenCloseSettlFlagPtr)

class SellerDays(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SellerDays, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SellerDays, name)
    def __repr__(self):
        return "<C FIX::SellerDays instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SellerDays, 'this', _quickfix.new_SellerDays(*args))
        _swig_setattr(self, SellerDays, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SellerDays):
        try:
            if self.thisown: destroy(self)
        except: pass

class SellerDaysPtr(SellerDays):
    def __init__(self, this):
        _swig_setattr(self, SellerDays, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SellerDays, 'thisown', 0)
        _swig_setattr(self, SellerDays,self.__class__,SellerDays)
_quickfix.SellerDays_swigregister(SellerDaysPtr)

class MDEntryBuyer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryBuyer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryBuyer, name)
    def __repr__(self):
        return "<C FIX::MDEntryBuyer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryBuyer, 'this', _quickfix.new_MDEntryBuyer(*args))
        _swig_setattr(self, MDEntryBuyer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryBuyer):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryBuyerPtr(MDEntryBuyer):
    def __init__(self, this):
        _swig_setattr(self, MDEntryBuyer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryBuyer, 'thisown', 0)
        _swig_setattr(self, MDEntryBuyer,self.__class__,MDEntryBuyer)
_quickfix.MDEntryBuyer_swigregister(MDEntryBuyerPtr)

class MDEntrySeller(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntrySeller, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntrySeller, name)
    def __repr__(self):
        return "<C FIX::MDEntrySeller instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntrySeller, 'this', _quickfix.new_MDEntrySeller(*args))
        _swig_setattr(self, MDEntrySeller, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntrySeller):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntrySellerPtr(MDEntrySeller):
    def __init__(self, this):
        _swig_setattr(self, MDEntrySeller, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntrySeller, 'thisown', 0)
        _swig_setattr(self, MDEntrySeller,self.__class__,MDEntrySeller)
_quickfix.MDEntrySeller_swigregister(MDEntrySellerPtr)

class MDEntryPositionNo(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryPositionNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryPositionNo, name)
    def __repr__(self):
        return "<C FIX::MDEntryPositionNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDEntryPositionNo, 'this', _quickfix.new_MDEntryPositionNo(*args))
        _swig_setattr(self, MDEntryPositionNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDEntryPositionNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDEntryPositionNoPtr(MDEntryPositionNo):
    def __init__(self, this):
        _swig_setattr(self, MDEntryPositionNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDEntryPositionNo, 'thisown', 0)
        _swig_setattr(self, MDEntryPositionNo,self.__class__,MDEntryPositionNo)
_quickfix.MDEntryPositionNo_swigregister(MDEntryPositionNoPtr)

class FinancialStatus(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FinancialStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FinancialStatus, name)
    def __repr__(self):
        return "<C FIX::FinancialStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FinancialStatus, 'this', _quickfix.new_FinancialStatus(*args))
        _swig_setattr(self, FinancialStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FinancialStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class FinancialStatusPtr(FinancialStatus):
    def __init__(self, this):
        _swig_setattr(self, FinancialStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FinancialStatus, 'thisown', 0)
        _swig_setattr(self, FinancialStatus,self.__class__,FinancialStatus)
_quickfix.FinancialStatus_swigregister(FinancialStatusPtr)

class CorporateAction(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorporateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CorporateAction, name)
    def __repr__(self):
        return "<C FIX::CorporateAction instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CorporateAction, 'this', _quickfix.new_CorporateAction(*args))
        _swig_setattr(self, CorporateAction, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CorporateAction):
        try:
            if self.thisown: destroy(self)
        except: pass

class CorporateActionPtr(CorporateAction):
    def __init__(self, this):
        _swig_setattr(self, CorporateAction, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CorporateAction, 'thisown', 0)
        _swig_setattr(self, CorporateAction,self.__class__,CorporateAction)
_quickfix.CorporateAction_swigregister(CorporateActionPtr)

class DefBidSize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefBidSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DefBidSize, name)
    def __repr__(self):
        return "<C FIX::DefBidSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DefBidSize, 'this', _quickfix.new_DefBidSize(*args))
        _swig_setattr(self, DefBidSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DefBidSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class DefBidSizePtr(DefBidSize):
    def __init__(self, this):
        _swig_setattr(self, DefBidSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DefBidSize, 'thisown', 0)
        _swig_setattr(self, DefBidSize,self.__class__,DefBidSize)
_quickfix.DefBidSize_swigregister(DefBidSizePtr)

class DefOfferSize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefOfferSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DefOfferSize, name)
    def __repr__(self):
        return "<C FIX::DefOfferSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DefOfferSize, 'this', _quickfix.new_DefOfferSize(*args))
        _swig_setattr(self, DefOfferSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DefOfferSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class DefOfferSizePtr(DefOfferSize):
    def __init__(self, this):
        _swig_setattr(self, DefOfferSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DefOfferSize, 'thisown', 0)
        _swig_setattr(self, DefOfferSize,self.__class__,DefOfferSize)
_quickfix.DefOfferSize_swigregister(DefOfferSizePtr)

class NoQuoteEntries(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoQuoteEntries, name)
    def __repr__(self):
        return "<C FIX::NoQuoteEntries instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoQuoteEntries, 'this', _quickfix.new_NoQuoteEntries(*args))
        _swig_setattr(self, NoQuoteEntries, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoQuoteEntries):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoQuoteEntriesPtr(NoQuoteEntries):
    def __init__(self, this):
        _swig_setattr(self, NoQuoteEntries, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoQuoteEntries, 'thisown', 0)
        _swig_setattr(self, NoQuoteEntries,self.__class__,NoQuoteEntries)
_quickfix.NoQuoteEntries_swigregister(NoQuoteEntriesPtr)

class NoQuoteSets(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoQuoteSets, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoQuoteSets, name)
    def __repr__(self):
        return "<C FIX::NoQuoteSets instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoQuoteSets, 'this', _quickfix.new_NoQuoteSets(*args))
        _swig_setattr(self, NoQuoteSets, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoQuoteSets):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoQuoteSetsPtr(NoQuoteSets):
    def __init__(self, this):
        _swig_setattr(self, NoQuoteSets, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoQuoteSets, 'thisown', 0)
        _swig_setattr(self, NoQuoteSets,self.__class__,NoQuoteSets)
_quickfix.NoQuoteSets_swigregister(NoQuoteSetsPtr)

class QuoteStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteStatus, name)
    def __repr__(self):
        return "<C FIX::QuoteStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteStatus, 'this', _quickfix.new_QuoteStatus(*args))
        _swig_setattr(self, QuoteStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteStatusPtr(QuoteStatus):
    def __init__(self, this):
        _swig_setattr(self, QuoteStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteStatus, 'thisown', 0)
        _swig_setattr(self, QuoteStatus,self.__class__,QuoteStatus)
_quickfix.QuoteStatus_swigregister(QuoteStatusPtr)

class QuoteCancelType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteCancelType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteCancelType, name)
    def __repr__(self):
        return "<C FIX::QuoteCancelType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteCancelType, 'this', _quickfix.new_QuoteCancelType(*args))
        _swig_setattr(self, QuoteCancelType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteCancelType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteCancelTypePtr(QuoteCancelType):
    def __init__(self, this):
        _swig_setattr(self, QuoteCancelType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteCancelType, 'thisown', 0)
        _swig_setattr(self, QuoteCancelType,self.__class__,QuoteCancelType)
_quickfix.QuoteCancelType_swigregister(QuoteCancelTypePtr)

class QuoteEntryID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteEntryID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteEntryID, name)
    def __repr__(self):
        return "<C FIX::QuoteEntryID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteEntryID, 'this', _quickfix.new_QuoteEntryID(*args))
        _swig_setattr(self, QuoteEntryID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteEntryID):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteEntryIDPtr(QuoteEntryID):
    def __init__(self, this):
        _swig_setattr(self, QuoteEntryID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteEntryID, 'thisown', 0)
        _swig_setattr(self, QuoteEntryID,self.__class__,QuoteEntryID)
_quickfix.QuoteEntryID_swigregister(QuoteEntryIDPtr)

class QuoteRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRejectReason, name)
    def __repr__(self):
        return "<C FIX::QuoteRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteRejectReason, 'this', _quickfix.new_QuoteRejectReason(*args))
        _swig_setattr(self, QuoteRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteRejectReasonPtr(QuoteRejectReason):
    def __init__(self, this):
        _swig_setattr(self, QuoteRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteRejectReason, 'thisown', 0)
        _swig_setattr(self, QuoteRejectReason,self.__class__,QuoteRejectReason)
_quickfix.QuoteRejectReason_swigregister(QuoteRejectReasonPtr)

class QuoteResponseLevel(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteResponseLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteResponseLevel, name)
    def __repr__(self):
        return "<C FIX::QuoteResponseLevel instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteResponseLevel, 'this', _quickfix.new_QuoteResponseLevel(*args))
        _swig_setattr(self, QuoteResponseLevel, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteResponseLevel):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteResponseLevelPtr(QuoteResponseLevel):
    def __init__(self, this):
        _swig_setattr(self, QuoteResponseLevel, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteResponseLevel, 'thisown', 0)
        _swig_setattr(self, QuoteResponseLevel,self.__class__,QuoteResponseLevel)
_quickfix.QuoteResponseLevel_swigregister(QuoteResponseLevelPtr)

class QuoteSetID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteSetID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteSetID, name)
    def __repr__(self):
        return "<C FIX::QuoteSetID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteSetID, 'this', _quickfix.new_QuoteSetID(*args))
        _swig_setattr(self, QuoteSetID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteSetID):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteSetIDPtr(QuoteSetID):
    def __init__(self, this):
        _swig_setattr(self, QuoteSetID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteSetID, 'thisown', 0)
        _swig_setattr(self, QuoteSetID,self.__class__,QuoteSetID)
_quickfix.QuoteSetID_swigregister(QuoteSetIDPtr)

class QuoteRequestType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRequestType, name)
    def __repr__(self):
        return "<C FIX::QuoteRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteRequestType, 'this', _quickfix.new_QuoteRequestType(*args))
        _swig_setattr(self, QuoteRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteRequestTypePtr(QuoteRequestType):
    def __init__(self, this):
        _swig_setattr(self, QuoteRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteRequestType, 'thisown', 0)
        _swig_setattr(self, QuoteRequestType,self.__class__,QuoteRequestType)
_quickfix.QuoteRequestType_swigregister(QuoteRequestTypePtr)

class TotNoQuoteEntries(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoQuoteEntries, name)
    def __repr__(self):
        return "<C FIX::TotNoQuoteEntries instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNoQuoteEntries, 'this', _quickfix.new_TotNoQuoteEntries(*args))
        _swig_setattr(self, TotNoQuoteEntries, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNoQuoteEntries):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNoQuoteEntriesPtr(TotNoQuoteEntries):
    def __init__(self, this):
        _swig_setattr(self, TotNoQuoteEntries, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNoQuoteEntries, 'thisown', 0)
        _swig_setattr(self, TotNoQuoteEntries,self.__class__,TotNoQuoteEntries)
_quickfix.TotNoQuoteEntries_swigregister(TotNoQuoteEntriesPtr)

class UnderlyingSecurityIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityIDSource, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityIDSource, 'this', _quickfix.new_UnderlyingSecurityIDSource(*args))
        _swig_setattr(self, UnderlyingSecurityIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityIDSourcePtr(UnderlyingSecurityIDSource):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityIDSource, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityIDSource,self.__class__,UnderlyingSecurityIDSource)
_quickfix.UnderlyingSecurityIDSource_swigregister(UnderlyingSecurityIDSourcePtr)

class UnderlyingIssuer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIssuer, name)
    def __repr__(self):
        return "<C FIX::UnderlyingIssuer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingIssuer, 'this', _quickfix.new_UnderlyingIssuer(*args))
        _swig_setattr(self, UnderlyingIssuer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingIssuer):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingIssuerPtr(UnderlyingIssuer):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingIssuer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingIssuer, 'thisown', 0)
        _swig_setattr(self, UnderlyingIssuer,self.__class__,UnderlyingIssuer)
_quickfix.UnderlyingIssuer_swigregister(UnderlyingIssuerPtr)

class UnderlyingSecurityDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityDesc, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityDesc, 'this', _quickfix.new_UnderlyingSecurityDesc(*args))
        _swig_setattr(self, UnderlyingSecurityDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityDescPtr(UnderlyingSecurityDesc):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityDesc, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityDesc,self.__class__,UnderlyingSecurityDesc)
_quickfix.UnderlyingSecurityDesc_swigregister(UnderlyingSecurityDescPtr)

class UnderlyingSecurityExchange(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityExchange, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityExchange instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityExchange, 'this', _quickfix.new_UnderlyingSecurityExchange(*args))
        _swig_setattr(self, UnderlyingSecurityExchange, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityExchange):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityExchangePtr(UnderlyingSecurityExchange):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityExchange, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityExchange, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityExchange,self.__class__,UnderlyingSecurityExchange)
_quickfix.UnderlyingSecurityExchange_swigregister(UnderlyingSecurityExchangePtr)

class UnderlyingSecurityID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityID, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityID, 'this', _quickfix.new_UnderlyingSecurityID(*args))
        _swig_setattr(self, UnderlyingSecurityID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityID):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityIDPtr(UnderlyingSecurityID):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityID, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityID,self.__class__,UnderlyingSecurityID)
_quickfix.UnderlyingSecurityID_swigregister(UnderlyingSecurityIDPtr)

class UnderlyingSecurityType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityType, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityType, 'this', _quickfix.new_UnderlyingSecurityType(*args))
        _swig_setattr(self, UnderlyingSecurityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityTypePtr(UnderlyingSecurityType):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityType, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityType,self.__class__,UnderlyingSecurityType)
_quickfix.UnderlyingSecurityType_swigregister(UnderlyingSecurityTypePtr)

class UnderlyingSymbol(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSymbol, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSymbol instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSymbol, 'this', _quickfix.new_UnderlyingSymbol(*args))
        _swig_setattr(self, UnderlyingSymbol, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSymbol):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSymbolPtr(UnderlyingSymbol):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSymbol, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSymbol, 'thisown', 0)
        _swig_setattr(self, UnderlyingSymbol,self.__class__,UnderlyingSymbol)
_quickfix.UnderlyingSymbol_swigregister(UnderlyingSymbolPtr)

class UnderlyingSymbolSfx(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSymbolSfx, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSymbolSfx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSymbolSfx, 'this', _quickfix.new_UnderlyingSymbolSfx(*args))
        _swig_setattr(self, UnderlyingSymbolSfx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSymbolSfx):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSymbolSfxPtr(UnderlyingSymbolSfx):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSymbolSfx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSymbolSfx, 'thisown', 0)
        _swig_setattr(self, UnderlyingSymbolSfx,self.__class__,UnderlyingSymbolSfx)
_quickfix.UnderlyingSymbolSfx_swigregister(UnderlyingSymbolSfxPtr)

class UnderlyingMaturityMonthYear(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityMonthYear, name)
    def __repr__(self):
        return "<C FIX::UnderlyingMaturityMonthYear instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingMaturityMonthYear, 'this', _quickfix.new_UnderlyingMaturityMonthYear(*args))
        _swig_setattr(self, UnderlyingMaturityMonthYear, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingMaturityMonthYear):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingMaturityMonthYearPtr(UnderlyingMaturityMonthYear):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingMaturityMonthYear, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingMaturityMonthYear, 'thisown', 0)
        _swig_setattr(self, UnderlyingMaturityMonthYear,self.__class__,UnderlyingMaturityMonthYear)
_quickfix.UnderlyingMaturityMonthYear_swigregister(UnderlyingMaturityMonthYearPtr)

class UnderlyingStrikePrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStrikePrice, name)
    def __repr__(self):
        return "<C FIX::UnderlyingStrikePrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingStrikePrice, 'this', _quickfix.new_UnderlyingStrikePrice(*args))
        _swig_setattr(self, UnderlyingStrikePrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingStrikePrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingStrikePricePtr(UnderlyingStrikePrice):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingStrikePrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingStrikePrice, 'thisown', 0)
        _swig_setattr(self, UnderlyingStrikePrice,self.__class__,UnderlyingStrikePrice)
_quickfix.UnderlyingStrikePrice_swigregister(UnderlyingStrikePricePtr)

class UnderlyingOptAttribute(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingOptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingOptAttribute, name)
    def __repr__(self):
        return "<C FIX::UnderlyingOptAttribute instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingOptAttribute, 'this', _quickfix.new_UnderlyingOptAttribute(*args))
        _swig_setattr(self, UnderlyingOptAttribute, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingOptAttribute):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingOptAttributePtr(UnderlyingOptAttribute):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingOptAttribute, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingOptAttribute, 'thisown', 0)
        _swig_setattr(self, UnderlyingOptAttribute,self.__class__,UnderlyingOptAttribute)
_quickfix.UnderlyingOptAttribute_swigregister(UnderlyingOptAttributePtr)

class UnderlyingCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCurrency, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCurrency, 'this', _quickfix.new_UnderlyingCurrency(*args))
        _swig_setattr(self, UnderlyingCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCurrencyPtr(UnderlyingCurrency):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCurrency, 'thisown', 0)
        _swig_setattr(self, UnderlyingCurrency,self.__class__,UnderlyingCurrency)
_quickfix.UnderlyingCurrency_swigregister(UnderlyingCurrencyPtr)

class SecurityReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityReqID, name)
    def __repr__(self):
        return "<C FIX::SecurityReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityReqID, 'this', _quickfix.new_SecurityReqID(*args))
        _swig_setattr(self, SecurityReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityReqIDPtr(SecurityReqID):
    def __init__(self, this):
        _swig_setattr(self, SecurityReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityReqID, 'thisown', 0)
        _swig_setattr(self, SecurityReqID,self.__class__,SecurityReqID)
_quickfix.SecurityReqID_swigregister(SecurityReqIDPtr)

class SecurityRequestType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityRequestType, name)
    def __repr__(self):
        return "<C FIX::SecurityRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityRequestType, 'this', _quickfix.new_SecurityRequestType(*args))
        _swig_setattr(self, SecurityRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityRequestTypePtr(SecurityRequestType):
    def __init__(self, this):
        _swig_setattr(self, SecurityRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityRequestType, 'thisown', 0)
        _swig_setattr(self, SecurityRequestType,self.__class__,SecurityRequestType)
_quickfix.SecurityRequestType_swigregister(SecurityRequestTypePtr)

class SecurityResponseID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityResponseID, name)
    def __repr__(self):
        return "<C FIX::SecurityResponseID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityResponseID, 'this', _quickfix.new_SecurityResponseID(*args))
        _swig_setattr(self, SecurityResponseID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityResponseID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityResponseIDPtr(SecurityResponseID):
    def __init__(self, this):
        _swig_setattr(self, SecurityResponseID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityResponseID, 'thisown', 0)
        _swig_setattr(self, SecurityResponseID,self.__class__,SecurityResponseID)
_quickfix.SecurityResponseID_swigregister(SecurityResponseIDPtr)

class SecurityResponseType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityResponseType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityResponseType, name)
    def __repr__(self):
        return "<C FIX::SecurityResponseType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityResponseType, 'this', _quickfix.new_SecurityResponseType(*args))
        _swig_setattr(self, SecurityResponseType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityResponseType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityResponseTypePtr(SecurityResponseType):
    def __init__(self, this):
        _swig_setattr(self, SecurityResponseType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityResponseType, 'thisown', 0)
        _swig_setattr(self, SecurityResponseType,self.__class__,SecurityResponseType)
_quickfix.SecurityResponseType_swigregister(SecurityResponseTypePtr)

class SecurityStatusReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityStatusReqID, name)
    def __repr__(self):
        return "<C FIX::SecurityStatusReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityStatusReqID, 'this', _quickfix.new_SecurityStatusReqID(*args))
        _swig_setattr(self, SecurityStatusReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityStatusReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityStatusReqIDPtr(SecurityStatusReqID):
    def __init__(self, this):
        _swig_setattr(self, SecurityStatusReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityStatusReqID, 'thisown', 0)
        _swig_setattr(self, SecurityStatusReqID,self.__class__,SecurityStatusReqID)
_quickfix.SecurityStatusReqID_swigregister(SecurityStatusReqIDPtr)

class UnsolicitedIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsolicitedIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnsolicitedIndicator, name)
    def __repr__(self):
        return "<C FIX::UnsolicitedIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnsolicitedIndicator, 'this', _quickfix.new_UnsolicitedIndicator(*args))
        _swig_setattr(self, UnsolicitedIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnsolicitedIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnsolicitedIndicatorPtr(UnsolicitedIndicator):
    def __init__(self, this):
        _swig_setattr(self, UnsolicitedIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnsolicitedIndicator, 'thisown', 0)
        _swig_setattr(self, UnsolicitedIndicator,self.__class__,UnsolicitedIndicator)
_quickfix.UnsolicitedIndicator_swigregister(UnsolicitedIndicatorPtr)

class SecurityTradingStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityTradingStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityTradingStatus, name)
    def __repr__(self):
        return "<C FIX::SecurityTradingStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityTradingStatus, 'this', _quickfix.new_SecurityTradingStatus(*args))
        _swig_setattr(self, SecurityTradingStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityTradingStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityTradingStatusPtr(SecurityTradingStatus):
    def __init__(self, this):
        _swig_setattr(self, SecurityTradingStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityTradingStatus, 'thisown', 0)
        _swig_setattr(self, SecurityTradingStatus,self.__class__,SecurityTradingStatus)
_quickfix.SecurityTradingStatus_swigregister(SecurityTradingStatusPtr)

class HaltReason(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaltReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HaltReason, name)
    def __repr__(self):
        return "<C FIX::HaltReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HaltReason, 'this', _quickfix.new_HaltReason(*args))
        _swig_setattr(self, HaltReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HaltReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class HaltReasonPtr(HaltReason):
    def __init__(self, this):
        _swig_setattr(self, HaltReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HaltReason, 'thisown', 0)
        _swig_setattr(self, HaltReason,self.__class__,HaltReason)
_quickfix.HaltReason_swigregister(HaltReasonPtr)

class InViewOfCommon(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InViewOfCommon, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InViewOfCommon, name)
    def __repr__(self):
        return "<C FIX::InViewOfCommon instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InViewOfCommon, 'this', _quickfix.new_InViewOfCommon(*args))
        _swig_setattr(self, InViewOfCommon, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InViewOfCommon):
        try:
            if self.thisown: destroy(self)
        except: pass

class InViewOfCommonPtr(InViewOfCommon):
    def __init__(self, this):
        _swig_setattr(self, InViewOfCommon, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InViewOfCommon, 'thisown', 0)
        _swig_setattr(self, InViewOfCommon,self.__class__,InViewOfCommon)
_quickfix.InViewOfCommon_swigregister(InViewOfCommonPtr)

class DueToRelated(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DueToRelated, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DueToRelated, name)
    def __repr__(self):
        return "<C FIX::DueToRelated instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DueToRelated, 'this', _quickfix.new_DueToRelated(*args))
        _swig_setattr(self, DueToRelated, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DueToRelated):
        try:
            if self.thisown: destroy(self)
        except: pass

class DueToRelatedPtr(DueToRelated):
    def __init__(self, this):
        _swig_setattr(self, DueToRelated, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DueToRelated, 'thisown', 0)
        _swig_setattr(self, DueToRelated,self.__class__,DueToRelated)
_quickfix.DueToRelated_swigregister(DueToRelatedPtr)

class BuyVolume(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuyVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BuyVolume, name)
    def __repr__(self):
        return "<C FIX::BuyVolume instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BuyVolume, 'this', _quickfix.new_BuyVolume(*args))
        _swig_setattr(self, BuyVolume, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BuyVolume):
        try:
            if self.thisown: destroy(self)
        except: pass

class BuyVolumePtr(BuyVolume):
    def __init__(self, this):
        _swig_setattr(self, BuyVolume, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BuyVolume, 'thisown', 0)
        _swig_setattr(self, BuyVolume,self.__class__,BuyVolume)
_quickfix.BuyVolume_swigregister(BuyVolumePtr)

class SellVolume(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SellVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SellVolume, name)
    def __repr__(self):
        return "<C FIX::SellVolume instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SellVolume, 'this', _quickfix.new_SellVolume(*args))
        _swig_setattr(self, SellVolume, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SellVolume):
        try:
            if self.thisown: destroy(self)
        except: pass

class SellVolumePtr(SellVolume):
    def __init__(self, this):
        _swig_setattr(self, SellVolume, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SellVolume, 'thisown', 0)
        _swig_setattr(self, SellVolume,self.__class__,SellVolume)
_quickfix.SellVolume_swigregister(SellVolumePtr)

class HighPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HighPx, name)
    def __repr__(self):
        return "<C FIX::HighPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HighPx, 'this', _quickfix.new_HighPx(*args))
        _swig_setattr(self, HighPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HighPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class HighPxPtr(HighPx):
    def __init__(self, this):
        _swig_setattr(self, HighPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HighPx, 'thisown', 0)
        _swig_setattr(self, HighPx,self.__class__,HighPx)
_quickfix.HighPx_swigregister(HighPxPtr)

class LowPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LowPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LowPx, name)
    def __repr__(self):
        return "<C FIX::LowPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LowPx, 'this', _quickfix.new_LowPx(*args))
        _swig_setattr(self, LowPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LowPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LowPxPtr(LowPx):
    def __init__(self, this):
        _swig_setattr(self, LowPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LowPx, 'thisown', 0)
        _swig_setattr(self, LowPx,self.__class__,LowPx)
_quickfix.LowPx_swigregister(LowPxPtr)

class Adjustment(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adjustment, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Adjustment, name)
    def __repr__(self):
        return "<C FIX::Adjustment instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Adjustment, 'this', _quickfix.new_Adjustment(*args))
        _swig_setattr(self, Adjustment, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Adjustment):
        try:
            if self.thisown: destroy(self)
        except: pass

class AdjustmentPtr(Adjustment):
    def __init__(self, this):
        _swig_setattr(self, Adjustment, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Adjustment, 'thisown', 0)
        _swig_setattr(self, Adjustment,self.__class__,Adjustment)
_quickfix.Adjustment_swigregister(AdjustmentPtr)

class TradSesReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesReqID, name)
    def __repr__(self):
        return "<C FIX::TradSesReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesReqID, 'this', _quickfix.new_TradSesReqID(*args))
        _swig_setattr(self, TradSesReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesReqIDPtr(TradSesReqID):
    def __init__(self, this):
        _swig_setattr(self, TradSesReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesReqID, 'thisown', 0)
        _swig_setattr(self, TradSesReqID,self.__class__,TradSesReqID)
_quickfix.TradSesReqID_swigregister(TradSesReqIDPtr)

class TradingSessionID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingSessionID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradingSessionID, name)
    def __repr__(self):
        return "<C FIX::TradingSessionID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradingSessionID, 'this', _quickfix.new_TradingSessionID(*args))
        _swig_setattr(self, TradingSessionID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradingSessionID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradingSessionIDPtr(TradingSessionID):
    def __init__(self, this):
        _swig_setattr(self, TradingSessionID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradingSessionID, 'thisown', 0)
        _swig_setattr(self, TradingSessionID,self.__class__,TradingSessionID)
_quickfix.TradingSessionID_swigregister(TradingSessionIDPtr)

class ContraTrader(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraTrader, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContraTrader, name)
    def __repr__(self):
        return "<C FIX::ContraTrader instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContraTrader, 'this', _quickfix.new_ContraTrader(*args))
        _swig_setattr(self, ContraTrader, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContraTrader):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContraTraderPtr(ContraTrader):
    def __init__(self, this):
        _swig_setattr(self, ContraTrader, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContraTrader, 'thisown', 0)
        _swig_setattr(self, ContraTrader,self.__class__,ContraTrader)
_quickfix.ContraTrader_swigregister(ContraTraderPtr)

class TradSesMethod(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesMethod, name)
    def __repr__(self):
        return "<C FIX::TradSesMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesMethod, 'this', _quickfix.new_TradSesMethod(*args))
        _swig_setattr(self, TradSesMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesMethodPtr(TradSesMethod):
    def __init__(self, this):
        _swig_setattr(self, TradSesMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesMethod, 'thisown', 0)
        _swig_setattr(self, TradSesMethod,self.__class__,TradSesMethod)
_quickfix.TradSesMethod_swigregister(TradSesMethodPtr)

class TradSesMode(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesMode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesMode, name)
    def __repr__(self):
        return "<C FIX::TradSesMode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesMode, 'this', _quickfix.new_TradSesMode(*args))
        _swig_setattr(self, TradSesMode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesMode):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesModePtr(TradSesMode):
    def __init__(self, this):
        _swig_setattr(self, TradSesMode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesMode, 'thisown', 0)
        _swig_setattr(self, TradSesMode,self.__class__,TradSesMode)
_quickfix.TradSesMode_swigregister(TradSesModePtr)

class TradSesStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesStatus, name)
    def __repr__(self):
        return "<C FIX::TradSesStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesStatus, 'this', _quickfix.new_TradSesStatus(*args))
        _swig_setattr(self, TradSesStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesStatusPtr(TradSesStatus):
    def __init__(self, this):
        _swig_setattr(self, TradSesStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesStatus, 'thisown', 0)
        _swig_setattr(self, TradSesStatus,self.__class__,TradSesStatus)
_quickfix.TradSesStatus_swigregister(TradSesStatusPtr)

class TradSesStartTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesStartTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesStartTime, name)
    def __repr__(self):
        return "<C FIX::TradSesStartTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesStartTime, 'this', _quickfix.new_TradSesStartTime(*args))
        _swig_setattr(self, TradSesStartTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesStartTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesStartTimePtr(TradSesStartTime):
    def __init__(self, this):
        _swig_setattr(self, TradSesStartTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesStartTime, 'thisown', 0)
        _swig_setattr(self, TradSesStartTime,self.__class__,TradSesStartTime)
_quickfix.TradSesStartTime_swigregister(TradSesStartTimePtr)

class TradSesOpenTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesOpenTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesOpenTime, name)
    def __repr__(self):
        return "<C FIX::TradSesOpenTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesOpenTime, 'this', _quickfix.new_TradSesOpenTime(*args))
        _swig_setattr(self, TradSesOpenTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesOpenTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesOpenTimePtr(TradSesOpenTime):
    def __init__(self, this):
        _swig_setattr(self, TradSesOpenTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesOpenTime, 'thisown', 0)
        _swig_setattr(self, TradSesOpenTime,self.__class__,TradSesOpenTime)
_quickfix.TradSesOpenTime_swigregister(TradSesOpenTimePtr)

class TradSesPreCloseTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesPreCloseTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesPreCloseTime, name)
    def __repr__(self):
        return "<C FIX::TradSesPreCloseTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesPreCloseTime, 'this', _quickfix.new_TradSesPreCloseTime(*args))
        _swig_setattr(self, TradSesPreCloseTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesPreCloseTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesPreCloseTimePtr(TradSesPreCloseTime):
    def __init__(self, this):
        _swig_setattr(self, TradSesPreCloseTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesPreCloseTime, 'thisown', 0)
        _swig_setattr(self, TradSesPreCloseTime,self.__class__,TradSesPreCloseTime)
_quickfix.TradSesPreCloseTime_swigregister(TradSesPreCloseTimePtr)

class TradSesCloseTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesCloseTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesCloseTime, name)
    def __repr__(self):
        return "<C FIX::TradSesCloseTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesCloseTime, 'this', _quickfix.new_TradSesCloseTime(*args))
        _swig_setattr(self, TradSesCloseTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesCloseTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesCloseTimePtr(TradSesCloseTime):
    def __init__(self, this):
        _swig_setattr(self, TradSesCloseTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesCloseTime, 'thisown', 0)
        _swig_setattr(self, TradSesCloseTime,self.__class__,TradSesCloseTime)
_quickfix.TradSesCloseTime_swigregister(TradSesCloseTimePtr)

class TradSesEndTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesEndTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesEndTime, name)
    def __repr__(self):
        return "<C FIX::TradSesEndTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesEndTime, 'this', _quickfix.new_TradSesEndTime(*args))
        _swig_setattr(self, TradSesEndTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesEndTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesEndTimePtr(TradSesEndTime):
    def __init__(self, this):
        _swig_setattr(self, TradSesEndTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesEndTime, 'thisown', 0)
        _swig_setattr(self, TradSesEndTime,self.__class__,TradSesEndTime)
_quickfix.TradSesEndTime_swigregister(TradSesEndTimePtr)

class NumberOfOrders(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberOfOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NumberOfOrders, name)
    def __repr__(self):
        return "<C FIX::NumberOfOrders instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NumberOfOrders, 'this', _quickfix.new_NumberOfOrders(*args))
        _swig_setattr(self, NumberOfOrders, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NumberOfOrders):
        try:
            if self.thisown: destroy(self)
        except: pass

class NumberOfOrdersPtr(NumberOfOrders):
    def __init__(self, this):
        _swig_setattr(self, NumberOfOrders, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NumberOfOrders, 'thisown', 0)
        _swig_setattr(self, NumberOfOrders,self.__class__,NumberOfOrders)
_quickfix.NumberOfOrders_swigregister(NumberOfOrdersPtr)

class MessageEncoding(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageEncoding, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MessageEncoding, name)
    def __repr__(self):
        return "<C FIX::MessageEncoding instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MessageEncoding, 'this', _quickfix.new_MessageEncoding(*args))
        _swig_setattr(self, MessageEncoding, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MessageEncoding):
        try:
            if self.thisown: destroy(self)
        except: pass

class MessageEncodingPtr(MessageEncoding):
    def __init__(self, this):
        _swig_setattr(self, MessageEncoding, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MessageEncoding, 'thisown', 0)
        _swig_setattr(self, MessageEncoding,self.__class__,MessageEncoding)
_quickfix.MessageEncoding_swigregister(MessageEncodingPtr)

class EncodedIssuerLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedIssuerLen, name)
    def __repr__(self):
        return "<C FIX::EncodedIssuerLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedIssuerLen, 'this', _quickfix.new_EncodedIssuerLen(*args))
        _swig_setattr(self, EncodedIssuerLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedIssuerLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedIssuerLenPtr(EncodedIssuerLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedIssuerLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedIssuerLen, 'thisown', 0)
        _swig_setattr(self, EncodedIssuerLen,self.__class__,EncodedIssuerLen)
_quickfix.EncodedIssuerLen_swigregister(EncodedIssuerLenPtr)

class EncodedIssuer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedIssuer, name)
    def __repr__(self):
        return "<C FIX::EncodedIssuer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedIssuer, 'this', _quickfix.new_EncodedIssuer(*args))
        _swig_setattr(self, EncodedIssuer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedIssuer):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedIssuerPtr(EncodedIssuer):
    def __init__(self, this):
        _swig_setattr(self, EncodedIssuer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedIssuer, 'thisown', 0)
        _swig_setattr(self, EncodedIssuer,self.__class__,EncodedIssuer)
_quickfix.EncodedIssuer_swigregister(EncodedIssuerPtr)

class EncodedSecurityDescLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSecurityDescLen, name)
    def __repr__(self):
        return "<C FIX::EncodedSecurityDescLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedSecurityDescLen, 'this', _quickfix.new_EncodedSecurityDescLen(*args))
        _swig_setattr(self, EncodedSecurityDescLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedSecurityDescLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedSecurityDescLenPtr(EncodedSecurityDescLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedSecurityDescLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedSecurityDescLen, 'thisown', 0)
        _swig_setattr(self, EncodedSecurityDescLen,self.__class__,EncodedSecurityDescLen)
_quickfix.EncodedSecurityDescLen_swigregister(EncodedSecurityDescLenPtr)

class EncodedSecurityDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSecurityDesc, name)
    def __repr__(self):
        return "<C FIX::EncodedSecurityDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedSecurityDesc, 'this', _quickfix.new_EncodedSecurityDesc(*args))
        _swig_setattr(self, EncodedSecurityDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedSecurityDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedSecurityDescPtr(EncodedSecurityDesc):
    def __init__(self, this):
        _swig_setattr(self, EncodedSecurityDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedSecurityDesc, 'thisown', 0)
        _swig_setattr(self, EncodedSecurityDesc,self.__class__,EncodedSecurityDesc)
_quickfix.EncodedSecurityDesc_swigregister(EncodedSecurityDescPtr)

class EncodedListExecInstLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListExecInstLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListExecInstLen, name)
    def __repr__(self):
        return "<C FIX::EncodedListExecInstLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedListExecInstLen, 'this', _quickfix.new_EncodedListExecInstLen(*args))
        _swig_setattr(self, EncodedListExecInstLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedListExecInstLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedListExecInstLenPtr(EncodedListExecInstLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedListExecInstLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedListExecInstLen, 'thisown', 0)
        _swig_setattr(self, EncodedListExecInstLen,self.__class__,EncodedListExecInstLen)
_quickfix.EncodedListExecInstLen_swigregister(EncodedListExecInstLenPtr)

class EncodedListExecInst(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListExecInst, name)
    def __repr__(self):
        return "<C FIX::EncodedListExecInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedListExecInst, 'this', _quickfix.new_EncodedListExecInst(*args))
        _swig_setattr(self, EncodedListExecInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedListExecInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedListExecInstPtr(EncodedListExecInst):
    def __init__(self, this):
        _swig_setattr(self, EncodedListExecInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedListExecInst, 'thisown', 0)
        _swig_setattr(self, EncodedListExecInst,self.__class__,EncodedListExecInst)
_quickfix.EncodedListExecInst_swigregister(EncodedListExecInstPtr)

class EncodedTextLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedTextLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedTextLen, name)
    def __repr__(self):
        return "<C FIX::EncodedTextLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedTextLen, 'this', _quickfix.new_EncodedTextLen(*args))
        _swig_setattr(self, EncodedTextLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedTextLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedTextLenPtr(EncodedTextLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedTextLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedTextLen, 'thisown', 0)
        _swig_setattr(self, EncodedTextLen,self.__class__,EncodedTextLen)
_quickfix.EncodedTextLen_swigregister(EncodedTextLenPtr)

class EncodedText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedText, name)
    def __repr__(self):
        return "<C FIX::EncodedText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedText, 'this', _quickfix.new_EncodedText(*args))
        _swig_setattr(self, EncodedText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedText):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedTextPtr(EncodedText):
    def __init__(self, this):
        _swig_setattr(self, EncodedText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedText, 'thisown', 0)
        _swig_setattr(self, EncodedText,self.__class__,EncodedText)
_quickfix.EncodedText_swigregister(EncodedTextPtr)

class EncodedSubjectLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSubjectLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSubjectLen, name)
    def __repr__(self):
        return "<C FIX::EncodedSubjectLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedSubjectLen, 'this', _quickfix.new_EncodedSubjectLen(*args))
        _swig_setattr(self, EncodedSubjectLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedSubjectLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedSubjectLenPtr(EncodedSubjectLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedSubjectLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedSubjectLen, 'thisown', 0)
        _swig_setattr(self, EncodedSubjectLen,self.__class__,EncodedSubjectLen)
_quickfix.EncodedSubjectLen_swigregister(EncodedSubjectLenPtr)

class EncodedSubject(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSubject, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSubject, name)
    def __repr__(self):
        return "<C FIX::EncodedSubject instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedSubject, 'this', _quickfix.new_EncodedSubject(*args))
        _swig_setattr(self, EncodedSubject, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedSubject):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedSubjectPtr(EncodedSubject):
    def __init__(self, this):
        _swig_setattr(self, EncodedSubject, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedSubject, 'thisown', 0)
        _swig_setattr(self, EncodedSubject,self.__class__,EncodedSubject)
_quickfix.EncodedSubject_swigregister(EncodedSubjectPtr)

class EncodedHeadlineLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedHeadlineLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedHeadlineLen, name)
    def __repr__(self):
        return "<C FIX::EncodedHeadlineLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedHeadlineLen, 'this', _quickfix.new_EncodedHeadlineLen(*args))
        _swig_setattr(self, EncodedHeadlineLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedHeadlineLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedHeadlineLenPtr(EncodedHeadlineLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedHeadlineLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedHeadlineLen, 'thisown', 0)
        _swig_setattr(self, EncodedHeadlineLen,self.__class__,EncodedHeadlineLen)
_quickfix.EncodedHeadlineLen_swigregister(EncodedHeadlineLenPtr)

class EncodedHeadline(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedHeadline, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedHeadline, name)
    def __repr__(self):
        return "<C FIX::EncodedHeadline instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedHeadline, 'this', _quickfix.new_EncodedHeadline(*args))
        _swig_setattr(self, EncodedHeadline, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedHeadline):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedHeadlinePtr(EncodedHeadline):
    def __init__(self, this):
        _swig_setattr(self, EncodedHeadline, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedHeadline, 'thisown', 0)
        _swig_setattr(self, EncodedHeadline,self.__class__,EncodedHeadline)
_quickfix.EncodedHeadline_swigregister(EncodedHeadlinePtr)

class EncodedAllocTextLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedAllocTextLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedAllocTextLen, name)
    def __repr__(self):
        return "<C FIX::EncodedAllocTextLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedAllocTextLen, 'this', _quickfix.new_EncodedAllocTextLen(*args))
        _swig_setattr(self, EncodedAllocTextLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedAllocTextLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedAllocTextLenPtr(EncodedAllocTextLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedAllocTextLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedAllocTextLen, 'thisown', 0)
        _swig_setattr(self, EncodedAllocTextLen,self.__class__,EncodedAllocTextLen)
_quickfix.EncodedAllocTextLen_swigregister(EncodedAllocTextLenPtr)

class EncodedAllocText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedAllocText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedAllocText, name)
    def __repr__(self):
        return "<C FIX::EncodedAllocText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedAllocText, 'this', _quickfix.new_EncodedAllocText(*args))
        _swig_setattr(self, EncodedAllocText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedAllocText):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedAllocTextPtr(EncodedAllocText):
    def __init__(self, this):
        _swig_setattr(self, EncodedAllocText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedAllocText, 'thisown', 0)
        _swig_setattr(self, EncodedAllocText,self.__class__,EncodedAllocText)
_quickfix.EncodedAllocText_swigregister(EncodedAllocTextPtr)

class EncodedUnderlyingIssuerLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingIssuerLen, name)
    def __repr__(self):
        return "<C FIX::EncodedUnderlyingIssuerLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedUnderlyingIssuerLen, 'this', _quickfix.new_EncodedUnderlyingIssuerLen(*args))
        _swig_setattr(self, EncodedUnderlyingIssuerLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedUnderlyingIssuerLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedUnderlyingIssuerLenPtr(EncodedUnderlyingIssuerLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedUnderlyingIssuerLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedUnderlyingIssuerLen, 'thisown', 0)
        _swig_setattr(self, EncodedUnderlyingIssuerLen,self.__class__,EncodedUnderlyingIssuerLen)
_quickfix.EncodedUnderlyingIssuerLen_swigregister(EncodedUnderlyingIssuerLenPtr)

class EncodedUnderlyingIssuer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingIssuer, name)
    def __repr__(self):
        return "<C FIX::EncodedUnderlyingIssuer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedUnderlyingIssuer, 'this', _quickfix.new_EncodedUnderlyingIssuer(*args))
        _swig_setattr(self, EncodedUnderlyingIssuer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedUnderlyingIssuer):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedUnderlyingIssuerPtr(EncodedUnderlyingIssuer):
    def __init__(self, this):
        _swig_setattr(self, EncodedUnderlyingIssuer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedUnderlyingIssuer, 'thisown', 0)
        _swig_setattr(self, EncodedUnderlyingIssuer,self.__class__,EncodedUnderlyingIssuer)
_quickfix.EncodedUnderlyingIssuer_swigregister(EncodedUnderlyingIssuerPtr)

class EncodedUnderlyingSecurityDescLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingSecurityDescLen, name)
    def __repr__(self):
        return "<C FIX::EncodedUnderlyingSecurityDescLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedUnderlyingSecurityDescLen, 'this', _quickfix.new_EncodedUnderlyingSecurityDescLen(*args))
        _swig_setattr(self, EncodedUnderlyingSecurityDescLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedUnderlyingSecurityDescLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedUnderlyingSecurityDescLenPtr(EncodedUnderlyingSecurityDescLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedUnderlyingSecurityDescLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedUnderlyingSecurityDescLen, 'thisown', 0)
        _swig_setattr(self, EncodedUnderlyingSecurityDescLen,self.__class__,EncodedUnderlyingSecurityDescLen)
_quickfix.EncodedUnderlyingSecurityDescLen_swigregister(EncodedUnderlyingSecurityDescLenPtr)

class EncodedUnderlyingSecurityDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingSecurityDesc, name)
    def __repr__(self):
        return "<C FIX::EncodedUnderlyingSecurityDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedUnderlyingSecurityDesc, 'this', _quickfix.new_EncodedUnderlyingSecurityDesc(*args))
        _swig_setattr(self, EncodedUnderlyingSecurityDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedUnderlyingSecurityDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedUnderlyingSecurityDescPtr(EncodedUnderlyingSecurityDesc):
    def __init__(self, this):
        _swig_setattr(self, EncodedUnderlyingSecurityDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedUnderlyingSecurityDesc, 'thisown', 0)
        _swig_setattr(self, EncodedUnderlyingSecurityDesc,self.__class__,EncodedUnderlyingSecurityDesc)
_quickfix.EncodedUnderlyingSecurityDesc_swigregister(EncodedUnderlyingSecurityDescPtr)

class AllocPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocPrice, name)
    def __repr__(self):
        return "<C FIX::AllocPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocPrice, 'this', _quickfix.new_AllocPrice(*args))
        _swig_setattr(self, AllocPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocPricePtr(AllocPrice):
    def __init__(self, this):
        _swig_setattr(self, AllocPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocPrice, 'thisown', 0)
        _swig_setattr(self, AllocPrice,self.__class__,AllocPrice)
_quickfix.AllocPrice_swigregister(AllocPricePtr)

class QuoteSetValidUntilTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteSetValidUntilTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteSetValidUntilTime, name)
    def __repr__(self):
        return "<C FIX::QuoteSetValidUntilTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteSetValidUntilTime, 'this', _quickfix.new_QuoteSetValidUntilTime(*args))
        _swig_setattr(self, QuoteSetValidUntilTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteSetValidUntilTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteSetValidUntilTimePtr(QuoteSetValidUntilTime):
    def __init__(self, this):
        _swig_setattr(self, QuoteSetValidUntilTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteSetValidUntilTime, 'thisown', 0)
        _swig_setattr(self, QuoteSetValidUntilTime,self.__class__,QuoteSetValidUntilTime)
_quickfix.QuoteSetValidUntilTime_swigregister(QuoteSetValidUntilTimePtr)

class QuoteEntryRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteEntryRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteEntryRejectReason, name)
    def __repr__(self):
        return "<C FIX::QuoteEntryRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteEntryRejectReason, 'this', _quickfix.new_QuoteEntryRejectReason(*args))
        _swig_setattr(self, QuoteEntryRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteEntryRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteEntryRejectReasonPtr(QuoteEntryRejectReason):
    def __init__(self, this):
        _swig_setattr(self, QuoteEntryRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteEntryRejectReason, 'thisown', 0)
        _swig_setattr(self, QuoteEntryRejectReason,self.__class__,QuoteEntryRejectReason)
_quickfix.QuoteEntryRejectReason_swigregister(QuoteEntryRejectReasonPtr)

class LastMsgSeqNumProcessed(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastMsgSeqNumProcessed, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastMsgSeqNumProcessed, name)
    def __repr__(self):
        return "<C FIX::LastMsgSeqNumProcessed instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastMsgSeqNumProcessed, 'this', _quickfix.new_LastMsgSeqNumProcessed(*args))
        _swig_setattr(self, LastMsgSeqNumProcessed, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastMsgSeqNumProcessed):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastMsgSeqNumProcessedPtr(LastMsgSeqNumProcessed):
    def __init__(self, this):
        _swig_setattr(self, LastMsgSeqNumProcessed, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastMsgSeqNumProcessed, 'thisown', 0)
        _swig_setattr(self, LastMsgSeqNumProcessed,self.__class__,LastMsgSeqNumProcessed)
_quickfix.LastMsgSeqNumProcessed_swigregister(LastMsgSeqNumProcessedPtr)

class RefTagID(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefTagID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RefTagID, name)
    def __repr__(self):
        return "<C FIX::RefTagID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RefTagID, 'this', _quickfix.new_RefTagID(*args))
        _swig_setattr(self, RefTagID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RefTagID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RefTagIDPtr(RefTagID):
    def __init__(self, this):
        _swig_setattr(self, RefTagID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RefTagID, 'thisown', 0)
        _swig_setattr(self, RefTagID,self.__class__,RefTagID)
_quickfix.RefTagID_swigregister(RefTagIDPtr)

class RefMsgType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefMsgType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RefMsgType, name)
    def __repr__(self):
        return "<C FIX::RefMsgType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RefMsgType, 'this', _quickfix.new_RefMsgType(*args))
        _swig_setattr(self, RefMsgType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RefMsgType):
        try:
            if self.thisown: destroy(self)
        except: pass

class RefMsgTypePtr(RefMsgType):
    def __init__(self, this):
        _swig_setattr(self, RefMsgType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RefMsgType, 'thisown', 0)
        _swig_setattr(self, RefMsgType,self.__class__,RefMsgType)
_quickfix.RefMsgType_swigregister(RefMsgTypePtr)

class SessionRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SessionRejectReason, name)
    def __repr__(self):
        return "<C FIX::SessionRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SessionRejectReason, 'this', _quickfix.new_SessionRejectReason(*args))
        _swig_setattr(self, SessionRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SessionRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class SessionRejectReasonPtr(SessionRejectReason):
    def __init__(self, this):
        _swig_setattr(self, SessionRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SessionRejectReason, 'thisown', 0)
        _swig_setattr(self, SessionRejectReason,self.__class__,SessionRejectReason)
_quickfix.SessionRejectReason_swigregister(SessionRejectReasonPtr)

class BidRequestTransType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidRequestTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidRequestTransType, name)
    def __repr__(self):
        return "<C FIX::BidRequestTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidRequestTransType, 'this', _quickfix.new_BidRequestTransType(*args))
        _swig_setattr(self, BidRequestTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidRequestTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidRequestTransTypePtr(BidRequestTransType):
    def __init__(self, this):
        _swig_setattr(self, BidRequestTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidRequestTransType, 'thisown', 0)
        _swig_setattr(self, BidRequestTransType,self.__class__,BidRequestTransType)
_quickfix.BidRequestTransType_swigregister(BidRequestTransTypePtr)

class ContraBroker(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraBroker, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContraBroker, name)
    def __repr__(self):
        return "<C FIX::ContraBroker instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContraBroker, 'this', _quickfix.new_ContraBroker(*args))
        _swig_setattr(self, ContraBroker, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContraBroker):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContraBrokerPtr(ContraBroker):
    def __init__(self, this):
        _swig_setattr(self, ContraBroker, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContraBroker, 'thisown', 0)
        _swig_setattr(self, ContraBroker,self.__class__,ContraBroker)
_quickfix.ContraBroker_swigregister(ContraBrokerPtr)

class ComplianceID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplianceID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ComplianceID, name)
    def __repr__(self):
        return "<C FIX::ComplianceID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ComplianceID, 'this', _quickfix.new_ComplianceID(*args))
        _swig_setattr(self, ComplianceID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ComplianceID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ComplianceIDPtr(ComplianceID):
    def __init__(self, this):
        _swig_setattr(self, ComplianceID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ComplianceID, 'thisown', 0)
        _swig_setattr(self, ComplianceID,self.__class__,ComplianceID)
_quickfix.ComplianceID_swigregister(ComplianceIDPtr)

class SolicitedFlag(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolicitedFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SolicitedFlag, name)
    def __repr__(self):
        return "<C FIX::SolicitedFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SolicitedFlag, 'this', _quickfix.new_SolicitedFlag(*args))
        _swig_setattr(self, SolicitedFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SolicitedFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class SolicitedFlagPtr(SolicitedFlag):
    def __init__(self, this):
        _swig_setattr(self, SolicitedFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SolicitedFlag, 'thisown', 0)
        _swig_setattr(self, SolicitedFlag,self.__class__,SolicitedFlag)
_quickfix.SolicitedFlag_swigregister(SolicitedFlagPtr)

class ExecRestatementReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecRestatementReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecRestatementReason, name)
    def __repr__(self):
        return "<C FIX::ExecRestatementReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecRestatementReason, 'this', _quickfix.new_ExecRestatementReason(*args))
        _swig_setattr(self, ExecRestatementReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecRestatementReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecRestatementReasonPtr(ExecRestatementReason):
    def __init__(self, this):
        _swig_setattr(self, ExecRestatementReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecRestatementReason, 'thisown', 0)
        _swig_setattr(self, ExecRestatementReason,self.__class__,ExecRestatementReason)
_quickfix.ExecRestatementReason_swigregister(ExecRestatementReasonPtr)

class BusinessRejectRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BusinessRejectRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BusinessRejectRefID, name)
    def __repr__(self):
        return "<C FIX::BusinessRejectRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BusinessRejectRefID, 'this', _quickfix.new_BusinessRejectRefID(*args))
        _swig_setattr(self, BusinessRejectRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BusinessRejectRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class BusinessRejectRefIDPtr(BusinessRejectRefID):
    def __init__(self, this):
        _swig_setattr(self, BusinessRejectRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BusinessRejectRefID, 'thisown', 0)
        _swig_setattr(self, BusinessRejectRefID,self.__class__,BusinessRejectRefID)
_quickfix.BusinessRejectRefID_swigregister(BusinessRejectRefIDPtr)

class BusinessRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BusinessRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BusinessRejectReason, name)
    def __repr__(self):
        return "<C FIX::BusinessRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BusinessRejectReason, 'this', _quickfix.new_BusinessRejectReason(*args))
        _swig_setattr(self, BusinessRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BusinessRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class BusinessRejectReasonPtr(BusinessRejectReason):
    def __init__(self, this):
        _swig_setattr(self, BusinessRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BusinessRejectReason, 'thisown', 0)
        _swig_setattr(self, BusinessRejectReason,self.__class__,BusinessRejectReason)
_quickfix.BusinessRejectReason_swigregister(BusinessRejectReasonPtr)

class GrossTradeAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrossTradeAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, GrossTradeAmt, name)
    def __repr__(self):
        return "<C FIX::GrossTradeAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, GrossTradeAmt, 'this', _quickfix.new_GrossTradeAmt(*args))
        _swig_setattr(self, GrossTradeAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_GrossTradeAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class GrossTradeAmtPtr(GrossTradeAmt):
    def __init__(self, this):
        _swig_setattr(self, GrossTradeAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, GrossTradeAmt, 'thisown', 0)
        _swig_setattr(self, GrossTradeAmt,self.__class__,GrossTradeAmt)
_quickfix.GrossTradeAmt_swigregister(GrossTradeAmtPtr)

class NoContraBrokers(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoContraBrokers, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoContraBrokers, name)
    def __repr__(self):
        return "<C FIX::NoContraBrokers instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoContraBrokers, 'this', _quickfix.new_NoContraBrokers(*args))
        _swig_setattr(self, NoContraBrokers, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoContraBrokers):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoContraBrokersPtr(NoContraBrokers):
    def __init__(self, this):
        _swig_setattr(self, NoContraBrokers, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoContraBrokers, 'thisown', 0)
        _swig_setattr(self, NoContraBrokers,self.__class__,NoContraBrokers)
_quickfix.NoContraBrokers_swigregister(NoContraBrokersPtr)

class MaxMessageSize(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxMessageSize, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaxMessageSize, name)
    def __repr__(self):
        return "<C FIX::MaxMessageSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaxMessageSize, 'this', _quickfix.new_MaxMessageSize(*args))
        _swig_setattr(self, MaxMessageSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaxMessageSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaxMessageSizePtr(MaxMessageSize):
    def __init__(self, this):
        _swig_setattr(self, MaxMessageSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaxMessageSize, 'thisown', 0)
        _swig_setattr(self, MaxMessageSize,self.__class__,MaxMessageSize)
_quickfix.MaxMessageSize_swigregister(MaxMessageSizePtr)

class NoMsgTypes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMsgTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoMsgTypes, name)
    def __repr__(self):
        return "<C FIX::NoMsgTypes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoMsgTypes, 'this', _quickfix.new_NoMsgTypes(*args))
        _swig_setattr(self, NoMsgTypes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoMsgTypes):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoMsgTypesPtr(NoMsgTypes):
    def __init__(self, this):
        _swig_setattr(self, NoMsgTypes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoMsgTypes, 'thisown', 0)
        _swig_setattr(self, NoMsgTypes,self.__class__,NoMsgTypes)
_quickfix.NoMsgTypes_swigregister(NoMsgTypesPtr)

class MsgDirection(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MsgDirection, name)
    def __repr__(self):
        return "<C FIX::MsgDirection instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MsgDirection, 'this', _quickfix.new_MsgDirection(*args))
        _swig_setattr(self, MsgDirection, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MsgDirection):
        try:
            if self.thisown: destroy(self)
        except: pass

class MsgDirectionPtr(MsgDirection):
    def __init__(self, this):
        _swig_setattr(self, MsgDirection, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MsgDirection, 'thisown', 0)
        _swig_setattr(self, MsgDirection,self.__class__,MsgDirection)
_quickfix.MsgDirection_swigregister(MsgDirectionPtr)

class NoTradingSessions(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTradingSessions, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoTradingSessions, name)
    def __repr__(self):
        return "<C FIX::NoTradingSessions instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoTradingSessions, 'this', _quickfix.new_NoTradingSessions(*args))
        _swig_setattr(self, NoTradingSessions, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoTradingSessions):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoTradingSessionsPtr(NoTradingSessions):
    def __init__(self, this):
        _swig_setattr(self, NoTradingSessions, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoTradingSessions, 'thisown', 0)
        _swig_setattr(self, NoTradingSessions,self.__class__,NoTradingSessions)
_quickfix.NoTradingSessions_swigregister(NoTradingSessionsPtr)

class TotalVolumeTraded(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalVolumeTraded, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalVolumeTraded, name)
    def __repr__(self):
        return "<C FIX::TotalVolumeTraded instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalVolumeTraded, 'this', _quickfix.new_TotalVolumeTraded(*args))
        _swig_setattr(self, TotalVolumeTraded, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalVolumeTraded):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalVolumeTradedPtr(TotalVolumeTraded):
    def __init__(self, this):
        _swig_setattr(self, TotalVolumeTraded, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalVolumeTraded, 'thisown', 0)
        _swig_setattr(self, TotalVolumeTraded,self.__class__,TotalVolumeTraded)
_quickfix.TotalVolumeTraded_swigregister(TotalVolumeTradedPtr)

class DiscretionInst(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionInst, name)
    def __repr__(self):
        return "<C FIX::DiscretionInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionInst, 'this', _quickfix.new_DiscretionInst(*args))
        _swig_setattr(self, DiscretionInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionInstPtr(DiscretionInst):
    def __init__(self, this):
        _swig_setattr(self, DiscretionInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionInst, 'thisown', 0)
        _swig_setattr(self, DiscretionInst,self.__class__,DiscretionInst)
_quickfix.DiscretionInst_swigregister(DiscretionInstPtr)

class DiscretionOffsetValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffsetValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffsetValue, name)
    def __repr__(self):
        return "<C FIX::DiscretionOffsetValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionOffsetValue, 'this', _quickfix.new_DiscretionOffsetValue(*args))
        _swig_setattr(self, DiscretionOffsetValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionOffsetValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionOffsetValuePtr(DiscretionOffsetValue):
    def __init__(self, this):
        _swig_setattr(self, DiscretionOffsetValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionOffsetValue, 'thisown', 0)
        _swig_setattr(self, DiscretionOffsetValue,self.__class__,DiscretionOffsetValue)
_quickfix.DiscretionOffsetValue_swigregister(DiscretionOffsetValuePtr)

class BidID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidID, name)
    def __repr__(self):
        return "<C FIX::BidID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidID, 'this', _quickfix.new_BidID(*args))
        _swig_setattr(self, BidID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidID):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidIDPtr(BidID):
    def __init__(self, this):
        _swig_setattr(self, BidID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidID, 'thisown', 0)
        _swig_setattr(self, BidID,self.__class__,BidID)
_quickfix.BidID_swigregister(BidIDPtr)

class ClientBidID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientBidID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClientBidID, name)
    def __repr__(self):
        return "<C FIX::ClientBidID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClientBidID, 'this', _quickfix.new_ClientBidID(*args))
        _swig_setattr(self, ClientBidID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClientBidID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClientBidIDPtr(ClientBidID):
    def __init__(self, this):
        _swig_setattr(self, ClientBidID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClientBidID, 'thisown', 0)
        _swig_setattr(self, ClientBidID,self.__class__,ClientBidID)
_quickfix.ClientBidID_swigregister(ClientBidIDPtr)

class ListName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListName, name)
    def __repr__(self):
        return "<C FIX::ListName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListName, 'this', _quickfix.new_ListName(*args))
        _swig_setattr(self, ListName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListName):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListNamePtr(ListName):
    def __init__(self, this):
        _swig_setattr(self, ListName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListName, 'thisown', 0)
        _swig_setattr(self, ListName,self.__class__,ListName)
_quickfix.ListName_swigregister(ListNamePtr)

class TotNoRelatedSym(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoRelatedSym, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoRelatedSym, name)
    def __repr__(self):
        return "<C FIX::TotNoRelatedSym instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNoRelatedSym, 'this', _quickfix.new_TotNoRelatedSym(*args))
        _swig_setattr(self, TotNoRelatedSym, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNoRelatedSym):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNoRelatedSymPtr(TotNoRelatedSym):
    def __init__(self, this):
        _swig_setattr(self, TotNoRelatedSym, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNoRelatedSym, 'thisown', 0)
        _swig_setattr(self, TotNoRelatedSym,self.__class__,TotNoRelatedSym)
_quickfix.TotNoRelatedSym_swigregister(TotNoRelatedSymPtr)

class BidType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidType, name)
    def __repr__(self):
        return "<C FIX::BidType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidType, 'this', _quickfix.new_BidType(*args))
        _swig_setattr(self, BidType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidTypePtr(BidType):
    def __init__(self, this):
        _swig_setattr(self, BidType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidType, 'thisown', 0)
        _swig_setattr(self, BidType,self.__class__,BidType)
_quickfix.BidType_swigregister(BidTypePtr)

class NumTickets(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumTickets, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NumTickets, name)
    def __repr__(self):
        return "<C FIX::NumTickets instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NumTickets, 'this', _quickfix.new_NumTickets(*args))
        _swig_setattr(self, NumTickets, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NumTickets):
        try:
            if self.thisown: destroy(self)
        except: pass

class NumTicketsPtr(NumTickets):
    def __init__(self, this):
        _swig_setattr(self, NumTickets, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NumTickets, 'thisown', 0)
        _swig_setattr(self, NumTickets,self.__class__,NumTickets)
_quickfix.NumTickets_swigregister(NumTicketsPtr)

class SideValue1(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideValue1, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SideValue1, name)
    def __repr__(self):
        return "<C FIX::SideValue1 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SideValue1, 'this', _quickfix.new_SideValue1(*args))
        _swig_setattr(self, SideValue1, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SideValue1):
        try:
            if self.thisown: destroy(self)
        except: pass

class SideValue1Ptr(SideValue1):
    def __init__(self, this):
        _swig_setattr(self, SideValue1, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SideValue1, 'thisown', 0)
        _swig_setattr(self, SideValue1,self.__class__,SideValue1)
_quickfix.SideValue1_swigregister(SideValue1Ptr)

class SideValue2(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideValue2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SideValue2, name)
    def __repr__(self):
        return "<C FIX::SideValue2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SideValue2, 'this', _quickfix.new_SideValue2(*args))
        _swig_setattr(self, SideValue2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SideValue2):
        try:
            if self.thisown: destroy(self)
        except: pass

class SideValue2Ptr(SideValue2):
    def __init__(self, this):
        _swig_setattr(self, SideValue2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SideValue2, 'thisown', 0)
        _swig_setattr(self, SideValue2,self.__class__,SideValue2)
_quickfix.SideValue2_swigregister(SideValue2Ptr)

class NoBidDescriptors(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoBidDescriptors, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoBidDescriptors, name)
    def __repr__(self):
        return "<C FIX::NoBidDescriptors instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoBidDescriptors, 'this', _quickfix.new_NoBidDescriptors(*args))
        _swig_setattr(self, NoBidDescriptors, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoBidDescriptors):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoBidDescriptorsPtr(NoBidDescriptors):
    def __init__(self, this):
        _swig_setattr(self, NoBidDescriptors, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoBidDescriptors, 'thisown', 0)
        _swig_setattr(self, NoBidDescriptors,self.__class__,NoBidDescriptors)
_quickfix.NoBidDescriptors_swigregister(NoBidDescriptorsPtr)

class BidDescriptorType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidDescriptorType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidDescriptorType, name)
    def __repr__(self):
        return "<C FIX::BidDescriptorType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidDescriptorType, 'this', _quickfix.new_BidDescriptorType(*args))
        _swig_setattr(self, BidDescriptorType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidDescriptorType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidDescriptorTypePtr(BidDescriptorType):
    def __init__(self, this):
        _swig_setattr(self, BidDescriptorType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidDescriptorType, 'thisown', 0)
        _swig_setattr(self, BidDescriptorType,self.__class__,BidDescriptorType)
_quickfix.BidDescriptorType_swigregister(BidDescriptorTypePtr)

class BidDescriptor(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidDescriptor, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidDescriptor, name)
    def __repr__(self):
        return "<C FIX::BidDescriptor instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidDescriptor, 'this', _quickfix.new_BidDescriptor(*args))
        _swig_setattr(self, BidDescriptor, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidDescriptor):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidDescriptorPtr(BidDescriptor):
    def __init__(self, this):
        _swig_setattr(self, BidDescriptor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidDescriptor, 'thisown', 0)
        _swig_setattr(self, BidDescriptor,self.__class__,BidDescriptor)
_quickfix.BidDescriptor_swigregister(BidDescriptorPtr)

class SideValueInd(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideValueInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SideValueInd, name)
    def __repr__(self):
        return "<C FIX::SideValueInd instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SideValueInd, 'this', _quickfix.new_SideValueInd(*args))
        _swig_setattr(self, SideValueInd, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SideValueInd):
        try:
            if self.thisown: destroy(self)
        except: pass

class SideValueIndPtr(SideValueInd):
    def __init__(self, this):
        _swig_setattr(self, SideValueInd, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SideValueInd, 'thisown', 0)
        _swig_setattr(self, SideValueInd,self.__class__,SideValueInd)
_quickfix.SideValueInd_swigregister(SideValueIndPtr)

class LiquidityPctLow(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityPctLow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityPctLow, name)
    def __repr__(self):
        return "<C FIX::LiquidityPctLow instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LiquidityPctLow, 'this', _quickfix.new_LiquidityPctLow(*args))
        _swig_setattr(self, LiquidityPctLow, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LiquidityPctLow):
        try:
            if self.thisown: destroy(self)
        except: pass

class LiquidityPctLowPtr(LiquidityPctLow):
    def __init__(self, this):
        _swig_setattr(self, LiquidityPctLow, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LiquidityPctLow, 'thisown', 0)
        _swig_setattr(self, LiquidityPctLow,self.__class__,LiquidityPctLow)
_quickfix.LiquidityPctLow_swigregister(LiquidityPctLowPtr)

class LiquidityPctHigh(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityPctHigh, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityPctHigh, name)
    def __repr__(self):
        return "<C FIX::LiquidityPctHigh instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LiquidityPctHigh, 'this', _quickfix.new_LiquidityPctHigh(*args))
        _swig_setattr(self, LiquidityPctHigh, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LiquidityPctHigh):
        try:
            if self.thisown: destroy(self)
        except: pass

class LiquidityPctHighPtr(LiquidityPctHigh):
    def __init__(self, this):
        _swig_setattr(self, LiquidityPctHigh, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LiquidityPctHigh, 'thisown', 0)
        _swig_setattr(self, LiquidityPctHigh,self.__class__,LiquidityPctHigh)
_quickfix.LiquidityPctHigh_swigregister(LiquidityPctHighPtr)

class LiquidityValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityValue, name)
    def __repr__(self):
        return "<C FIX::LiquidityValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LiquidityValue, 'this', _quickfix.new_LiquidityValue(*args))
        _swig_setattr(self, LiquidityValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LiquidityValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class LiquidityValuePtr(LiquidityValue):
    def __init__(self, this):
        _swig_setattr(self, LiquidityValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LiquidityValue, 'thisown', 0)
        _swig_setattr(self, LiquidityValue,self.__class__,LiquidityValue)
_quickfix.LiquidityValue_swigregister(LiquidityValuePtr)

class EFPTrackingError(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EFPTrackingError, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EFPTrackingError, name)
    def __repr__(self):
        return "<C FIX::EFPTrackingError instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EFPTrackingError, 'this', _quickfix.new_EFPTrackingError(*args))
        _swig_setattr(self, EFPTrackingError, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EFPTrackingError):
        try:
            if self.thisown: destroy(self)
        except: pass

class EFPTrackingErrorPtr(EFPTrackingError):
    def __init__(self, this):
        _swig_setattr(self, EFPTrackingError, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EFPTrackingError, 'thisown', 0)
        _swig_setattr(self, EFPTrackingError,self.__class__,EFPTrackingError)
_quickfix.EFPTrackingError_swigregister(EFPTrackingErrorPtr)

class FairValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FairValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FairValue, name)
    def __repr__(self):
        return "<C FIX::FairValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FairValue, 'this', _quickfix.new_FairValue(*args))
        _swig_setattr(self, FairValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FairValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class FairValuePtr(FairValue):
    def __init__(self, this):
        _swig_setattr(self, FairValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FairValue, 'thisown', 0)
        _swig_setattr(self, FairValue,self.__class__,FairValue)
_quickfix.FairValue_swigregister(FairValuePtr)

class OutsideIndexPct(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutsideIndexPct, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OutsideIndexPct, name)
    def __repr__(self):
        return "<C FIX::OutsideIndexPct instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OutsideIndexPct, 'this', _quickfix.new_OutsideIndexPct(*args))
        _swig_setattr(self, OutsideIndexPct, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OutsideIndexPct):
        try:
            if self.thisown: destroy(self)
        except: pass

class OutsideIndexPctPtr(OutsideIndexPct):
    def __init__(self, this):
        _swig_setattr(self, OutsideIndexPct, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OutsideIndexPct, 'thisown', 0)
        _swig_setattr(self, OutsideIndexPct,self.__class__,OutsideIndexPct)
_quickfix.OutsideIndexPct_swigregister(OutsideIndexPctPtr)

class ValueOfFutures(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueOfFutures, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ValueOfFutures, name)
    def __repr__(self):
        return "<C FIX::ValueOfFutures instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ValueOfFutures, 'this', _quickfix.new_ValueOfFutures(*args))
        _swig_setattr(self, ValueOfFutures, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ValueOfFutures):
        try:
            if self.thisown: destroy(self)
        except: pass

class ValueOfFuturesPtr(ValueOfFutures):
    def __init__(self, this):
        _swig_setattr(self, ValueOfFutures, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ValueOfFutures, 'thisown', 0)
        _swig_setattr(self, ValueOfFutures,self.__class__,ValueOfFutures)
_quickfix.ValueOfFutures_swigregister(ValueOfFuturesPtr)

class LiquidityIndType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityIndType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityIndType, name)
    def __repr__(self):
        return "<C FIX::LiquidityIndType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LiquidityIndType, 'this', _quickfix.new_LiquidityIndType(*args))
        _swig_setattr(self, LiquidityIndType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LiquidityIndType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LiquidityIndTypePtr(LiquidityIndType):
    def __init__(self, this):
        _swig_setattr(self, LiquidityIndType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LiquidityIndType, 'thisown', 0)
        _swig_setattr(self, LiquidityIndType,self.__class__,LiquidityIndType)
_quickfix.LiquidityIndType_swigregister(LiquidityIndTypePtr)

class WtAverageLiquidity(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, WtAverageLiquidity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, WtAverageLiquidity, name)
    def __repr__(self):
        return "<C FIX::WtAverageLiquidity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, WtAverageLiquidity, 'this', _quickfix.new_WtAverageLiquidity(*args))
        _swig_setattr(self, WtAverageLiquidity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_WtAverageLiquidity):
        try:
            if self.thisown: destroy(self)
        except: pass

class WtAverageLiquidityPtr(WtAverageLiquidity):
    def __init__(self, this):
        _swig_setattr(self, WtAverageLiquidity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, WtAverageLiquidity, 'thisown', 0)
        _swig_setattr(self, WtAverageLiquidity,self.__class__,WtAverageLiquidity)
_quickfix.WtAverageLiquidity_swigregister(WtAverageLiquidityPtr)

class ExchangeForPhysical(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeForPhysical, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeForPhysical, name)
    def __repr__(self):
        return "<C FIX::ExchangeForPhysical instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExchangeForPhysical, 'this', _quickfix.new_ExchangeForPhysical(*args))
        _swig_setattr(self, ExchangeForPhysical, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExchangeForPhysical):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExchangeForPhysicalPtr(ExchangeForPhysical):
    def __init__(self, this):
        _swig_setattr(self, ExchangeForPhysical, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExchangeForPhysical, 'thisown', 0)
        _swig_setattr(self, ExchangeForPhysical,self.__class__,ExchangeForPhysical)
_quickfix.ExchangeForPhysical_swigregister(ExchangeForPhysicalPtr)

class OutMainCntryUIndex(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutMainCntryUIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OutMainCntryUIndex, name)
    def __repr__(self):
        return "<C FIX::OutMainCntryUIndex instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OutMainCntryUIndex, 'this', _quickfix.new_OutMainCntryUIndex(*args))
        _swig_setattr(self, OutMainCntryUIndex, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OutMainCntryUIndex):
        try:
            if self.thisown: destroy(self)
        except: pass

class OutMainCntryUIndexPtr(OutMainCntryUIndex):
    def __init__(self, this):
        _swig_setattr(self, OutMainCntryUIndex, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OutMainCntryUIndex, 'thisown', 0)
        _swig_setattr(self, OutMainCntryUIndex,self.__class__,OutMainCntryUIndex)
_quickfix.OutMainCntryUIndex_swigregister(OutMainCntryUIndexPtr)

class CrossPercent(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossPercent, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CrossPercent, name)
    def __repr__(self):
        return "<C FIX::CrossPercent instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CrossPercent, 'this', _quickfix.new_CrossPercent(*args))
        _swig_setattr(self, CrossPercent, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CrossPercent):
        try:
            if self.thisown: destroy(self)
        except: pass

class CrossPercentPtr(CrossPercent):
    def __init__(self, this):
        _swig_setattr(self, CrossPercent, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CrossPercent, 'thisown', 0)
        _swig_setattr(self, CrossPercent,self.__class__,CrossPercent)
_quickfix.CrossPercent_swigregister(CrossPercentPtr)

class ProgRptReqs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgRptReqs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ProgRptReqs, name)
    def __repr__(self):
        return "<C FIX::ProgRptReqs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ProgRptReqs, 'this', _quickfix.new_ProgRptReqs(*args))
        _swig_setattr(self, ProgRptReqs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ProgRptReqs):
        try:
            if self.thisown: destroy(self)
        except: pass

class ProgRptReqsPtr(ProgRptReqs):
    def __init__(self, this):
        _swig_setattr(self, ProgRptReqs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ProgRptReqs, 'thisown', 0)
        _swig_setattr(self, ProgRptReqs,self.__class__,ProgRptReqs)
_quickfix.ProgRptReqs_swigregister(ProgRptReqsPtr)

class ProgPeriodInterval(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgPeriodInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ProgPeriodInterval, name)
    def __repr__(self):
        return "<C FIX::ProgPeriodInterval instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ProgPeriodInterval, 'this', _quickfix.new_ProgPeriodInterval(*args))
        _swig_setattr(self, ProgPeriodInterval, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ProgPeriodInterval):
        try:
            if self.thisown: destroy(self)
        except: pass

class ProgPeriodIntervalPtr(ProgPeriodInterval):
    def __init__(self, this):
        _swig_setattr(self, ProgPeriodInterval, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ProgPeriodInterval, 'thisown', 0)
        _swig_setattr(self, ProgPeriodInterval,self.__class__,ProgPeriodInterval)
_quickfix.ProgPeriodInterval_swigregister(ProgPeriodIntervalPtr)

class IncTaxInd(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncTaxInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IncTaxInd, name)
    def __repr__(self):
        return "<C FIX::IncTaxInd instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IncTaxInd, 'this', _quickfix.new_IncTaxInd(*args))
        _swig_setattr(self, IncTaxInd, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IncTaxInd):
        try:
            if self.thisown: destroy(self)
        except: pass

class IncTaxIndPtr(IncTaxInd):
    def __init__(self, this):
        _swig_setattr(self, IncTaxInd, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IncTaxInd, 'thisown', 0)
        _swig_setattr(self, IncTaxInd,self.__class__,IncTaxInd)
_quickfix.IncTaxInd_swigregister(IncTaxIndPtr)

class NumBidders(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumBidders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NumBidders, name)
    def __repr__(self):
        return "<C FIX::NumBidders instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NumBidders, 'this', _quickfix.new_NumBidders(*args))
        _swig_setattr(self, NumBidders, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NumBidders):
        try:
            if self.thisown: destroy(self)
        except: pass

class NumBiddersPtr(NumBidders):
    def __init__(self, this):
        _swig_setattr(self, NumBidders, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NumBidders, 'thisown', 0)
        _swig_setattr(self, NumBidders,self.__class__,NumBidders)
_quickfix.NumBidders_swigregister(NumBiddersPtr)

class BidTradeType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidTradeType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidTradeType, name)
    def __repr__(self):
        return "<C FIX::BidTradeType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidTradeType, 'this', _quickfix.new_BidTradeType(*args))
        _swig_setattr(self, BidTradeType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidTradeType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidTradeTypePtr(BidTradeType):
    def __init__(self, this):
        _swig_setattr(self, BidTradeType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidTradeType, 'thisown', 0)
        _swig_setattr(self, BidTradeType,self.__class__,BidTradeType)
_quickfix.BidTradeType_swigregister(BidTradeTypePtr)

class BasisPxType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisPxType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BasisPxType, name)
    def __repr__(self):
        return "<C FIX::BasisPxType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BasisPxType, 'this', _quickfix.new_BasisPxType(*args))
        _swig_setattr(self, BasisPxType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BasisPxType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BasisPxTypePtr(BasisPxType):
    def __init__(self, this):
        _swig_setattr(self, BasisPxType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BasisPxType, 'thisown', 0)
        _swig_setattr(self, BasisPxType,self.__class__,BasisPxType)
_quickfix.BasisPxType_swigregister(BasisPxTypePtr)

class NoBidComponents(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoBidComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoBidComponents, name)
    def __repr__(self):
        return "<C FIX::NoBidComponents instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoBidComponents, 'this', _quickfix.new_NoBidComponents(*args))
        _swig_setattr(self, NoBidComponents, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoBidComponents):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoBidComponentsPtr(NoBidComponents):
    def __init__(self, this):
        _swig_setattr(self, NoBidComponents, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoBidComponents, 'thisown', 0)
        _swig_setattr(self, NoBidComponents,self.__class__,NoBidComponents)
_quickfix.NoBidComponents_swigregister(NoBidComponentsPtr)

class Country(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Country, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Country, name)
    def __repr__(self):
        return "<C FIX::Country instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Country, 'this', _quickfix.new_Country(*args))
        _swig_setattr(self, Country, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Country):
        try:
            if self.thisown: destroy(self)
        except: pass

class CountryPtr(Country):
    def __init__(self, this):
        _swig_setattr(self, Country, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Country, 'thisown', 0)
        _swig_setattr(self, Country,self.__class__,Country)
_quickfix.Country_swigregister(CountryPtr)

class TotNoStrikes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoStrikes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoStrikes, name)
    def __repr__(self):
        return "<C FIX::TotNoStrikes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNoStrikes, 'this', _quickfix.new_TotNoStrikes(*args))
        _swig_setattr(self, TotNoStrikes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNoStrikes):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNoStrikesPtr(TotNoStrikes):
    def __init__(self, this):
        _swig_setattr(self, TotNoStrikes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNoStrikes, 'thisown', 0)
        _swig_setattr(self, TotNoStrikes,self.__class__,TotNoStrikes)
_quickfix.TotNoStrikes_swigregister(TotNoStrikesPtr)

class PriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PriceType, name)
    def __repr__(self):
        return "<C FIX::PriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PriceType, 'this', _quickfix.new_PriceType(*args))
        _swig_setattr(self, PriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PriceTypePtr(PriceType):
    def __init__(self, this):
        _swig_setattr(self, PriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PriceType, 'thisown', 0)
        _swig_setattr(self, PriceType,self.__class__,PriceType)
_quickfix.PriceType_swigregister(PriceTypePtr)

class DayOrderQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayOrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DayOrderQty, name)
    def __repr__(self):
        return "<C FIX::DayOrderQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DayOrderQty, 'this', _quickfix.new_DayOrderQty(*args))
        _swig_setattr(self, DayOrderQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DayOrderQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class DayOrderQtyPtr(DayOrderQty):
    def __init__(self, this):
        _swig_setattr(self, DayOrderQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DayOrderQty, 'thisown', 0)
        _swig_setattr(self, DayOrderQty,self.__class__,DayOrderQty)
_quickfix.DayOrderQty_swigregister(DayOrderQtyPtr)

class DayCumQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayCumQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DayCumQty, name)
    def __repr__(self):
        return "<C FIX::DayCumQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DayCumQty, 'this', _quickfix.new_DayCumQty(*args))
        _swig_setattr(self, DayCumQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DayCumQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class DayCumQtyPtr(DayCumQty):
    def __init__(self, this):
        _swig_setattr(self, DayCumQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DayCumQty, 'thisown', 0)
        _swig_setattr(self, DayCumQty,self.__class__,DayCumQty)
_quickfix.DayCumQty_swigregister(DayCumQtyPtr)

class DayAvgPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayAvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DayAvgPx, name)
    def __repr__(self):
        return "<C FIX::DayAvgPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DayAvgPx, 'this', _quickfix.new_DayAvgPx(*args))
        _swig_setattr(self, DayAvgPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DayAvgPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class DayAvgPxPtr(DayAvgPx):
    def __init__(self, this):
        _swig_setattr(self, DayAvgPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DayAvgPx, 'thisown', 0)
        _swig_setattr(self, DayAvgPx,self.__class__,DayAvgPx)
_quickfix.DayAvgPx_swigregister(DayAvgPxPtr)

class GTBookingInst(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, GTBookingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, GTBookingInst, name)
    def __repr__(self):
        return "<C FIX::GTBookingInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, GTBookingInst, 'this', _quickfix.new_GTBookingInst(*args))
        _swig_setattr(self, GTBookingInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_GTBookingInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class GTBookingInstPtr(GTBookingInst):
    def __init__(self, this):
        _swig_setattr(self, GTBookingInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, GTBookingInst, 'thisown', 0)
        _swig_setattr(self, GTBookingInst,self.__class__,GTBookingInst)
_quickfix.GTBookingInst_swigregister(GTBookingInstPtr)

class NoStrikes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStrikes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoStrikes, name)
    def __repr__(self):
        return "<C FIX::NoStrikes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoStrikes, 'this', _quickfix.new_NoStrikes(*args))
        _swig_setattr(self, NoStrikes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoStrikes):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoStrikesPtr(NoStrikes):
    def __init__(self, this):
        _swig_setattr(self, NoStrikes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoStrikes, 'thisown', 0)
        _swig_setattr(self, NoStrikes,self.__class__,NoStrikes)
_quickfix.NoStrikes_swigregister(NoStrikesPtr)

class ListStatusType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListStatusType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListStatusType, name)
    def __repr__(self):
        return "<C FIX::ListStatusType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListStatusType, 'this', _quickfix.new_ListStatusType(*args))
        _swig_setattr(self, ListStatusType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListStatusType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListStatusTypePtr(ListStatusType):
    def __init__(self, this):
        _swig_setattr(self, ListStatusType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListStatusType, 'thisown', 0)
        _swig_setattr(self, ListStatusType,self.__class__,ListStatusType)
_quickfix.ListStatusType_swigregister(ListStatusTypePtr)

class NetGrossInd(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetGrossInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetGrossInd, name)
    def __repr__(self):
        return "<C FIX::NetGrossInd instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetGrossInd, 'this', _quickfix.new_NetGrossInd(*args))
        _swig_setattr(self, NetGrossInd, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetGrossInd):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetGrossIndPtr(NetGrossInd):
    def __init__(self, this):
        _swig_setattr(self, NetGrossInd, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetGrossInd, 'thisown', 0)
        _swig_setattr(self, NetGrossInd,self.__class__,NetGrossInd)
_quickfix.NetGrossInd_swigregister(NetGrossIndPtr)

class ListOrderStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOrderStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListOrderStatus, name)
    def __repr__(self):
        return "<C FIX::ListOrderStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListOrderStatus, 'this', _quickfix.new_ListOrderStatus(*args))
        _swig_setattr(self, ListOrderStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListOrderStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListOrderStatusPtr(ListOrderStatus):
    def __init__(self, this):
        _swig_setattr(self, ListOrderStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListOrderStatus, 'thisown', 0)
        _swig_setattr(self, ListOrderStatus,self.__class__,ListOrderStatus)
_quickfix.ListOrderStatus_swigregister(ListOrderStatusPtr)

class ExpireDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpireDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExpireDate, name)
    def __repr__(self):
        return "<C FIX::ExpireDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExpireDate, 'this', _quickfix.new_ExpireDate(*args))
        _swig_setattr(self, ExpireDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExpireDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExpireDatePtr(ExpireDate):
    def __init__(self, this):
        _swig_setattr(self, ExpireDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExpireDate, 'thisown', 0)
        _swig_setattr(self, ExpireDate,self.__class__,ExpireDate)
_quickfix.ExpireDate_swigregister(ExpireDatePtr)

class ListExecInstType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListExecInstType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListExecInstType, name)
    def __repr__(self):
        return "<C FIX::ListExecInstType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListExecInstType, 'this', _quickfix.new_ListExecInstType(*args))
        _swig_setattr(self, ListExecInstType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListExecInstType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListExecInstTypePtr(ListExecInstType):
    def __init__(self, this):
        _swig_setattr(self, ListExecInstType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListExecInstType, 'thisown', 0)
        _swig_setattr(self, ListExecInstType,self.__class__,ListExecInstType)
_quickfix.ListExecInstType_swigregister(ListExecInstTypePtr)

class CxlRejResponseTo(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlRejResponseTo, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CxlRejResponseTo, name)
    def __repr__(self):
        return "<C FIX::CxlRejResponseTo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CxlRejResponseTo, 'this', _quickfix.new_CxlRejResponseTo(*args))
        _swig_setattr(self, CxlRejResponseTo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CxlRejResponseTo):
        try:
            if self.thisown: destroy(self)
        except: pass

class CxlRejResponseToPtr(CxlRejResponseTo):
    def __init__(self, this):
        _swig_setattr(self, CxlRejResponseTo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CxlRejResponseTo, 'thisown', 0)
        _swig_setattr(self, CxlRejResponseTo,self.__class__,CxlRejResponseTo)
_quickfix.CxlRejResponseTo_swigregister(CxlRejResponseToPtr)

class UnderlyingCouponRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCouponRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCouponRate, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCouponRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCouponRate, 'this', _quickfix.new_UnderlyingCouponRate(*args))
        _swig_setattr(self, UnderlyingCouponRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCouponRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCouponRatePtr(UnderlyingCouponRate):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCouponRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCouponRate, 'thisown', 0)
        _swig_setattr(self, UnderlyingCouponRate,self.__class__,UnderlyingCouponRate)
_quickfix.UnderlyingCouponRate_swigregister(UnderlyingCouponRatePtr)

class UnderlyingContractMultiplier(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingContractMultiplier, name)
    def __repr__(self):
        return "<C FIX::UnderlyingContractMultiplier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingContractMultiplier, 'this', _quickfix.new_UnderlyingContractMultiplier(*args))
        _swig_setattr(self, UnderlyingContractMultiplier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingContractMultiplier):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingContractMultiplierPtr(UnderlyingContractMultiplier):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingContractMultiplier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingContractMultiplier, 'thisown', 0)
        _swig_setattr(self, UnderlyingContractMultiplier,self.__class__,UnderlyingContractMultiplier)
_quickfix.UnderlyingContractMultiplier_swigregister(UnderlyingContractMultiplierPtr)

class ContraTradeQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraTradeQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContraTradeQty, name)
    def __repr__(self):
        return "<C FIX::ContraTradeQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContraTradeQty, 'this', _quickfix.new_ContraTradeQty(*args))
        _swig_setattr(self, ContraTradeQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContraTradeQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContraTradeQtyPtr(ContraTradeQty):
    def __init__(self, this):
        _swig_setattr(self, ContraTradeQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContraTradeQty, 'thisown', 0)
        _swig_setattr(self, ContraTradeQty,self.__class__,ContraTradeQty)
_quickfix.ContraTradeQty_swigregister(ContraTradeQtyPtr)

class ContraTradeTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraTradeTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContraTradeTime, name)
    def __repr__(self):
        return "<C FIX::ContraTradeTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContraTradeTime, 'this', _quickfix.new_ContraTradeTime(*args))
        _swig_setattr(self, ContraTradeTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContraTradeTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContraTradeTimePtr(ContraTradeTime):
    def __init__(self, this):
        _swig_setattr(self, ContraTradeTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContraTradeTime, 'thisown', 0)
        _swig_setattr(self, ContraTradeTime,self.__class__,ContraTradeTime)
_quickfix.ContraTradeTime_swigregister(ContraTradeTimePtr)

class LiquidityNumSecurities(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityNumSecurities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityNumSecurities, name)
    def __repr__(self):
        return "<C FIX::LiquidityNumSecurities instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LiquidityNumSecurities, 'this', _quickfix.new_LiquidityNumSecurities(*args))
        _swig_setattr(self, LiquidityNumSecurities, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LiquidityNumSecurities):
        try:
            if self.thisown: destroy(self)
        except: pass

class LiquidityNumSecuritiesPtr(LiquidityNumSecurities):
    def __init__(self, this):
        _swig_setattr(self, LiquidityNumSecurities, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LiquidityNumSecurities, 'thisown', 0)
        _swig_setattr(self, LiquidityNumSecurities,self.__class__,LiquidityNumSecurities)
_quickfix.LiquidityNumSecurities_swigregister(LiquidityNumSecuritiesPtr)

class MultiLegReportingType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLegReportingType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLegReportingType, name)
    def __repr__(self):
        return "<C FIX::MultiLegReportingType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MultiLegReportingType, 'this', _quickfix.new_MultiLegReportingType(*args))
        _swig_setattr(self, MultiLegReportingType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MultiLegReportingType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MultiLegReportingTypePtr(MultiLegReportingType):
    def __init__(self, this):
        _swig_setattr(self, MultiLegReportingType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MultiLegReportingType, 'thisown', 0)
        _swig_setattr(self, MultiLegReportingType,self.__class__,MultiLegReportingType)
_quickfix.MultiLegReportingType_swigregister(MultiLegReportingTypePtr)

class StrikeTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeTime, name)
    def __repr__(self):
        return "<C FIX::StrikeTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StrikeTime, 'this', _quickfix.new_StrikeTime(*args))
        _swig_setattr(self, StrikeTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StrikeTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class StrikeTimePtr(StrikeTime):
    def __init__(self, this):
        _swig_setattr(self, StrikeTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StrikeTime, 'thisown', 0)
        _swig_setattr(self, StrikeTime,self.__class__,StrikeTime)
_quickfix.StrikeTime_swigregister(StrikeTimePtr)

class ListStatusText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListStatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ListStatusText, name)
    def __repr__(self):
        return "<C FIX::ListStatusText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ListStatusText, 'this', _quickfix.new_ListStatusText(*args))
        _swig_setattr(self, ListStatusText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ListStatusText):
        try:
            if self.thisown: destroy(self)
        except: pass

class ListStatusTextPtr(ListStatusText):
    def __init__(self, this):
        _swig_setattr(self, ListStatusText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ListStatusText, 'thisown', 0)
        _swig_setattr(self, ListStatusText,self.__class__,ListStatusText)
_quickfix.ListStatusText_swigregister(ListStatusTextPtr)

class EncodedListStatusTextLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListStatusTextLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListStatusTextLen, name)
    def __repr__(self):
        return "<C FIX::EncodedListStatusTextLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedListStatusTextLen, 'this', _quickfix.new_EncodedListStatusTextLen(*args))
        _swig_setattr(self, EncodedListStatusTextLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedListStatusTextLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedListStatusTextLenPtr(EncodedListStatusTextLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedListStatusTextLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedListStatusTextLen, 'thisown', 0)
        _swig_setattr(self, EncodedListStatusTextLen,self.__class__,EncodedListStatusTextLen)
_quickfix.EncodedListStatusTextLen_swigregister(EncodedListStatusTextLenPtr)

class EncodedListStatusText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListStatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListStatusText, name)
    def __repr__(self):
        return "<C FIX::EncodedListStatusText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedListStatusText, 'this', _quickfix.new_EncodedListStatusText(*args))
        _swig_setattr(self, EncodedListStatusText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedListStatusText):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedListStatusTextPtr(EncodedListStatusText):
    def __init__(self, this):
        _swig_setattr(self, EncodedListStatusText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedListStatusText, 'thisown', 0)
        _swig_setattr(self, EncodedListStatusText,self.__class__,EncodedListStatusText)
_quickfix.EncodedListStatusText_swigregister(EncodedListStatusTextPtr)

class PartyIDSource(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PartyIDSource, name)
    def __repr__(self):
        return "<C FIX::PartyIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PartyIDSource, 'this', _quickfix.new_PartyIDSource(*args))
        _swig_setattr(self, PartyIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PartyIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class PartyIDSourcePtr(PartyIDSource):
    def __init__(self, this):
        _swig_setattr(self, PartyIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PartyIDSource, 'thisown', 0)
        _swig_setattr(self, PartyIDSource,self.__class__,PartyIDSource)
_quickfix.PartyIDSource_swigregister(PartyIDSourcePtr)

class PartyID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PartyID, name)
    def __repr__(self):
        return "<C FIX::PartyID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PartyID, 'this', _quickfix.new_PartyID(*args))
        _swig_setattr(self, PartyID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PartyID):
        try:
            if self.thisown: destroy(self)
        except: pass

class PartyIDPtr(PartyID):
    def __init__(self, this):
        _swig_setattr(self, PartyID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PartyID, 'thisown', 0)
        _swig_setattr(self, PartyID,self.__class__,PartyID)
_quickfix.PartyID_swigregister(PartyIDPtr)

class NetChgPrevDay(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetChgPrevDay, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetChgPrevDay, name)
    def __repr__(self):
        return "<C FIX::NetChgPrevDay instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetChgPrevDay, 'this', _quickfix.new_NetChgPrevDay(*args))
        _swig_setattr(self, NetChgPrevDay, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetChgPrevDay):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetChgPrevDayPtr(NetChgPrevDay):
    def __init__(self, this):
        _swig_setattr(self, NetChgPrevDay, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetChgPrevDay, 'thisown', 0)
        _swig_setattr(self, NetChgPrevDay,self.__class__,NetChgPrevDay)
_quickfix.NetChgPrevDay_swigregister(NetChgPrevDayPtr)

class PartyRole(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PartyRole, name)
    def __repr__(self):
        return "<C FIX::PartyRole instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PartyRole, 'this', _quickfix.new_PartyRole(*args))
        _swig_setattr(self, PartyRole, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PartyRole):
        try:
            if self.thisown: destroy(self)
        except: pass

class PartyRolePtr(PartyRole):
    def __init__(self, this):
        _swig_setattr(self, PartyRole, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PartyRole, 'thisown', 0)
        _swig_setattr(self, PartyRole,self.__class__,PartyRole)
_quickfix.PartyRole_swigregister(PartyRolePtr)

class NoPartyIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoPartyIDs, name)
    def __repr__(self):
        return "<C FIX::NoPartyIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoPartyIDs, 'this', _quickfix.new_NoPartyIDs(*args))
        _swig_setattr(self, NoPartyIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoPartyIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoPartyIDsPtr(NoPartyIDs):
    def __init__(self, this):
        _swig_setattr(self, NoPartyIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoPartyIDs, 'thisown', 0)
        _swig_setattr(self, NoPartyIDs,self.__class__,NoPartyIDs)
_quickfix.NoPartyIDs_swigregister(NoPartyIDsPtr)

class NoSecurityAltID(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoSecurityAltID, name)
    def __repr__(self):
        return "<C FIX::NoSecurityAltID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoSecurityAltID, 'this', _quickfix.new_NoSecurityAltID(*args))
        _swig_setattr(self, NoSecurityAltID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoSecurityAltID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoSecurityAltIDPtr(NoSecurityAltID):
    def __init__(self, this):
        _swig_setattr(self, NoSecurityAltID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoSecurityAltID, 'thisown', 0)
        _swig_setattr(self, NoSecurityAltID,self.__class__,NoSecurityAltID)
_quickfix.NoSecurityAltID_swigregister(NoSecurityAltIDPtr)

class SecurityAltID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityAltID, name)
    def __repr__(self):
        return "<C FIX::SecurityAltID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityAltID, 'this', _quickfix.new_SecurityAltID(*args))
        _swig_setattr(self, SecurityAltID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityAltID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityAltIDPtr(SecurityAltID):
    def __init__(self, this):
        _swig_setattr(self, SecurityAltID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityAltID, 'thisown', 0)
        _swig_setattr(self, SecurityAltID,self.__class__,SecurityAltID)
_quickfix.SecurityAltID_swigregister(SecurityAltIDPtr)

class SecurityAltIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityAltIDSource, name)
    def __repr__(self):
        return "<C FIX::SecurityAltIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityAltIDSource, 'this', _quickfix.new_SecurityAltIDSource(*args))
        _swig_setattr(self, SecurityAltIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityAltIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityAltIDSourcePtr(SecurityAltIDSource):
    def __init__(self, this):
        _swig_setattr(self, SecurityAltIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityAltIDSource, 'thisown', 0)
        _swig_setattr(self, SecurityAltIDSource,self.__class__,SecurityAltIDSource)
_quickfix.SecurityAltIDSource_swigregister(SecurityAltIDSourcePtr)

class NoUnderlyingSecurityAltID(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyingSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyingSecurityAltID, name)
    def __repr__(self):
        return "<C FIX::NoUnderlyingSecurityAltID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoUnderlyingSecurityAltID, 'this', _quickfix.new_NoUnderlyingSecurityAltID(*args))
        _swig_setattr(self, NoUnderlyingSecurityAltID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoUnderlyingSecurityAltID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoUnderlyingSecurityAltIDPtr(NoUnderlyingSecurityAltID):
    def __init__(self, this):
        _swig_setattr(self, NoUnderlyingSecurityAltID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoUnderlyingSecurityAltID, 'thisown', 0)
        _swig_setattr(self, NoUnderlyingSecurityAltID,self.__class__,NoUnderlyingSecurityAltID)
_quickfix.NoUnderlyingSecurityAltID_swigregister(NoUnderlyingSecurityAltIDPtr)

class UnderlyingSecurityAltID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityAltID, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityAltID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityAltID, 'this', _quickfix.new_UnderlyingSecurityAltID(*args))
        _swig_setattr(self, UnderlyingSecurityAltID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityAltID):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityAltIDPtr(UnderlyingSecurityAltID):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityAltID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityAltID, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityAltID,self.__class__,UnderlyingSecurityAltID)
_quickfix.UnderlyingSecurityAltID_swigregister(UnderlyingSecurityAltIDPtr)

class UnderlyingSecurityAltIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityAltIDSource, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecurityAltIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecurityAltIDSource, 'this', _quickfix.new_UnderlyingSecurityAltIDSource(*args))
        _swig_setattr(self, UnderlyingSecurityAltIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecurityAltIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecurityAltIDSourcePtr(UnderlyingSecurityAltIDSource):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecurityAltIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecurityAltIDSource, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecurityAltIDSource,self.__class__,UnderlyingSecurityAltIDSource)
_quickfix.UnderlyingSecurityAltIDSource_swigregister(UnderlyingSecurityAltIDSourcePtr)

class Product(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Product, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Product, name)
    def __repr__(self):
        return "<C FIX::Product instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Product, 'this', _quickfix.new_Product(*args))
        _swig_setattr(self, Product, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Product):
        try:
            if self.thisown: destroy(self)
        except: pass

class ProductPtr(Product):
    def __init__(self, this):
        _swig_setattr(self, Product, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Product, 'thisown', 0)
        _swig_setattr(self, Product,self.__class__,Product)
_quickfix.Product_swigregister(ProductPtr)

class CFICode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CFICode, name)
    def __repr__(self):
        return "<C FIX::CFICode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CFICode, 'this', _quickfix.new_CFICode(*args))
        _swig_setattr(self, CFICode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CFICode):
        try:
            if self.thisown: destroy(self)
        except: pass

class CFICodePtr(CFICode):
    def __init__(self, this):
        _swig_setattr(self, CFICode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CFICode, 'thisown', 0)
        _swig_setattr(self, CFICode,self.__class__,CFICode)
_quickfix.CFICode_swigregister(CFICodePtr)

class UnderlyingProduct(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingProduct, name)
    def __repr__(self):
        return "<C FIX::UnderlyingProduct instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingProduct, 'this', _quickfix.new_UnderlyingProduct(*args))
        _swig_setattr(self, UnderlyingProduct, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingProduct):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingProductPtr(UnderlyingProduct):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingProduct, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingProduct, 'thisown', 0)
        _swig_setattr(self, UnderlyingProduct,self.__class__,UnderlyingProduct)
_quickfix.UnderlyingProduct_swigregister(UnderlyingProductPtr)

class UnderlyingCFICode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCFICode, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCFICode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCFICode, 'this', _quickfix.new_UnderlyingCFICode(*args))
        _swig_setattr(self, UnderlyingCFICode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCFICode):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCFICodePtr(UnderlyingCFICode):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCFICode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCFICode, 'thisown', 0)
        _swig_setattr(self, UnderlyingCFICode,self.__class__,UnderlyingCFICode)
_quickfix.UnderlyingCFICode_swigregister(UnderlyingCFICodePtr)

class TestMessageIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestMessageIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TestMessageIndicator, name)
    def __repr__(self):
        return "<C FIX::TestMessageIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TestMessageIndicator, 'this', _quickfix.new_TestMessageIndicator(*args))
        _swig_setattr(self, TestMessageIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TestMessageIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class TestMessageIndicatorPtr(TestMessageIndicator):
    def __init__(self, this):
        _swig_setattr(self, TestMessageIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TestMessageIndicator, 'thisown', 0)
        _swig_setattr(self, TestMessageIndicator,self.__class__,TestMessageIndicator)
_quickfix.TestMessageIndicator_swigregister(TestMessageIndicatorPtr)

class QuantityType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantityType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuantityType, name)
    def __repr__(self):
        return "<C FIX::QuantityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuantityType, 'this', _quickfix.new_QuantityType(*args))
        _swig_setattr(self, QuantityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuantityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuantityTypePtr(QuantityType):
    def __init__(self, this):
        _swig_setattr(self, QuantityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuantityType, 'thisown', 0)
        _swig_setattr(self, QuantityType,self.__class__,QuantityType)
_quickfix.QuantityType_swigregister(QuantityTypePtr)

class BookingRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookingRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BookingRefID, name)
    def __repr__(self):
        return "<C FIX::BookingRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BookingRefID, 'this', _quickfix.new_BookingRefID(*args))
        _swig_setattr(self, BookingRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BookingRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class BookingRefIDPtr(BookingRefID):
    def __init__(self, this):
        _swig_setattr(self, BookingRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BookingRefID, 'thisown', 0)
        _swig_setattr(self, BookingRefID,self.__class__,BookingRefID)
_quickfix.BookingRefID_swigregister(BookingRefIDPtr)

class IndividualAllocID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndividualAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IndividualAllocID, name)
    def __repr__(self):
        return "<C FIX::IndividualAllocID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IndividualAllocID, 'this', _quickfix.new_IndividualAllocID(*args))
        _swig_setattr(self, IndividualAllocID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IndividualAllocID):
        try:
            if self.thisown: destroy(self)
        except: pass

class IndividualAllocIDPtr(IndividualAllocID):
    def __init__(self, this):
        _swig_setattr(self, IndividualAllocID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IndividualAllocID, 'thisown', 0)
        _swig_setattr(self, IndividualAllocID,self.__class__,IndividualAllocID)
_quickfix.IndividualAllocID_swigregister(IndividualAllocIDPtr)

class RoundingDirection(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundingDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RoundingDirection, name)
    def __repr__(self):
        return "<C FIX::RoundingDirection instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RoundingDirection, 'this', _quickfix.new_RoundingDirection(*args))
        _swig_setattr(self, RoundingDirection, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RoundingDirection):
        try:
            if self.thisown: destroy(self)
        except: pass

class RoundingDirectionPtr(RoundingDirection):
    def __init__(self, this):
        _swig_setattr(self, RoundingDirection, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RoundingDirection, 'thisown', 0)
        _swig_setattr(self, RoundingDirection,self.__class__,RoundingDirection)
_quickfix.RoundingDirection_swigregister(RoundingDirectionPtr)

class RoundingModulus(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundingModulus, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RoundingModulus, name)
    def __repr__(self):
        return "<C FIX::RoundingModulus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RoundingModulus, 'this', _quickfix.new_RoundingModulus(*args))
        _swig_setattr(self, RoundingModulus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RoundingModulus):
        try:
            if self.thisown: destroy(self)
        except: pass

class RoundingModulusPtr(RoundingModulus):
    def __init__(self, this):
        _swig_setattr(self, RoundingModulus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RoundingModulus, 'thisown', 0)
        _swig_setattr(self, RoundingModulus,self.__class__,RoundingModulus)
_quickfix.RoundingModulus_swigregister(RoundingModulusPtr)

class CountryOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CountryOfIssue, name)
    def __repr__(self):
        return "<C FIX::CountryOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CountryOfIssue, 'this', _quickfix.new_CountryOfIssue(*args))
        _swig_setattr(self, CountryOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CountryOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class CountryOfIssuePtr(CountryOfIssue):
    def __init__(self, this):
        _swig_setattr(self, CountryOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CountryOfIssue, 'thisown', 0)
        _swig_setattr(self, CountryOfIssue,self.__class__,CountryOfIssue)
_quickfix.CountryOfIssue_swigregister(CountryOfIssuePtr)

class StateOrProvinceOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StateOrProvinceOfIssue, name)
    def __repr__(self):
        return "<C FIX::StateOrProvinceOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StateOrProvinceOfIssue, 'this', _quickfix.new_StateOrProvinceOfIssue(*args))
        _swig_setattr(self, StateOrProvinceOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StateOrProvinceOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class StateOrProvinceOfIssuePtr(StateOrProvinceOfIssue):
    def __init__(self, this):
        _swig_setattr(self, StateOrProvinceOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StateOrProvinceOfIssue, 'thisown', 0)
        _swig_setattr(self, StateOrProvinceOfIssue,self.__class__,StateOrProvinceOfIssue)
_quickfix.StateOrProvinceOfIssue_swigregister(StateOrProvinceOfIssuePtr)

class LocaleOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleOfIssue, name)
    def __repr__(self):
        return "<C FIX::LocaleOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LocaleOfIssue, 'this', _quickfix.new_LocaleOfIssue(*args))
        _swig_setattr(self, LocaleOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LocaleOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class LocaleOfIssuePtr(LocaleOfIssue):
    def __init__(self, this):
        _swig_setattr(self, LocaleOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LocaleOfIssue, 'thisown', 0)
        _swig_setattr(self, LocaleOfIssue,self.__class__,LocaleOfIssue)
_quickfix.LocaleOfIssue_swigregister(LocaleOfIssuePtr)

class NoRegistDtls(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRegistDtls, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoRegistDtls, name)
    def __repr__(self):
        return "<C FIX::NoRegistDtls instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoRegistDtls, 'this', _quickfix.new_NoRegistDtls(*args))
        _swig_setattr(self, NoRegistDtls, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoRegistDtls):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoRegistDtlsPtr(NoRegistDtls):
    def __init__(self, this):
        _swig_setattr(self, NoRegistDtls, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoRegistDtls, 'thisown', 0)
        _swig_setattr(self, NoRegistDtls,self.__class__,NoRegistDtls)
_quickfix.NoRegistDtls_swigregister(NoRegistDtlsPtr)

class MailingDtls(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MailingDtls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MailingDtls, name)
    def __repr__(self):
        return "<C FIX::MailingDtls instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MailingDtls, 'this', _quickfix.new_MailingDtls(*args))
        _swig_setattr(self, MailingDtls, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MailingDtls):
        try:
            if self.thisown: destroy(self)
        except: pass

class MailingDtlsPtr(MailingDtls):
    def __init__(self, this):
        _swig_setattr(self, MailingDtls, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MailingDtls, 'thisown', 0)
        _swig_setattr(self, MailingDtls,self.__class__,MailingDtls)
_quickfix.MailingDtls_swigregister(MailingDtlsPtr)

class InvestorCountryOfResidence(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvestorCountryOfResidence, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InvestorCountryOfResidence, name)
    def __repr__(self):
        return "<C FIX::InvestorCountryOfResidence instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InvestorCountryOfResidence, 'this', _quickfix.new_InvestorCountryOfResidence(*args))
        _swig_setattr(self, InvestorCountryOfResidence, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InvestorCountryOfResidence):
        try:
            if self.thisown: destroy(self)
        except: pass

class InvestorCountryOfResidencePtr(InvestorCountryOfResidence):
    def __init__(self, this):
        _swig_setattr(self, InvestorCountryOfResidence, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InvestorCountryOfResidence, 'thisown', 0)
        _swig_setattr(self, InvestorCountryOfResidence,self.__class__,InvestorCountryOfResidence)
_quickfix.InvestorCountryOfResidence_swigregister(InvestorCountryOfResidencePtr)

class PaymentRef(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentRef, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentRef, name)
    def __repr__(self):
        return "<C FIX::PaymentRef instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PaymentRef, 'this', _quickfix.new_PaymentRef(*args))
        _swig_setattr(self, PaymentRef, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PaymentRef):
        try:
            if self.thisown: destroy(self)
        except: pass

class PaymentRefPtr(PaymentRef):
    def __init__(self, this):
        _swig_setattr(self, PaymentRef, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PaymentRef, 'thisown', 0)
        _swig_setattr(self, PaymentRef,self.__class__,PaymentRef)
_quickfix.PaymentRef_swigregister(PaymentRefPtr)

class DistribPaymentMethod(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistribPaymentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DistribPaymentMethod, name)
    def __repr__(self):
        return "<C FIX::DistribPaymentMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DistribPaymentMethod, 'this', _quickfix.new_DistribPaymentMethod(*args))
        _swig_setattr(self, DistribPaymentMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DistribPaymentMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class DistribPaymentMethodPtr(DistribPaymentMethod):
    def __init__(self, this):
        _swig_setattr(self, DistribPaymentMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DistribPaymentMethod, 'thisown', 0)
        _swig_setattr(self, DistribPaymentMethod,self.__class__,DistribPaymentMethod)
_quickfix.DistribPaymentMethod_swigregister(DistribPaymentMethodPtr)

class CashDistribCurr(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribCurr, name)
    def __repr__(self):
        return "<C FIX::CashDistribCurr instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashDistribCurr, 'this', _quickfix.new_CashDistribCurr(*args))
        _swig_setattr(self, CashDistribCurr, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashDistribCurr):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashDistribCurrPtr(CashDistribCurr):
    def __init__(self, this):
        _swig_setattr(self, CashDistribCurr, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashDistribCurr, 'thisown', 0)
        _swig_setattr(self, CashDistribCurr,self.__class__,CashDistribCurr)
_quickfix.CashDistribCurr_swigregister(CashDistribCurrPtr)

class CommCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CommCurrency, name)
    def __repr__(self):
        return "<C FIX::CommCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CommCurrency, 'this', _quickfix.new_CommCurrency(*args))
        _swig_setattr(self, CommCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CommCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class CommCurrencyPtr(CommCurrency):
    def __init__(self, this):
        _swig_setattr(self, CommCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CommCurrency, 'thisown', 0)
        _swig_setattr(self, CommCurrency,self.__class__,CommCurrency)
_quickfix.CommCurrency_swigregister(CommCurrencyPtr)

class CancellationRights(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CancellationRights, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CancellationRights, name)
    def __repr__(self):
        return "<C FIX::CancellationRights instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CancellationRights, 'this', _quickfix.new_CancellationRights(*args))
        _swig_setattr(self, CancellationRights, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CancellationRights):
        try:
            if self.thisown: destroy(self)
        except: pass

class CancellationRightsPtr(CancellationRights):
    def __init__(self, this):
        _swig_setattr(self, CancellationRights, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CancellationRights, 'thisown', 0)
        _swig_setattr(self, CancellationRights,self.__class__,CancellationRights)
_quickfix.CancellationRights_swigregister(CancellationRightsPtr)

class MoneyLaunderingStatus(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoneyLaunderingStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MoneyLaunderingStatus, name)
    def __repr__(self):
        return "<C FIX::MoneyLaunderingStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MoneyLaunderingStatus, 'this', _quickfix.new_MoneyLaunderingStatus(*args))
        _swig_setattr(self, MoneyLaunderingStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MoneyLaunderingStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class MoneyLaunderingStatusPtr(MoneyLaunderingStatus):
    def __init__(self, this):
        _swig_setattr(self, MoneyLaunderingStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MoneyLaunderingStatus, 'thisown', 0)
        _swig_setattr(self, MoneyLaunderingStatus,self.__class__,MoneyLaunderingStatus)
_quickfix.MoneyLaunderingStatus_swigregister(MoneyLaunderingStatusPtr)

class MailingInst(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MailingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MailingInst, name)
    def __repr__(self):
        return "<C FIX::MailingInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MailingInst, 'this', _quickfix.new_MailingInst(*args))
        _swig_setattr(self, MailingInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MailingInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class MailingInstPtr(MailingInst):
    def __init__(self, this):
        _swig_setattr(self, MailingInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MailingInst, 'thisown', 0)
        _swig_setattr(self, MailingInst,self.__class__,MailingInst)
_quickfix.MailingInst_swigregister(MailingInstPtr)

class TransBkdTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransBkdTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TransBkdTime, name)
    def __repr__(self):
        return "<C FIX::TransBkdTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TransBkdTime, 'this', _quickfix.new_TransBkdTime(*args))
        _swig_setattr(self, TransBkdTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TransBkdTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TransBkdTimePtr(TransBkdTime):
    def __init__(self, this):
        _swig_setattr(self, TransBkdTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TransBkdTime, 'thisown', 0)
        _swig_setattr(self, TransBkdTime,self.__class__,TransBkdTime)
_quickfix.TransBkdTime_swigregister(TransBkdTimePtr)

class ExecPriceType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecPriceType, name)
    def __repr__(self):
        return "<C FIX::ExecPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecPriceType, 'this', _quickfix.new_ExecPriceType(*args))
        _swig_setattr(self, ExecPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecPriceTypePtr(ExecPriceType):
    def __init__(self, this):
        _swig_setattr(self, ExecPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecPriceType, 'thisown', 0)
        _swig_setattr(self, ExecPriceType,self.__class__,ExecPriceType)
_quickfix.ExecPriceType_swigregister(ExecPriceTypePtr)

class ExecPriceAdjustment(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecPriceAdjustment, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecPriceAdjustment, name)
    def __repr__(self):
        return "<C FIX::ExecPriceAdjustment instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecPriceAdjustment, 'this', _quickfix.new_ExecPriceAdjustment(*args))
        _swig_setattr(self, ExecPriceAdjustment, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecPriceAdjustment):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecPriceAdjustmentPtr(ExecPriceAdjustment):
    def __init__(self, this):
        _swig_setattr(self, ExecPriceAdjustment, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecPriceAdjustment, 'thisown', 0)
        _swig_setattr(self, ExecPriceAdjustment,self.__class__,ExecPriceAdjustment)
_quickfix.ExecPriceAdjustment_swigregister(ExecPriceAdjustmentPtr)

class DateOfBirth(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateOfBirth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DateOfBirth, name)
    def __repr__(self):
        return "<C FIX::DateOfBirth instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DateOfBirth, 'this', _quickfix.new_DateOfBirth(*args))
        _swig_setattr(self, DateOfBirth, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DateOfBirth):
        try:
            if self.thisown: destroy(self)
        except: pass

class DateOfBirthPtr(DateOfBirth):
    def __init__(self, this):
        _swig_setattr(self, DateOfBirth, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DateOfBirth, 'thisown', 0)
        _swig_setattr(self, DateOfBirth,self.__class__,DateOfBirth)
_quickfix.DateOfBirth_swigregister(DateOfBirthPtr)

class TradeReportTransType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportTransType, name)
    def __repr__(self):
        return "<C FIX::TradeReportTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeReportTransType, 'this', _quickfix.new_TradeReportTransType(*args))
        _swig_setattr(self, TradeReportTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeReportTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeReportTransTypePtr(TradeReportTransType):
    def __init__(self, this):
        _swig_setattr(self, TradeReportTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeReportTransType, 'thisown', 0)
        _swig_setattr(self, TradeReportTransType,self.__class__,TradeReportTransType)
_quickfix.TradeReportTransType_swigregister(TradeReportTransTypePtr)

class CardHolderName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardHolderName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CardHolderName, name)
    def __repr__(self):
        return "<C FIX::CardHolderName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CardHolderName, 'this', _quickfix.new_CardHolderName(*args))
        _swig_setattr(self, CardHolderName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CardHolderName):
        try:
            if self.thisown: destroy(self)
        except: pass

class CardHolderNamePtr(CardHolderName):
    def __init__(self, this):
        _swig_setattr(self, CardHolderName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CardHolderName, 'thisown', 0)
        _swig_setattr(self, CardHolderName,self.__class__,CardHolderName)
_quickfix.CardHolderName_swigregister(CardHolderNamePtr)

class CardNumber(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CardNumber, name)
    def __repr__(self):
        return "<C FIX::CardNumber instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CardNumber, 'this', _quickfix.new_CardNumber(*args))
        _swig_setattr(self, CardNumber, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CardNumber):
        try:
            if self.thisown: destroy(self)
        except: pass

class CardNumberPtr(CardNumber):
    def __init__(self, this):
        _swig_setattr(self, CardNumber, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CardNumber, 'thisown', 0)
        _swig_setattr(self, CardNumber,self.__class__,CardNumber)
_quickfix.CardNumber_swigregister(CardNumberPtr)

class CardExpDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardExpDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CardExpDate, name)
    def __repr__(self):
        return "<C FIX::CardExpDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CardExpDate, 'this', _quickfix.new_CardExpDate(*args))
        _swig_setattr(self, CardExpDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CardExpDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class CardExpDatePtr(CardExpDate):
    def __init__(self, this):
        _swig_setattr(self, CardExpDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CardExpDate, 'thisown', 0)
        _swig_setattr(self, CardExpDate,self.__class__,CardExpDate)
_quickfix.CardExpDate_swigregister(CardExpDatePtr)

class CardIssNum(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardIssNum, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CardIssNum, name)
    def __repr__(self):
        return "<C FIX::CardIssNum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CardIssNum, 'this', _quickfix.new_CardIssNum(*args))
        _swig_setattr(self, CardIssNum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CardIssNum):
        try:
            if self.thisown: destroy(self)
        except: pass

class CardIssNumPtr(CardIssNum):
    def __init__(self, this):
        _swig_setattr(self, CardIssNum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CardIssNum, 'thisown', 0)
        _swig_setattr(self, CardIssNum,self.__class__,CardIssNum)
_quickfix.CardIssNum_swigregister(CardIssNumPtr)

class PaymentMethod(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentMethod, name)
    def __repr__(self):
        return "<C FIX::PaymentMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PaymentMethod, 'this', _quickfix.new_PaymentMethod(*args))
        _swig_setattr(self, PaymentMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PaymentMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class PaymentMethodPtr(PaymentMethod):
    def __init__(self, this):
        _swig_setattr(self, PaymentMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PaymentMethod, 'thisown', 0)
        _swig_setattr(self, PaymentMethod,self.__class__,PaymentMethod)
_quickfix.PaymentMethod_swigregister(PaymentMethodPtr)

class RegistAcctType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistAcctType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistAcctType, name)
    def __repr__(self):
        return "<C FIX::RegistAcctType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistAcctType, 'this', _quickfix.new_RegistAcctType(*args))
        _swig_setattr(self, RegistAcctType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistAcctType):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistAcctTypePtr(RegistAcctType):
    def __init__(self, this):
        _swig_setattr(self, RegistAcctType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistAcctType, 'thisown', 0)
        _swig_setattr(self, RegistAcctType,self.__class__,RegistAcctType)
_quickfix.RegistAcctType_swigregister(RegistAcctTypePtr)

class Designation(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Designation, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Designation, name)
    def __repr__(self):
        return "<C FIX::Designation instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Designation, 'this', _quickfix.new_Designation(*args))
        _swig_setattr(self, Designation, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Designation):
        try:
            if self.thisown: destroy(self)
        except: pass

class DesignationPtr(Designation):
    def __init__(self, this):
        _swig_setattr(self, Designation, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Designation, 'thisown', 0)
        _swig_setattr(self, Designation,self.__class__,Designation)
_quickfix.Designation_swigregister(DesignationPtr)

class TaxAdvantageType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaxAdvantageType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TaxAdvantageType, name)
    def __repr__(self):
        return "<C FIX::TaxAdvantageType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TaxAdvantageType, 'this', _quickfix.new_TaxAdvantageType(*args))
        _swig_setattr(self, TaxAdvantageType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TaxAdvantageType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TaxAdvantageTypePtr(TaxAdvantageType):
    def __init__(self, this):
        _swig_setattr(self, TaxAdvantageType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TaxAdvantageType, 'thisown', 0)
        _swig_setattr(self, TaxAdvantageType,self.__class__,TaxAdvantageType)
_quickfix.TaxAdvantageType_swigregister(TaxAdvantageTypePtr)

class RegistRejReasonText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistRejReasonText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistRejReasonText, name)
    def __repr__(self):
        return "<C FIX::RegistRejReasonText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistRejReasonText, 'this', _quickfix.new_RegistRejReasonText(*args))
        _swig_setattr(self, RegistRejReasonText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistRejReasonText):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistRejReasonTextPtr(RegistRejReasonText):
    def __init__(self, this):
        _swig_setattr(self, RegistRejReasonText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistRejReasonText, 'thisown', 0)
        _swig_setattr(self, RegistRejReasonText,self.__class__,RegistRejReasonText)
_quickfix.RegistRejReasonText_swigregister(RegistRejReasonTextPtr)

class FundRenewWaiv(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FundRenewWaiv, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FundRenewWaiv, name)
    def __repr__(self):
        return "<C FIX::FundRenewWaiv instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FundRenewWaiv, 'this', _quickfix.new_FundRenewWaiv(*args))
        _swig_setattr(self, FundRenewWaiv, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FundRenewWaiv):
        try:
            if self.thisown: destroy(self)
        except: pass

class FundRenewWaivPtr(FundRenewWaiv):
    def __init__(self, this):
        _swig_setattr(self, FundRenewWaiv, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FundRenewWaiv, 'thisown', 0)
        _swig_setattr(self, FundRenewWaiv,self.__class__,FundRenewWaiv)
_quickfix.FundRenewWaiv_swigregister(FundRenewWaivPtr)

class CashDistribAgentName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentName, name)
    def __repr__(self):
        return "<C FIX::CashDistribAgentName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashDistribAgentName, 'this', _quickfix.new_CashDistribAgentName(*args))
        _swig_setattr(self, CashDistribAgentName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashDistribAgentName):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashDistribAgentNamePtr(CashDistribAgentName):
    def __init__(self, this):
        _swig_setattr(self, CashDistribAgentName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashDistribAgentName, 'thisown', 0)
        _swig_setattr(self, CashDistribAgentName,self.__class__,CashDistribAgentName)
_quickfix.CashDistribAgentName_swigregister(CashDistribAgentNamePtr)

class CashDistribAgentCode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentCode, name)
    def __repr__(self):
        return "<C FIX::CashDistribAgentCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashDistribAgentCode, 'this', _quickfix.new_CashDistribAgentCode(*args))
        _swig_setattr(self, CashDistribAgentCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashDistribAgentCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashDistribAgentCodePtr(CashDistribAgentCode):
    def __init__(self, this):
        _swig_setattr(self, CashDistribAgentCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashDistribAgentCode, 'thisown', 0)
        _swig_setattr(self, CashDistribAgentCode,self.__class__,CashDistribAgentCode)
_quickfix.CashDistribAgentCode_swigregister(CashDistribAgentCodePtr)

class CashDistribAgentAcctNumber(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentAcctNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentAcctNumber, name)
    def __repr__(self):
        return "<C FIX::CashDistribAgentAcctNumber instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashDistribAgentAcctNumber, 'this', _quickfix.new_CashDistribAgentAcctNumber(*args))
        _swig_setattr(self, CashDistribAgentAcctNumber, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashDistribAgentAcctNumber):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashDistribAgentAcctNumberPtr(CashDistribAgentAcctNumber):
    def __init__(self, this):
        _swig_setattr(self, CashDistribAgentAcctNumber, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashDistribAgentAcctNumber, 'thisown', 0)
        _swig_setattr(self, CashDistribAgentAcctNumber,self.__class__,CashDistribAgentAcctNumber)
_quickfix.CashDistribAgentAcctNumber_swigregister(CashDistribAgentAcctNumberPtr)

class CashDistribPayRef(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribPayRef, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribPayRef, name)
    def __repr__(self):
        return "<C FIX::CashDistribPayRef instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashDistribPayRef, 'this', _quickfix.new_CashDistribPayRef(*args))
        _swig_setattr(self, CashDistribPayRef, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashDistribPayRef):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashDistribPayRefPtr(CashDistribPayRef):
    def __init__(self, this):
        _swig_setattr(self, CashDistribPayRef, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashDistribPayRef, 'thisown', 0)
        _swig_setattr(self, CashDistribPayRef,self.__class__,CashDistribPayRef)
_quickfix.CashDistribPayRef_swigregister(CashDistribPayRefPtr)

class CashDistribAgentAcctName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentAcctName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentAcctName, name)
    def __repr__(self):
        return "<C FIX::CashDistribAgentAcctName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashDistribAgentAcctName, 'this', _quickfix.new_CashDistribAgentAcctName(*args))
        _swig_setattr(self, CashDistribAgentAcctName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashDistribAgentAcctName):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashDistribAgentAcctNamePtr(CashDistribAgentAcctName):
    def __init__(self, this):
        _swig_setattr(self, CashDistribAgentAcctName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashDistribAgentAcctName, 'thisown', 0)
        _swig_setattr(self, CashDistribAgentAcctName,self.__class__,CashDistribAgentAcctName)
_quickfix.CashDistribAgentAcctName_swigregister(CashDistribAgentAcctNamePtr)

class CardStartDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardStartDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CardStartDate, name)
    def __repr__(self):
        return "<C FIX::CardStartDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CardStartDate, 'this', _quickfix.new_CardStartDate(*args))
        _swig_setattr(self, CardStartDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CardStartDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class CardStartDatePtr(CardStartDate):
    def __init__(self, this):
        _swig_setattr(self, CardStartDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CardStartDate, 'thisown', 0)
        _swig_setattr(self, CardStartDate,self.__class__,CardStartDate)
_quickfix.CardStartDate_swigregister(CardStartDatePtr)

class PaymentDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentDate, name)
    def __repr__(self):
        return "<C FIX::PaymentDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PaymentDate, 'this', _quickfix.new_PaymentDate(*args))
        _swig_setattr(self, PaymentDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PaymentDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class PaymentDatePtr(PaymentDate):
    def __init__(self, this):
        _swig_setattr(self, PaymentDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PaymentDate, 'thisown', 0)
        _swig_setattr(self, PaymentDate,self.__class__,PaymentDate)
_quickfix.PaymentDate_swigregister(PaymentDatePtr)

class PaymentRemitterID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentRemitterID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentRemitterID, name)
    def __repr__(self):
        return "<C FIX::PaymentRemitterID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PaymentRemitterID, 'this', _quickfix.new_PaymentRemitterID(*args))
        _swig_setattr(self, PaymentRemitterID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PaymentRemitterID):
        try:
            if self.thisown: destroy(self)
        except: pass

class PaymentRemitterIDPtr(PaymentRemitterID):
    def __init__(self, this):
        _swig_setattr(self, PaymentRemitterID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PaymentRemitterID, 'thisown', 0)
        _swig_setattr(self, PaymentRemitterID,self.__class__,PaymentRemitterID)
_quickfix.PaymentRemitterID_swigregister(PaymentRemitterIDPtr)

class RegistStatus(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistStatus, name)
    def __repr__(self):
        return "<C FIX::RegistStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistStatus, 'this', _quickfix.new_RegistStatus(*args))
        _swig_setattr(self, RegistStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistStatusPtr(RegistStatus):
    def __init__(self, this):
        _swig_setattr(self, RegistStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistStatus, 'thisown', 0)
        _swig_setattr(self, RegistStatus,self.__class__,RegistStatus)
_quickfix.RegistStatus_swigregister(RegistStatusPtr)

class RegistRejReasonCode(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistRejReasonCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistRejReasonCode, name)
    def __repr__(self):
        return "<C FIX::RegistRejReasonCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistRejReasonCode, 'this', _quickfix.new_RegistRejReasonCode(*args))
        _swig_setattr(self, RegistRejReasonCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistRejReasonCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistRejReasonCodePtr(RegistRejReasonCode):
    def __init__(self, this):
        _swig_setattr(self, RegistRejReasonCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistRejReasonCode, 'thisown', 0)
        _swig_setattr(self, RegistRejReasonCode,self.__class__,RegistRejReasonCode)
_quickfix.RegistRejReasonCode_swigregister(RegistRejReasonCodePtr)

class RegistRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistRefID, name)
    def __repr__(self):
        return "<C FIX::RegistRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistRefID, 'this', _quickfix.new_RegistRefID(*args))
        _swig_setattr(self, RegistRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistRefIDPtr(RegistRefID):
    def __init__(self, this):
        _swig_setattr(self, RegistRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistRefID, 'thisown', 0)
        _swig_setattr(self, RegistRefID,self.__class__,RegistRefID)
_quickfix.RegistRefID_swigregister(RegistRefIDPtr)

class RegistDtls(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistDtls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistDtls, name)
    def __repr__(self):
        return "<C FIX::RegistDtls instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistDtls, 'this', _quickfix.new_RegistDtls(*args))
        _swig_setattr(self, RegistDtls, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistDtls):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistDtlsPtr(RegistDtls):
    def __init__(self, this):
        _swig_setattr(self, RegistDtls, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistDtls, 'thisown', 0)
        _swig_setattr(self, RegistDtls,self.__class__,RegistDtls)
_quickfix.RegistDtls_swigregister(RegistDtlsPtr)

class NoDistribInsts(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDistribInsts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoDistribInsts, name)
    def __repr__(self):
        return "<C FIX::NoDistribInsts instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoDistribInsts, 'this', _quickfix.new_NoDistribInsts(*args))
        _swig_setattr(self, NoDistribInsts, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoDistribInsts):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoDistribInstsPtr(NoDistribInsts):
    def __init__(self, this):
        _swig_setattr(self, NoDistribInsts, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoDistribInsts, 'thisown', 0)
        _swig_setattr(self, NoDistribInsts,self.__class__,NoDistribInsts)
_quickfix.NoDistribInsts_swigregister(NoDistribInstsPtr)

class RegistEmail(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistEmail, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistEmail, name)
    def __repr__(self):
        return "<C FIX::RegistEmail instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistEmail, 'this', _quickfix.new_RegistEmail(*args))
        _swig_setattr(self, RegistEmail, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistEmail):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistEmailPtr(RegistEmail):
    def __init__(self, this):
        _swig_setattr(self, RegistEmail, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistEmail, 'thisown', 0)
        _swig_setattr(self, RegistEmail,self.__class__,RegistEmail)
_quickfix.RegistEmail_swigregister(RegistEmailPtr)

class DistribPercentage(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistribPercentage, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DistribPercentage, name)
    def __repr__(self):
        return "<C FIX::DistribPercentage instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DistribPercentage, 'this', _quickfix.new_DistribPercentage(*args))
        _swig_setattr(self, DistribPercentage, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DistribPercentage):
        try:
            if self.thisown: destroy(self)
        except: pass

class DistribPercentagePtr(DistribPercentage):
    def __init__(self, this):
        _swig_setattr(self, DistribPercentage, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DistribPercentage, 'thisown', 0)
        _swig_setattr(self, DistribPercentage,self.__class__,DistribPercentage)
_quickfix.DistribPercentage_swigregister(DistribPercentagePtr)

class RegistID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistID, name)
    def __repr__(self):
        return "<C FIX::RegistID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistID, 'this', _quickfix.new_RegistID(*args))
        _swig_setattr(self, RegistID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistIDPtr(RegistID):
    def __init__(self, this):
        _swig_setattr(self, RegistID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistID, 'thisown', 0)
        _swig_setattr(self, RegistID,self.__class__,RegistID)
_quickfix.RegistID_swigregister(RegistIDPtr)

class RegistTransType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistTransType, name)
    def __repr__(self):
        return "<C FIX::RegistTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistTransType, 'this', _quickfix.new_RegistTransType(*args))
        _swig_setattr(self, RegistTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistTransTypePtr(RegistTransType):
    def __init__(self, this):
        _swig_setattr(self, RegistTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistTransType, 'thisown', 0)
        _swig_setattr(self, RegistTransType,self.__class__,RegistTransType)
_quickfix.RegistTransType_swigregister(RegistTransTypePtr)

class ExecValuationPoint(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecValuationPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecValuationPoint, name)
    def __repr__(self):
        return "<C FIX::ExecValuationPoint instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecValuationPoint, 'this', _quickfix.new_ExecValuationPoint(*args))
        _swig_setattr(self, ExecValuationPoint, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecValuationPoint):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecValuationPointPtr(ExecValuationPoint):
    def __init__(self, this):
        _swig_setattr(self, ExecValuationPoint, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecValuationPoint, 'thisown', 0)
        _swig_setattr(self, ExecValuationPoint,self.__class__,ExecValuationPoint)
_quickfix.ExecValuationPoint_swigregister(ExecValuationPointPtr)

class OrderPercent(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderPercent, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderPercent, name)
    def __repr__(self):
        return "<C FIX::OrderPercent instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderPercent, 'this', _quickfix.new_OrderPercent(*args))
        _swig_setattr(self, OrderPercent, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderPercent):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderPercentPtr(OrderPercent):
    def __init__(self, this):
        _swig_setattr(self, OrderPercent, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderPercent, 'thisown', 0)
        _swig_setattr(self, OrderPercent,self.__class__,OrderPercent)
_quickfix.OrderPercent_swigregister(OrderPercentPtr)

class OwnershipType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OwnershipType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OwnershipType, name)
    def __repr__(self):
        return "<C FIX::OwnershipType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OwnershipType, 'this', _quickfix.new_OwnershipType(*args))
        _swig_setattr(self, OwnershipType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OwnershipType):
        try:
            if self.thisown: destroy(self)
        except: pass

class OwnershipTypePtr(OwnershipType):
    def __init__(self, this):
        _swig_setattr(self, OwnershipType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OwnershipType, 'thisown', 0)
        _swig_setattr(self, OwnershipType,self.__class__,OwnershipType)
_quickfix.OwnershipType_swigregister(OwnershipTypePtr)

class NoContAmts(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoContAmts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoContAmts, name)
    def __repr__(self):
        return "<C FIX::NoContAmts instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoContAmts, 'this', _quickfix.new_NoContAmts(*args))
        _swig_setattr(self, NoContAmts, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoContAmts):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoContAmtsPtr(NoContAmts):
    def __init__(self, this):
        _swig_setattr(self, NoContAmts, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoContAmts, 'thisown', 0)
        _swig_setattr(self, NoContAmts,self.__class__,NoContAmts)
_quickfix.NoContAmts_swigregister(NoContAmtsPtr)

class ContAmtType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContAmtType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContAmtType, name)
    def __repr__(self):
        return "<C FIX::ContAmtType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContAmtType, 'this', _quickfix.new_ContAmtType(*args))
        _swig_setattr(self, ContAmtType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContAmtType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContAmtTypePtr(ContAmtType):
    def __init__(self, this):
        _swig_setattr(self, ContAmtType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContAmtType, 'thisown', 0)
        _swig_setattr(self, ContAmtType,self.__class__,ContAmtType)
_quickfix.ContAmtType_swigregister(ContAmtTypePtr)

class ContAmtValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContAmtValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContAmtValue, name)
    def __repr__(self):
        return "<C FIX::ContAmtValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContAmtValue, 'this', _quickfix.new_ContAmtValue(*args))
        _swig_setattr(self, ContAmtValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContAmtValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContAmtValuePtr(ContAmtValue):
    def __init__(self, this):
        _swig_setattr(self, ContAmtValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContAmtValue, 'thisown', 0)
        _swig_setattr(self, ContAmtValue,self.__class__,ContAmtValue)
_quickfix.ContAmtValue_swigregister(ContAmtValuePtr)

class ContAmtCurr(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContAmtCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContAmtCurr, name)
    def __repr__(self):
        return "<C FIX::ContAmtCurr instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContAmtCurr, 'this', _quickfix.new_ContAmtCurr(*args))
        _swig_setattr(self, ContAmtCurr, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContAmtCurr):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContAmtCurrPtr(ContAmtCurr):
    def __init__(self, this):
        _swig_setattr(self, ContAmtCurr, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContAmtCurr, 'thisown', 0)
        _swig_setattr(self, ContAmtCurr,self.__class__,ContAmtCurr)
_quickfix.ContAmtCurr_swigregister(ContAmtCurrPtr)

class OwnerType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OwnerType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OwnerType, name)
    def __repr__(self):
        return "<C FIX::OwnerType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OwnerType, 'this', _quickfix.new_OwnerType(*args))
        _swig_setattr(self, OwnerType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OwnerType):
        try:
            if self.thisown: destroy(self)
        except: pass

class OwnerTypePtr(OwnerType):
    def __init__(self, this):
        _swig_setattr(self, OwnerType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OwnerType, 'thisown', 0)
        _swig_setattr(self, OwnerType,self.__class__,OwnerType)
_quickfix.OwnerType_swigregister(OwnerTypePtr)

class PartySubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PartySubID, name)
    def __repr__(self):
        return "<C FIX::PartySubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PartySubID, 'this', _quickfix.new_PartySubID(*args))
        _swig_setattr(self, PartySubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PartySubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class PartySubIDPtr(PartySubID):
    def __init__(self, this):
        _swig_setattr(self, PartySubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PartySubID, 'thisown', 0)
        _swig_setattr(self, PartySubID,self.__class__,PartySubID)
_quickfix.PartySubID_swigregister(PartySubIDPtr)

class NestedPartyID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartyID, name)
    def __repr__(self):
        return "<C FIX::NestedPartyID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NestedPartyID, 'this', _quickfix.new_NestedPartyID(*args))
        _swig_setattr(self, NestedPartyID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NestedPartyID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NestedPartyIDPtr(NestedPartyID):
    def __init__(self, this):
        _swig_setattr(self, NestedPartyID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NestedPartyID, 'thisown', 0)
        _swig_setattr(self, NestedPartyID,self.__class__,NestedPartyID)
_quickfix.NestedPartyID_swigregister(NestedPartyIDPtr)

class NestedPartyIDSource(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartyIDSource, name)
    def __repr__(self):
        return "<C FIX::NestedPartyIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NestedPartyIDSource, 'this', _quickfix.new_NestedPartyIDSource(*args))
        _swig_setattr(self, NestedPartyIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NestedPartyIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class NestedPartyIDSourcePtr(NestedPartyIDSource):
    def __init__(self, this):
        _swig_setattr(self, NestedPartyIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NestedPartyIDSource, 'thisown', 0)
        _swig_setattr(self, NestedPartyIDSource,self.__class__,NestedPartyIDSource)
_quickfix.NestedPartyIDSource_swigregister(NestedPartyIDSourcePtr)

class SecondaryClOrdID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryClOrdID, name)
    def __repr__(self):
        return "<C FIX::SecondaryClOrdID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryClOrdID, 'this', _quickfix.new_SecondaryClOrdID(*args))
        _swig_setattr(self, SecondaryClOrdID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryClOrdID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryClOrdIDPtr(SecondaryClOrdID):
    def __init__(self, this):
        _swig_setattr(self, SecondaryClOrdID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryClOrdID, 'thisown', 0)
        _swig_setattr(self, SecondaryClOrdID,self.__class__,SecondaryClOrdID)
_quickfix.SecondaryClOrdID_swigregister(SecondaryClOrdIDPtr)

class SecondaryExecID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryExecID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryExecID, name)
    def __repr__(self):
        return "<C FIX::SecondaryExecID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryExecID, 'this', _quickfix.new_SecondaryExecID(*args))
        _swig_setattr(self, SecondaryExecID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryExecID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryExecIDPtr(SecondaryExecID):
    def __init__(self, this):
        _swig_setattr(self, SecondaryExecID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryExecID, 'thisown', 0)
        _swig_setattr(self, SecondaryExecID,self.__class__,SecondaryExecID)
_quickfix.SecondaryExecID_swigregister(SecondaryExecIDPtr)

class OrderCapacity(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderCapacity, name)
    def __repr__(self):
        return "<C FIX::OrderCapacity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderCapacity, 'this', _quickfix.new_OrderCapacity(*args))
        _swig_setattr(self, OrderCapacity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderCapacity):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderCapacityPtr(OrderCapacity):
    def __init__(self, this):
        _swig_setattr(self, OrderCapacity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderCapacity, 'thisown', 0)
        _swig_setattr(self, OrderCapacity,self.__class__,OrderCapacity)
_quickfix.OrderCapacity_swigregister(OrderCapacityPtr)

class OrderRestrictions(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderRestrictions, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderRestrictions, name)
    def __repr__(self):
        return "<C FIX::OrderRestrictions instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderRestrictions, 'this', _quickfix.new_OrderRestrictions(*args))
        _swig_setattr(self, OrderRestrictions, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderRestrictions):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderRestrictionsPtr(OrderRestrictions):
    def __init__(self, this):
        _swig_setattr(self, OrderRestrictions, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderRestrictions, 'thisown', 0)
        _swig_setattr(self, OrderRestrictions,self.__class__,OrderRestrictions)
_quickfix.OrderRestrictions_swigregister(OrderRestrictionsPtr)

class MassCancelRequestType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassCancelRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MassCancelRequestType, name)
    def __repr__(self):
        return "<C FIX::MassCancelRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MassCancelRequestType, 'this', _quickfix.new_MassCancelRequestType(*args))
        _swig_setattr(self, MassCancelRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MassCancelRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MassCancelRequestTypePtr(MassCancelRequestType):
    def __init__(self, this):
        _swig_setattr(self, MassCancelRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MassCancelRequestType, 'thisown', 0)
        _swig_setattr(self, MassCancelRequestType,self.__class__,MassCancelRequestType)
_quickfix.MassCancelRequestType_swigregister(MassCancelRequestTypePtr)

class MassCancelResponse(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassCancelResponse, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MassCancelResponse, name)
    def __repr__(self):
        return "<C FIX::MassCancelResponse instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MassCancelResponse, 'this', _quickfix.new_MassCancelResponse(*args))
        _swig_setattr(self, MassCancelResponse, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MassCancelResponse):
        try:
            if self.thisown: destroy(self)
        except: pass

class MassCancelResponsePtr(MassCancelResponse):
    def __init__(self, this):
        _swig_setattr(self, MassCancelResponse, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MassCancelResponse, 'thisown', 0)
        _swig_setattr(self, MassCancelResponse,self.__class__,MassCancelResponse)
_quickfix.MassCancelResponse_swigregister(MassCancelResponsePtr)

class MassCancelRejectReason(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassCancelRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MassCancelRejectReason, name)
    def __repr__(self):
        return "<C FIX::MassCancelRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MassCancelRejectReason, 'this', _quickfix.new_MassCancelRejectReason(*args))
        _swig_setattr(self, MassCancelRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MassCancelRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class MassCancelRejectReasonPtr(MassCancelRejectReason):
    def __init__(self, this):
        _swig_setattr(self, MassCancelRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MassCancelRejectReason, 'thisown', 0)
        _swig_setattr(self, MassCancelRejectReason,self.__class__,MassCancelRejectReason)
_quickfix.MassCancelRejectReason_swigregister(MassCancelRejectReasonPtr)

class TotalAffectedOrders(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalAffectedOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalAffectedOrders, name)
    def __repr__(self):
        return "<C FIX::TotalAffectedOrders instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalAffectedOrders, 'this', _quickfix.new_TotalAffectedOrders(*args))
        _swig_setattr(self, TotalAffectedOrders, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalAffectedOrders):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalAffectedOrdersPtr(TotalAffectedOrders):
    def __init__(self, this):
        _swig_setattr(self, TotalAffectedOrders, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalAffectedOrders, 'thisown', 0)
        _swig_setattr(self, TotalAffectedOrders,self.__class__,TotalAffectedOrders)
_quickfix.TotalAffectedOrders_swigregister(TotalAffectedOrdersPtr)

class NoAffectedOrders(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAffectedOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoAffectedOrders, name)
    def __repr__(self):
        return "<C FIX::NoAffectedOrders instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoAffectedOrders, 'this', _quickfix.new_NoAffectedOrders(*args))
        _swig_setattr(self, NoAffectedOrders, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoAffectedOrders):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoAffectedOrdersPtr(NoAffectedOrders):
    def __init__(self, this):
        _swig_setattr(self, NoAffectedOrders, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoAffectedOrders, 'thisown', 0)
        _swig_setattr(self, NoAffectedOrders,self.__class__,NoAffectedOrders)
_quickfix.NoAffectedOrders_swigregister(NoAffectedOrdersPtr)

class AffectedOrderID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffectedOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AffectedOrderID, name)
    def __repr__(self):
        return "<C FIX::AffectedOrderID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AffectedOrderID, 'this', _quickfix.new_AffectedOrderID(*args))
        _swig_setattr(self, AffectedOrderID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AffectedOrderID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AffectedOrderIDPtr(AffectedOrderID):
    def __init__(self, this):
        _swig_setattr(self, AffectedOrderID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AffectedOrderID, 'thisown', 0)
        _swig_setattr(self, AffectedOrderID,self.__class__,AffectedOrderID)
_quickfix.AffectedOrderID_swigregister(AffectedOrderIDPtr)

class AffectedSecondaryOrderID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffectedSecondaryOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AffectedSecondaryOrderID, name)
    def __repr__(self):
        return "<C FIX::AffectedSecondaryOrderID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AffectedSecondaryOrderID, 'this', _quickfix.new_AffectedSecondaryOrderID(*args))
        _swig_setattr(self, AffectedSecondaryOrderID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AffectedSecondaryOrderID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AffectedSecondaryOrderIDPtr(AffectedSecondaryOrderID):
    def __init__(self, this):
        _swig_setattr(self, AffectedSecondaryOrderID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AffectedSecondaryOrderID, 'thisown', 0)
        _swig_setattr(self, AffectedSecondaryOrderID,self.__class__,AffectedSecondaryOrderID)
_quickfix.AffectedSecondaryOrderID_swigregister(AffectedSecondaryOrderIDPtr)

class QuoteType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteType, name)
    def __repr__(self):
        return "<C FIX::QuoteType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteType, 'this', _quickfix.new_QuoteType(*args))
        _swig_setattr(self, QuoteType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteTypePtr(QuoteType):
    def __init__(self, this):
        _swig_setattr(self, QuoteType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteType, 'thisown', 0)
        _swig_setattr(self, QuoteType,self.__class__,QuoteType)
_quickfix.QuoteType_swigregister(QuoteTypePtr)

class NestedPartyRole(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartyRole, name)
    def __repr__(self):
        return "<C FIX::NestedPartyRole instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NestedPartyRole, 'this', _quickfix.new_NestedPartyRole(*args))
        _swig_setattr(self, NestedPartyRole, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NestedPartyRole):
        try:
            if self.thisown: destroy(self)
        except: pass

class NestedPartyRolePtr(NestedPartyRole):
    def __init__(self, this):
        _swig_setattr(self, NestedPartyRole, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NestedPartyRole, 'thisown', 0)
        _swig_setattr(self, NestedPartyRole,self.__class__,NestedPartyRole)
_quickfix.NestedPartyRole_swigregister(NestedPartyRolePtr)

class NoNestedPartyIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNestedPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoNestedPartyIDs, name)
    def __repr__(self):
        return "<C FIX::NoNestedPartyIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoNestedPartyIDs, 'this', _quickfix.new_NoNestedPartyIDs(*args))
        _swig_setattr(self, NoNestedPartyIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoNestedPartyIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoNestedPartyIDsPtr(NoNestedPartyIDs):
    def __init__(self, this):
        _swig_setattr(self, NoNestedPartyIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoNestedPartyIDs, 'thisown', 0)
        _swig_setattr(self, NoNestedPartyIDs,self.__class__,NoNestedPartyIDs)
_quickfix.NoNestedPartyIDs_swigregister(NoNestedPartyIDsPtr)

class TotalAccruedInterestAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalAccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalAccruedInterestAmt, name)
    def __repr__(self):
        return "<C FIX::TotalAccruedInterestAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalAccruedInterestAmt, 'this', _quickfix.new_TotalAccruedInterestAmt(*args))
        _swig_setattr(self, TotalAccruedInterestAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalAccruedInterestAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalAccruedInterestAmtPtr(TotalAccruedInterestAmt):
    def __init__(self, this):
        _swig_setattr(self, TotalAccruedInterestAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalAccruedInterestAmt, 'thisown', 0)
        _swig_setattr(self, TotalAccruedInterestAmt,self.__class__,TotalAccruedInterestAmt)
_quickfix.TotalAccruedInterestAmt_swigregister(TotalAccruedInterestAmtPtr)

class MaturityDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityDate, name)
    def __repr__(self):
        return "<C FIX::MaturityDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaturityDate, 'this', _quickfix.new_MaturityDate(*args))
        _swig_setattr(self, MaturityDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaturityDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaturityDatePtr(MaturityDate):
    def __init__(self, this):
        _swig_setattr(self, MaturityDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaturityDate, 'thisown', 0)
        _swig_setattr(self, MaturityDate,self.__class__,MaturityDate)
_quickfix.MaturityDate_swigregister(MaturityDatePtr)

class UnderlyingMaturityDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityDate, name)
    def __repr__(self):
        return "<C FIX::UnderlyingMaturityDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingMaturityDate, 'this', _quickfix.new_UnderlyingMaturityDate(*args))
        _swig_setattr(self, UnderlyingMaturityDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingMaturityDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingMaturityDatePtr(UnderlyingMaturityDate):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingMaturityDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingMaturityDate, 'thisown', 0)
        _swig_setattr(self, UnderlyingMaturityDate,self.__class__,UnderlyingMaturityDate)
_quickfix.UnderlyingMaturityDate_swigregister(UnderlyingMaturityDatePtr)

class InstrRegistry(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InstrRegistry, name)
    def __repr__(self):
        return "<C FIX::InstrRegistry instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InstrRegistry, 'this', _quickfix.new_InstrRegistry(*args))
        _swig_setattr(self, InstrRegistry, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InstrRegistry):
        try:
            if self.thisown: destroy(self)
        except: pass

class InstrRegistryPtr(InstrRegistry):
    def __init__(self, this):
        _swig_setattr(self, InstrRegistry, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InstrRegistry, 'thisown', 0)
        _swig_setattr(self, InstrRegistry,self.__class__,InstrRegistry)
_quickfix.InstrRegistry_swigregister(InstrRegistryPtr)

class CashMargin(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashMargin, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashMargin, name)
    def __repr__(self):
        return "<C FIX::CashMargin instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashMargin, 'this', _quickfix.new_CashMargin(*args))
        _swig_setattr(self, CashMargin, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashMargin):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashMarginPtr(CashMargin):
    def __init__(self, this):
        _swig_setattr(self, CashMargin, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashMargin, 'thisown', 0)
        _swig_setattr(self, CashMargin,self.__class__,CashMargin)
_quickfix.CashMargin_swigregister(CashMarginPtr)

class NestedPartySubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartySubID, name)
    def __repr__(self):
        return "<C FIX::NestedPartySubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NestedPartySubID, 'this', _quickfix.new_NestedPartySubID(*args))
        _swig_setattr(self, NestedPartySubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NestedPartySubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NestedPartySubIDPtr(NestedPartySubID):
    def __init__(self, this):
        _swig_setattr(self, NestedPartySubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NestedPartySubID, 'thisown', 0)
        _swig_setattr(self, NestedPartySubID,self.__class__,NestedPartySubID)
_quickfix.NestedPartySubID_swigregister(NestedPartySubIDPtr)

class Scope(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scope, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Scope, name)
    def __repr__(self):
        return "<C FIX::Scope instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Scope, 'this', _quickfix.new_Scope(*args))
        _swig_setattr(self, Scope, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Scope):
        try:
            if self.thisown: destroy(self)
        except: pass

class ScopePtr(Scope):
    def __init__(self, this):
        _swig_setattr(self, Scope, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Scope, 'thisown', 0)
        _swig_setattr(self, Scope,self.__class__,Scope)
_quickfix.Scope_swigregister(ScopePtr)

class MDImplicitDelete(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDImplicitDelete, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MDImplicitDelete, name)
    def __repr__(self):
        return "<C FIX::MDImplicitDelete instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MDImplicitDelete, 'this', _quickfix.new_MDImplicitDelete(*args))
        _swig_setattr(self, MDImplicitDelete, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MDImplicitDelete):
        try:
            if self.thisown: destroy(self)
        except: pass

class MDImplicitDeletePtr(MDImplicitDelete):
    def __init__(self, this):
        _swig_setattr(self, MDImplicitDelete, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MDImplicitDelete, 'thisown', 0)
        _swig_setattr(self, MDImplicitDelete,self.__class__,MDImplicitDelete)
_quickfix.MDImplicitDelete_swigregister(MDImplicitDeletePtr)

class CrossID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CrossID, name)
    def __repr__(self):
        return "<C FIX::CrossID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CrossID, 'this', _quickfix.new_CrossID(*args))
        _swig_setattr(self, CrossID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CrossID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CrossIDPtr(CrossID):
    def __init__(self, this):
        _swig_setattr(self, CrossID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CrossID, 'thisown', 0)
        _swig_setattr(self, CrossID,self.__class__,CrossID)
_quickfix.CrossID_swigregister(CrossIDPtr)

class CrossType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CrossType, name)
    def __repr__(self):
        return "<C FIX::CrossType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CrossType, 'this', _quickfix.new_CrossType(*args))
        _swig_setattr(self, CrossType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CrossType):
        try:
            if self.thisown: destroy(self)
        except: pass

class CrossTypePtr(CrossType):
    def __init__(self, this):
        _swig_setattr(self, CrossType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CrossType, 'thisown', 0)
        _swig_setattr(self, CrossType,self.__class__,CrossType)
_quickfix.CrossType_swigregister(CrossTypePtr)

class CrossPrioritization(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossPrioritization, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CrossPrioritization, name)
    def __repr__(self):
        return "<C FIX::CrossPrioritization instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CrossPrioritization, 'this', _quickfix.new_CrossPrioritization(*args))
        _swig_setattr(self, CrossPrioritization, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CrossPrioritization):
        try:
            if self.thisown: destroy(self)
        except: pass

class CrossPrioritizationPtr(CrossPrioritization):
    def __init__(self, this):
        _swig_setattr(self, CrossPrioritization, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CrossPrioritization, 'thisown', 0)
        _swig_setattr(self, CrossPrioritization,self.__class__,CrossPrioritization)
_quickfix.CrossPrioritization_swigregister(CrossPrioritizationPtr)

class OrigCrossID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigCrossID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrigCrossID, name)
    def __repr__(self):
        return "<C FIX::OrigCrossID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrigCrossID, 'this', _quickfix.new_OrigCrossID(*args))
        _swig_setattr(self, OrigCrossID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrigCrossID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrigCrossIDPtr(OrigCrossID):
    def __init__(self, this):
        _swig_setattr(self, OrigCrossID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrigCrossID, 'thisown', 0)
        _swig_setattr(self, OrigCrossID,self.__class__,OrigCrossID)
_quickfix.OrigCrossID_swigregister(OrigCrossIDPtr)

class NoSides(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSides, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoSides, name)
    def __repr__(self):
        return "<C FIX::NoSides instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoSides, 'this', _quickfix.new_NoSides(*args))
        _swig_setattr(self, NoSides, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoSides):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoSidesPtr(NoSides):
    def __init__(self, this):
        _swig_setattr(self, NoSides, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoSides, 'thisown', 0)
        _swig_setattr(self, NoSides,self.__class__,NoSides)
_quickfix.NoSides_swigregister(NoSidesPtr)

class Username(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Username, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Username, name)
    def __repr__(self):
        return "<C FIX::Username instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Username, 'this', _quickfix.new_Username(*args))
        _swig_setattr(self, Username, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Username):
        try:
            if self.thisown: destroy(self)
        except: pass

class UsernamePtr(Username):
    def __init__(self, this):
        _swig_setattr(self, Username, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Username, 'thisown', 0)
        _swig_setattr(self, Username,self.__class__,Username)
_quickfix.Username_swigregister(UsernamePtr)

class Password(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Password, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Password, name)
    def __repr__(self):
        return "<C FIX::Password instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Password, 'this', _quickfix.new_Password(*args))
        _swig_setattr(self, Password, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Password):
        try:
            if self.thisown: destroy(self)
        except: pass

class PasswordPtr(Password):
    def __init__(self, this):
        _swig_setattr(self, Password, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Password, 'thisown', 0)
        _swig_setattr(self, Password,self.__class__,Password)
_quickfix.Password_swigregister(PasswordPtr)

class NoLegs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegs, name)
    def __repr__(self):
        return "<C FIX::NoLegs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoLegs, 'this', _quickfix.new_NoLegs(*args))
        _swig_setattr(self, NoLegs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoLegs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoLegsPtr(NoLegs):
    def __init__(self, this):
        _swig_setattr(self, NoLegs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoLegs, 'thisown', 0)
        _swig_setattr(self, NoLegs,self.__class__,NoLegs)
_quickfix.NoLegs_swigregister(NoLegsPtr)

class LegCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCurrency, name)
    def __repr__(self):
        return "<C FIX::LegCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCurrency, 'this', _quickfix.new_LegCurrency(*args))
        _swig_setattr(self, LegCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCurrencyPtr(LegCurrency):
    def __init__(self, this):
        _swig_setattr(self, LegCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCurrency, 'thisown', 0)
        _swig_setattr(self, LegCurrency,self.__class__,LegCurrency)
_quickfix.LegCurrency_swigregister(LegCurrencyPtr)

class TotNoSecurityTypes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoSecurityTypes, name)
    def __repr__(self):
        return "<C FIX::TotNoSecurityTypes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNoSecurityTypes, 'this', _quickfix.new_TotNoSecurityTypes(*args))
        _swig_setattr(self, TotNoSecurityTypes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNoSecurityTypes):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNoSecurityTypesPtr(TotNoSecurityTypes):
    def __init__(self, this):
        _swig_setattr(self, TotNoSecurityTypes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNoSecurityTypes, 'thisown', 0)
        _swig_setattr(self, TotNoSecurityTypes,self.__class__,TotNoSecurityTypes)
_quickfix.TotNoSecurityTypes_swigregister(TotNoSecurityTypesPtr)

class NoSecurityTypes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoSecurityTypes, name)
    def __repr__(self):
        return "<C FIX::NoSecurityTypes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoSecurityTypes, 'this', _quickfix.new_NoSecurityTypes(*args))
        _swig_setattr(self, NoSecurityTypes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoSecurityTypes):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoSecurityTypesPtr(NoSecurityTypes):
    def __init__(self, this):
        _swig_setattr(self, NoSecurityTypes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoSecurityTypes, 'thisown', 0)
        _swig_setattr(self, NoSecurityTypes,self.__class__,NoSecurityTypes)
_quickfix.NoSecurityTypes_swigregister(NoSecurityTypesPtr)

class SecurityListRequestType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListRequestType, name)
    def __repr__(self):
        return "<C FIX::SecurityListRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityListRequestType, 'this', _quickfix.new_SecurityListRequestType(*args))
        _swig_setattr(self, SecurityListRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityListRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityListRequestTypePtr(SecurityListRequestType):
    def __init__(self, this):
        _swig_setattr(self, SecurityListRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityListRequestType, 'thisown', 0)
        _swig_setattr(self, SecurityListRequestType,self.__class__,SecurityListRequestType)
_quickfix.SecurityListRequestType_swigregister(SecurityListRequestTypePtr)

class SecurityRequestResult(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityRequestResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityRequestResult, name)
    def __repr__(self):
        return "<C FIX::SecurityRequestResult instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecurityRequestResult, 'this', _quickfix.new_SecurityRequestResult(*args))
        _swig_setattr(self, SecurityRequestResult, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecurityRequestResult):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecurityRequestResultPtr(SecurityRequestResult):
    def __init__(self, this):
        _swig_setattr(self, SecurityRequestResult, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecurityRequestResult, 'thisown', 0)
        _swig_setattr(self, SecurityRequestResult,self.__class__,SecurityRequestResult)
_quickfix.SecurityRequestResult_swigregister(SecurityRequestResultPtr)

class RoundLot(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundLot, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RoundLot, name)
    def __repr__(self):
        return "<C FIX::RoundLot instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RoundLot, 'this', _quickfix.new_RoundLot(*args))
        _swig_setattr(self, RoundLot, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RoundLot):
        try:
            if self.thisown: destroy(self)
        except: pass

class RoundLotPtr(RoundLot):
    def __init__(self, this):
        _swig_setattr(self, RoundLot, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RoundLot, 'thisown', 0)
        _swig_setattr(self, RoundLot,self.__class__,RoundLot)
_quickfix.RoundLot_swigregister(RoundLotPtr)

class MinTradeVol(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinTradeVol, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MinTradeVol, name)
    def __repr__(self):
        return "<C FIX::MinTradeVol instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MinTradeVol, 'this', _quickfix.new_MinTradeVol(*args))
        _swig_setattr(self, MinTradeVol, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MinTradeVol):
        try:
            if self.thisown: destroy(self)
        except: pass

class MinTradeVolPtr(MinTradeVol):
    def __init__(self, this):
        _swig_setattr(self, MinTradeVol, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MinTradeVol, 'thisown', 0)
        _swig_setattr(self, MinTradeVol,self.__class__,MinTradeVol)
_quickfix.MinTradeVol_swigregister(MinTradeVolPtr)

class MultiLegRptTypeReq(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLegRptTypeReq, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLegRptTypeReq, name)
    def __repr__(self):
        return "<C FIX::MultiLegRptTypeReq instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MultiLegRptTypeReq, 'this', _quickfix.new_MultiLegRptTypeReq(*args))
        _swig_setattr(self, MultiLegRptTypeReq, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MultiLegRptTypeReq):
        try:
            if self.thisown: destroy(self)
        except: pass

class MultiLegRptTypeReqPtr(MultiLegRptTypeReq):
    def __init__(self, this):
        _swig_setattr(self, MultiLegRptTypeReq, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MultiLegRptTypeReq, 'thisown', 0)
        _swig_setattr(self, MultiLegRptTypeReq,self.__class__,MultiLegRptTypeReq)
_quickfix.MultiLegRptTypeReq_swigregister(MultiLegRptTypeReqPtr)

class LegPositionEffect(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPositionEffect, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegPositionEffect, name)
    def __repr__(self):
        return "<C FIX::LegPositionEffect instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegPositionEffect, 'this', _quickfix.new_LegPositionEffect(*args))
        _swig_setattr(self, LegPositionEffect, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegPositionEffect):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegPositionEffectPtr(LegPositionEffect):
    def __init__(self, this):
        _swig_setattr(self, LegPositionEffect, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegPositionEffect, 'thisown', 0)
        _swig_setattr(self, LegPositionEffect,self.__class__,LegPositionEffect)
_quickfix.LegPositionEffect_swigregister(LegPositionEffectPtr)

class LegCoveredOrUncovered(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCoveredOrUncovered, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCoveredOrUncovered, name)
    def __repr__(self):
        return "<C FIX::LegCoveredOrUncovered instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCoveredOrUncovered, 'this', _quickfix.new_LegCoveredOrUncovered(*args))
        _swig_setattr(self, LegCoveredOrUncovered, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCoveredOrUncovered):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCoveredOrUncoveredPtr(LegCoveredOrUncovered):
    def __init__(self, this):
        _swig_setattr(self, LegCoveredOrUncovered, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCoveredOrUncovered, 'thisown', 0)
        _swig_setattr(self, LegCoveredOrUncovered,self.__class__,LegCoveredOrUncovered)
_quickfix.LegCoveredOrUncovered_swigregister(LegCoveredOrUncoveredPtr)

class LegPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegPrice, name)
    def __repr__(self):
        return "<C FIX::LegPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegPrice, 'this', _quickfix.new_LegPrice(*args))
        _swig_setattr(self, LegPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegPricePtr(LegPrice):
    def __init__(self, this):
        _swig_setattr(self, LegPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegPrice, 'thisown', 0)
        _swig_setattr(self, LegPrice,self.__class__,LegPrice)
_quickfix.LegPrice_swigregister(LegPricePtr)

class TradSesStatusRejReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesStatusRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesStatusRejReason, name)
    def __repr__(self):
        return "<C FIX::TradSesStatusRejReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradSesStatusRejReason, 'this', _quickfix.new_TradSesStatusRejReason(*args))
        _swig_setattr(self, TradSesStatusRejReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradSesStatusRejReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradSesStatusRejReasonPtr(TradSesStatusRejReason):
    def __init__(self, this):
        _swig_setattr(self, TradSesStatusRejReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradSesStatusRejReason, 'thisown', 0)
        _swig_setattr(self, TradSesStatusRejReason,self.__class__,TradSesStatusRejReason)
_quickfix.TradSesStatusRejReason_swigregister(TradSesStatusRejReasonPtr)

class TradeRequestID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestID, name)
    def __repr__(self):
        return "<C FIX::TradeRequestID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeRequestID, 'this', _quickfix.new_TradeRequestID(*args))
        _swig_setattr(self, TradeRequestID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeRequestID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeRequestIDPtr(TradeRequestID):
    def __init__(self, this):
        _swig_setattr(self, TradeRequestID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeRequestID, 'thisown', 0)
        _swig_setattr(self, TradeRequestID,self.__class__,TradeRequestID)
_quickfix.TradeRequestID_swigregister(TradeRequestIDPtr)

class TradeRequestType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestType, name)
    def __repr__(self):
        return "<C FIX::TradeRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeRequestType, 'this', _quickfix.new_TradeRequestType(*args))
        _swig_setattr(self, TradeRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeRequestTypePtr(TradeRequestType):
    def __init__(self, this):
        _swig_setattr(self, TradeRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeRequestType, 'thisown', 0)
        _swig_setattr(self, TradeRequestType,self.__class__,TradeRequestType)
_quickfix.TradeRequestType_swigregister(TradeRequestTypePtr)

class PreviouslyReported(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreviouslyReported, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PreviouslyReported, name)
    def __repr__(self):
        return "<C FIX::PreviouslyReported instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PreviouslyReported, 'this', _quickfix.new_PreviouslyReported(*args))
        _swig_setattr(self, PreviouslyReported, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PreviouslyReported):
        try:
            if self.thisown: destroy(self)
        except: pass

class PreviouslyReportedPtr(PreviouslyReported):
    def __init__(self, this):
        _swig_setattr(self, PreviouslyReported, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PreviouslyReported, 'thisown', 0)
        _swig_setattr(self, PreviouslyReported,self.__class__,PreviouslyReported)
_quickfix.PreviouslyReported_swigregister(PreviouslyReportedPtr)

class TradeReportID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportID, name)
    def __repr__(self):
        return "<C FIX::TradeReportID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeReportID, 'this', _quickfix.new_TradeReportID(*args))
        _swig_setattr(self, TradeReportID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeReportID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeReportIDPtr(TradeReportID):
    def __init__(self, this):
        _swig_setattr(self, TradeReportID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeReportID, 'thisown', 0)
        _swig_setattr(self, TradeReportID,self.__class__,TradeReportID)
_quickfix.TradeReportID_swigregister(TradeReportIDPtr)

class TradeReportRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportRefID, name)
    def __repr__(self):
        return "<C FIX::TradeReportRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeReportRefID, 'this', _quickfix.new_TradeReportRefID(*args))
        _swig_setattr(self, TradeReportRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeReportRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeReportRefIDPtr(TradeReportRefID):
    def __init__(self, this):
        _swig_setattr(self, TradeReportRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeReportRefID, 'thisown', 0)
        _swig_setattr(self, TradeReportRefID,self.__class__,TradeReportRefID)
_quickfix.TradeReportRefID_swigregister(TradeReportRefIDPtr)

class MatchStatus(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MatchStatus, name)
    def __repr__(self):
        return "<C FIX::MatchStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MatchStatus, 'this', _quickfix.new_MatchStatus(*args))
        _swig_setattr(self, MatchStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MatchStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class MatchStatusPtr(MatchStatus):
    def __init__(self, this):
        _swig_setattr(self, MatchStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MatchStatus, 'thisown', 0)
        _swig_setattr(self, MatchStatus,self.__class__,MatchStatus)
_quickfix.MatchStatus_swigregister(MatchStatusPtr)

class MatchType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MatchType, name)
    def __repr__(self):
        return "<C FIX::MatchType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MatchType, 'this', _quickfix.new_MatchType(*args))
        _swig_setattr(self, MatchType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MatchType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MatchTypePtr(MatchType):
    def __init__(self, this):
        _swig_setattr(self, MatchType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MatchType, 'thisown', 0)
        _swig_setattr(self, MatchType,self.__class__,MatchType)
_quickfix.MatchType_swigregister(MatchTypePtr)

class OddLot(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OddLot, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OddLot, name)
    def __repr__(self):
        return "<C FIX::OddLot instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OddLot, 'this', _quickfix.new_OddLot(*args))
        _swig_setattr(self, OddLot, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OddLot):
        try:
            if self.thisown: destroy(self)
        except: pass

class OddLotPtr(OddLot):
    def __init__(self, this):
        _swig_setattr(self, OddLot, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OddLot, 'thisown', 0)
        _swig_setattr(self, OddLot,self.__class__,OddLot)
_quickfix.OddLot_swigregister(OddLotPtr)

class NoClearingInstructions(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoClearingInstructions, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoClearingInstructions, name)
    def __repr__(self):
        return "<C FIX::NoClearingInstructions instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoClearingInstructions, 'this', _quickfix.new_NoClearingInstructions(*args))
        _swig_setattr(self, NoClearingInstructions, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoClearingInstructions):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoClearingInstructionsPtr(NoClearingInstructions):
    def __init__(self, this):
        _swig_setattr(self, NoClearingInstructions, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoClearingInstructions, 'thisown', 0)
        _swig_setattr(self, NoClearingInstructions,self.__class__,NoClearingInstructions)
_quickfix.NoClearingInstructions_swigregister(NoClearingInstructionsPtr)

class ClearingInstruction(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingInstruction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingInstruction, name)
    def __repr__(self):
        return "<C FIX::ClearingInstruction instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClearingInstruction, 'this', _quickfix.new_ClearingInstruction(*args))
        _swig_setattr(self, ClearingInstruction, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClearingInstruction):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClearingInstructionPtr(ClearingInstruction):
    def __init__(self, this):
        _swig_setattr(self, ClearingInstruction, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClearingInstruction, 'thisown', 0)
        _swig_setattr(self, ClearingInstruction,self.__class__,ClearingInstruction)
_quickfix.ClearingInstruction_swigregister(ClearingInstructionPtr)

class TradeInputSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeInputSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeInputSource, name)
    def __repr__(self):
        return "<C FIX::TradeInputSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeInputSource, 'this', _quickfix.new_TradeInputSource(*args))
        _swig_setattr(self, TradeInputSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeInputSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeInputSourcePtr(TradeInputSource):
    def __init__(self, this):
        _swig_setattr(self, TradeInputSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeInputSource, 'thisown', 0)
        _swig_setattr(self, TradeInputSource,self.__class__,TradeInputSource)
_quickfix.TradeInputSource_swigregister(TradeInputSourcePtr)

class TradeInputDevice(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeInputDevice, name)
    def __repr__(self):
        return "<C FIX::TradeInputDevice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeInputDevice, 'this', _quickfix.new_TradeInputDevice(*args))
        _swig_setattr(self, TradeInputDevice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeInputDevice):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeInputDevicePtr(TradeInputDevice):
    def __init__(self, this):
        _swig_setattr(self, TradeInputDevice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeInputDevice, 'thisown', 0)
        _swig_setattr(self, TradeInputDevice,self.__class__,TradeInputDevice)
_quickfix.TradeInputDevice_swigregister(TradeInputDevicePtr)

class NoDates(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDates, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoDates, name)
    def __repr__(self):
        return "<C FIX::NoDates instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoDates, 'this', _quickfix.new_NoDates(*args))
        _swig_setattr(self, NoDates, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoDates):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoDatesPtr(NoDates):
    def __init__(self, this):
        _swig_setattr(self, NoDates, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoDates, 'thisown', 0)
        _swig_setattr(self, NoDates,self.__class__,NoDates)
_quickfix.NoDates_swigregister(NoDatesPtr)

class AccountType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AccountType, name)
    def __repr__(self):
        return "<C FIX::AccountType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AccountType, 'this', _quickfix.new_AccountType(*args))
        _swig_setattr(self, AccountType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AccountType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AccountTypePtr(AccountType):
    def __init__(self, this):
        _swig_setattr(self, AccountType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AccountType, 'thisown', 0)
        _swig_setattr(self, AccountType,self.__class__,AccountType)
_quickfix.AccountType_swigregister(AccountTypePtr)

class CustOrderCapacity(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustOrderCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CustOrderCapacity, name)
    def __repr__(self):
        return "<C FIX::CustOrderCapacity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CustOrderCapacity, 'this', _quickfix.new_CustOrderCapacity(*args))
        _swig_setattr(self, CustOrderCapacity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CustOrderCapacity):
        try:
            if self.thisown: destroy(self)
        except: pass

class CustOrderCapacityPtr(CustOrderCapacity):
    def __init__(self, this):
        _swig_setattr(self, CustOrderCapacity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CustOrderCapacity, 'thisown', 0)
        _swig_setattr(self, CustOrderCapacity,self.__class__,CustOrderCapacity)
_quickfix.CustOrderCapacity_swigregister(CustOrderCapacityPtr)

class ClOrdLinkID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClOrdLinkID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClOrdLinkID, name)
    def __repr__(self):
        return "<C FIX::ClOrdLinkID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClOrdLinkID, 'this', _quickfix.new_ClOrdLinkID(*args))
        _swig_setattr(self, ClOrdLinkID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClOrdLinkID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClOrdLinkIDPtr(ClOrdLinkID):
    def __init__(self, this):
        _swig_setattr(self, ClOrdLinkID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClOrdLinkID, 'thisown', 0)
        _swig_setattr(self, ClOrdLinkID,self.__class__,ClOrdLinkID)
_quickfix.ClOrdLinkID_swigregister(ClOrdLinkIDPtr)

class MassStatusReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MassStatusReqID, name)
    def __repr__(self):
        return "<C FIX::MassStatusReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MassStatusReqID, 'this', _quickfix.new_MassStatusReqID(*args))
        _swig_setattr(self, MassStatusReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MassStatusReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class MassStatusReqIDPtr(MassStatusReqID):
    def __init__(self, this):
        _swig_setattr(self, MassStatusReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MassStatusReqID, 'thisown', 0)
        _swig_setattr(self, MassStatusReqID,self.__class__,MassStatusReqID)
_quickfix.MassStatusReqID_swigregister(MassStatusReqIDPtr)

class MassStatusReqType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassStatusReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MassStatusReqType, name)
    def __repr__(self):
        return "<C FIX::MassStatusReqType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MassStatusReqType, 'this', _quickfix.new_MassStatusReqType(*args))
        _swig_setattr(self, MassStatusReqType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MassStatusReqType):
        try:
            if self.thisown: destroy(self)
        except: pass

class MassStatusReqTypePtr(MassStatusReqType):
    def __init__(self, this):
        _swig_setattr(self, MassStatusReqType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MassStatusReqType, 'thisown', 0)
        _swig_setattr(self, MassStatusReqType,self.__class__,MassStatusReqType)
_quickfix.MassStatusReqType_swigregister(MassStatusReqTypePtr)

class OrigOrdModTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigOrdModTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrigOrdModTime, name)
    def __repr__(self):
        return "<C FIX::OrigOrdModTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrigOrdModTime, 'this', _quickfix.new_OrigOrdModTime(*args))
        _swig_setattr(self, OrigOrdModTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrigOrdModTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrigOrdModTimePtr(OrigOrdModTime):
    def __init__(self, this):
        _swig_setattr(self, OrigOrdModTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrigOrdModTime, 'thisown', 0)
        _swig_setattr(self, OrigOrdModTime,self.__class__,OrigOrdModTime)
_quickfix.OrigOrdModTime_swigregister(OrigOrdModTimePtr)

class LegSettlType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlType, name)
    def __repr__(self):
        return "<C FIX::LegSettlType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSettlType, 'this', _quickfix.new_LegSettlType(*args))
        _swig_setattr(self, LegSettlType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSettlType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSettlTypePtr(LegSettlType):
    def __init__(self, this):
        _swig_setattr(self, LegSettlType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSettlType, 'thisown', 0)
        _swig_setattr(self, LegSettlType,self.__class__,LegSettlType)
_quickfix.LegSettlType_swigregister(LegSettlTypePtr)

class LegSettlDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlDate, name)
    def __repr__(self):
        return "<C FIX::LegSettlDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSettlDate, 'this', _quickfix.new_LegSettlDate(*args))
        _swig_setattr(self, LegSettlDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSettlDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSettlDatePtr(LegSettlDate):
    def __init__(self, this):
        _swig_setattr(self, LegSettlDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSettlDate, 'thisown', 0)
        _swig_setattr(self, LegSettlDate,self.__class__,LegSettlDate)
_quickfix.LegSettlDate_swigregister(LegSettlDatePtr)

class DayBookingInst(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayBookingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DayBookingInst, name)
    def __repr__(self):
        return "<C FIX::DayBookingInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DayBookingInst, 'this', _quickfix.new_DayBookingInst(*args))
        _swig_setattr(self, DayBookingInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DayBookingInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class DayBookingInstPtr(DayBookingInst):
    def __init__(self, this):
        _swig_setattr(self, DayBookingInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DayBookingInst, 'thisown', 0)
        _swig_setattr(self, DayBookingInst,self.__class__,DayBookingInst)
_quickfix.DayBookingInst_swigregister(DayBookingInstPtr)

class BookingUnit(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookingUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BookingUnit, name)
    def __repr__(self):
        return "<C FIX::BookingUnit instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BookingUnit, 'this', _quickfix.new_BookingUnit(*args))
        _swig_setattr(self, BookingUnit, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BookingUnit):
        try:
            if self.thisown: destroy(self)
        except: pass

class BookingUnitPtr(BookingUnit):
    def __init__(self, this):
        _swig_setattr(self, BookingUnit, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BookingUnit, 'thisown', 0)
        _swig_setattr(self, BookingUnit,self.__class__,BookingUnit)
_quickfix.BookingUnit_swigregister(BookingUnitPtr)

class PreallocMethod(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreallocMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PreallocMethod, name)
    def __repr__(self):
        return "<C FIX::PreallocMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PreallocMethod, 'this', _quickfix.new_PreallocMethod(*args))
        _swig_setattr(self, PreallocMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PreallocMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class PreallocMethodPtr(PreallocMethod):
    def __init__(self, this):
        _swig_setattr(self, PreallocMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PreallocMethod, 'thisown', 0)
        _swig_setattr(self, PreallocMethod,self.__class__,PreallocMethod)
_quickfix.PreallocMethod_swigregister(PreallocMethodPtr)

class UnderlyingCountryOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCountryOfIssue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCountryOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCountryOfIssue, 'this', _quickfix.new_UnderlyingCountryOfIssue(*args))
        _swig_setattr(self, UnderlyingCountryOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCountryOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCountryOfIssuePtr(UnderlyingCountryOfIssue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCountryOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCountryOfIssue, 'thisown', 0)
        _swig_setattr(self, UnderlyingCountryOfIssue,self.__class__,UnderlyingCountryOfIssue)
_quickfix.UnderlyingCountryOfIssue_swigregister(UnderlyingCountryOfIssuePtr)

class UnderlyingStateOrProvinceOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStateOrProvinceOfIssue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingStateOrProvinceOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingStateOrProvinceOfIssue, 'this', _quickfix.new_UnderlyingStateOrProvinceOfIssue(*args))
        _swig_setattr(self, UnderlyingStateOrProvinceOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingStateOrProvinceOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingStateOrProvinceOfIssuePtr(UnderlyingStateOrProvinceOfIssue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingStateOrProvinceOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingStateOrProvinceOfIssue, 'thisown', 0)
        _swig_setattr(self, UnderlyingStateOrProvinceOfIssue,self.__class__,UnderlyingStateOrProvinceOfIssue)
_quickfix.UnderlyingStateOrProvinceOfIssue_swigregister(UnderlyingStateOrProvinceOfIssuePtr)

class UnderlyingLocaleOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLocaleOfIssue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingLocaleOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingLocaleOfIssue, 'this', _quickfix.new_UnderlyingLocaleOfIssue(*args))
        _swig_setattr(self, UnderlyingLocaleOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingLocaleOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingLocaleOfIssuePtr(UnderlyingLocaleOfIssue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingLocaleOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingLocaleOfIssue, 'thisown', 0)
        _swig_setattr(self, UnderlyingLocaleOfIssue,self.__class__,UnderlyingLocaleOfIssue)
_quickfix.UnderlyingLocaleOfIssue_swigregister(UnderlyingLocaleOfIssuePtr)

class UnderlyingInstrRegistry(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrRegistry, name)
    def __repr__(self):
        return "<C FIX::UnderlyingInstrRegistry instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingInstrRegistry, 'this', _quickfix.new_UnderlyingInstrRegistry(*args))
        _swig_setattr(self, UnderlyingInstrRegistry, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingInstrRegistry):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingInstrRegistryPtr(UnderlyingInstrRegistry):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingInstrRegistry, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingInstrRegistry, 'thisown', 0)
        _swig_setattr(self, UnderlyingInstrRegistry,self.__class__,UnderlyingInstrRegistry)
_quickfix.UnderlyingInstrRegistry_swigregister(UnderlyingInstrRegistryPtr)

class LegCountryOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCountryOfIssue, name)
    def __repr__(self):
        return "<C FIX::LegCountryOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCountryOfIssue, 'this', _quickfix.new_LegCountryOfIssue(*args))
        _swig_setattr(self, LegCountryOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCountryOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCountryOfIssuePtr(LegCountryOfIssue):
    def __init__(self, this):
        _swig_setattr(self, LegCountryOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCountryOfIssue, 'thisown', 0)
        _swig_setattr(self, LegCountryOfIssue,self.__class__,LegCountryOfIssue)
_quickfix.LegCountryOfIssue_swigregister(LegCountryOfIssuePtr)

class LegStateOrProvinceOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegStateOrProvinceOfIssue, name)
    def __repr__(self):
        return "<C FIX::LegStateOrProvinceOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegStateOrProvinceOfIssue, 'this', _quickfix.new_LegStateOrProvinceOfIssue(*args))
        _swig_setattr(self, LegStateOrProvinceOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegStateOrProvinceOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegStateOrProvinceOfIssuePtr(LegStateOrProvinceOfIssue):
    def __init__(self, this):
        _swig_setattr(self, LegStateOrProvinceOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegStateOrProvinceOfIssue, 'thisown', 0)
        _swig_setattr(self, LegStateOrProvinceOfIssue,self.__class__,LegStateOrProvinceOfIssue)
_quickfix.LegStateOrProvinceOfIssue_swigregister(LegStateOrProvinceOfIssuePtr)

class LegLocaleOfIssue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegLocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegLocaleOfIssue, name)
    def __repr__(self):
        return "<C FIX::LegLocaleOfIssue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegLocaleOfIssue, 'this', _quickfix.new_LegLocaleOfIssue(*args))
        _swig_setattr(self, LegLocaleOfIssue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegLocaleOfIssue):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegLocaleOfIssuePtr(LegLocaleOfIssue):
    def __init__(self, this):
        _swig_setattr(self, LegLocaleOfIssue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegLocaleOfIssue, 'thisown', 0)
        _swig_setattr(self, LegLocaleOfIssue,self.__class__,LegLocaleOfIssue)
_quickfix.LegLocaleOfIssue_swigregister(LegLocaleOfIssuePtr)

class LegInstrRegistry(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegInstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegInstrRegistry, name)
    def __repr__(self):
        return "<C FIX::LegInstrRegistry instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegInstrRegistry, 'this', _quickfix.new_LegInstrRegistry(*args))
        _swig_setattr(self, LegInstrRegistry, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegInstrRegistry):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegInstrRegistryPtr(LegInstrRegistry):
    def __init__(self, this):
        _swig_setattr(self, LegInstrRegistry, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegInstrRegistry, 'thisown', 0)
        _swig_setattr(self, LegInstrRegistry,self.__class__,LegInstrRegistry)
_quickfix.LegInstrRegistry_swigregister(LegInstrRegistryPtr)

class LegSymbol(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSymbol, name)
    def __repr__(self):
        return "<C FIX::LegSymbol instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSymbol, 'this', _quickfix.new_LegSymbol(*args))
        _swig_setattr(self, LegSymbol, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSymbol):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSymbolPtr(LegSymbol):
    def __init__(self, this):
        _swig_setattr(self, LegSymbol, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSymbol, 'thisown', 0)
        _swig_setattr(self, LegSymbol,self.__class__,LegSymbol)
_quickfix.LegSymbol_swigregister(LegSymbolPtr)

class LegSymbolSfx(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSymbolSfx, name)
    def __repr__(self):
        return "<C FIX::LegSymbolSfx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSymbolSfx, 'this', _quickfix.new_LegSymbolSfx(*args))
        _swig_setattr(self, LegSymbolSfx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSymbolSfx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSymbolSfxPtr(LegSymbolSfx):
    def __init__(self, this):
        _swig_setattr(self, LegSymbolSfx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSymbolSfx, 'thisown', 0)
        _swig_setattr(self, LegSymbolSfx,self.__class__,LegSymbolSfx)
_quickfix.LegSymbolSfx_swigregister(LegSymbolSfxPtr)

class LegSecurityID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityID, name)
    def __repr__(self):
        return "<C FIX::LegSecurityID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityID, 'this', _quickfix.new_LegSecurityID(*args))
        _swig_setattr(self, LegSecurityID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityID):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityIDPtr(LegSecurityID):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityID, 'thisown', 0)
        _swig_setattr(self, LegSecurityID,self.__class__,LegSecurityID)
_quickfix.LegSecurityID_swigregister(LegSecurityIDPtr)

class LegSecurityIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityIDSource, name)
    def __repr__(self):
        return "<C FIX::LegSecurityIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityIDSource, 'this', _quickfix.new_LegSecurityIDSource(*args))
        _swig_setattr(self, LegSecurityIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityIDSourcePtr(LegSecurityIDSource):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityIDSource, 'thisown', 0)
        _swig_setattr(self, LegSecurityIDSource,self.__class__,LegSecurityIDSource)
_quickfix.LegSecurityIDSource_swigregister(LegSecurityIDSourcePtr)

class NoLegSecurityAltID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegSecurityAltID, name)
    def __repr__(self):
        return "<C FIX::NoLegSecurityAltID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoLegSecurityAltID, 'this', _quickfix.new_NoLegSecurityAltID(*args))
        _swig_setattr(self, NoLegSecurityAltID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoLegSecurityAltID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoLegSecurityAltIDPtr(NoLegSecurityAltID):
    def __init__(self, this):
        _swig_setattr(self, NoLegSecurityAltID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoLegSecurityAltID, 'thisown', 0)
        _swig_setattr(self, NoLegSecurityAltID,self.__class__,NoLegSecurityAltID)
_quickfix.NoLegSecurityAltID_swigregister(NoLegSecurityAltIDPtr)

class LegSecurityAltID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityAltID, name)
    def __repr__(self):
        return "<C FIX::LegSecurityAltID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityAltID, 'this', _quickfix.new_LegSecurityAltID(*args))
        _swig_setattr(self, LegSecurityAltID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityAltID):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityAltIDPtr(LegSecurityAltID):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityAltID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityAltID, 'thisown', 0)
        _swig_setattr(self, LegSecurityAltID,self.__class__,LegSecurityAltID)
_quickfix.LegSecurityAltID_swigregister(LegSecurityAltIDPtr)

class LegSecurityAltIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityAltIDSource, name)
    def __repr__(self):
        return "<C FIX::LegSecurityAltIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityAltIDSource, 'this', _quickfix.new_LegSecurityAltIDSource(*args))
        _swig_setattr(self, LegSecurityAltIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityAltIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityAltIDSourcePtr(LegSecurityAltIDSource):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityAltIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityAltIDSource, 'thisown', 0)
        _swig_setattr(self, LegSecurityAltIDSource,self.__class__,LegSecurityAltIDSource)
_quickfix.LegSecurityAltIDSource_swigregister(LegSecurityAltIDSourcePtr)

class LegProduct(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegProduct, name)
    def __repr__(self):
        return "<C FIX::LegProduct instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegProduct, 'this', _quickfix.new_LegProduct(*args))
        _swig_setattr(self, LegProduct, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegProduct):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegProductPtr(LegProduct):
    def __init__(self, this):
        _swig_setattr(self, LegProduct, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegProduct, 'thisown', 0)
        _swig_setattr(self, LegProduct,self.__class__,LegProduct)
_quickfix.LegProduct_swigregister(LegProductPtr)

class LegCFICode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCFICode, name)
    def __repr__(self):
        return "<C FIX::LegCFICode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCFICode, 'this', _quickfix.new_LegCFICode(*args))
        _swig_setattr(self, LegCFICode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCFICode):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCFICodePtr(LegCFICode):
    def __init__(self, this):
        _swig_setattr(self, LegCFICode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCFICode, 'thisown', 0)
        _swig_setattr(self, LegCFICode,self.__class__,LegCFICode)
_quickfix.LegCFICode_swigregister(LegCFICodePtr)

class LegSecurityType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityType, name)
    def __repr__(self):
        return "<C FIX::LegSecurityType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityType, 'this', _quickfix.new_LegSecurityType(*args))
        _swig_setattr(self, LegSecurityType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityTypePtr(LegSecurityType):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityType, 'thisown', 0)
        _swig_setattr(self, LegSecurityType,self.__class__,LegSecurityType)
_quickfix.LegSecurityType_swigregister(LegSecurityTypePtr)

class LegMaturityMonthYear(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegMaturityMonthYear, name)
    def __repr__(self):
        return "<C FIX::LegMaturityMonthYear instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegMaturityMonthYear, 'this', _quickfix.new_LegMaturityMonthYear(*args))
        _swig_setattr(self, LegMaturityMonthYear, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegMaturityMonthYear):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegMaturityMonthYearPtr(LegMaturityMonthYear):
    def __init__(self, this):
        _swig_setattr(self, LegMaturityMonthYear, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegMaturityMonthYear, 'thisown', 0)
        _swig_setattr(self, LegMaturityMonthYear,self.__class__,LegMaturityMonthYear)
_quickfix.LegMaturityMonthYear_swigregister(LegMaturityMonthYearPtr)

class LegMaturityDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegMaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegMaturityDate, name)
    def __repr__(self):
        return "<C FIX::LegMaturityDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegMaturityDate, 'this', _quickfix.new_LegMaturityDate(*args))
        _swig_setattr(self, LegMaturityDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegMaturityDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegMaturityDatePtr(LegMaturityDate):
    def __init__(self, this):
        _swig_setattr(self, LegMaturityDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegMaturityDate, 'thisown', 0)
        _swig_setattr(self, LegMaturityDate,self.__class__,LegMaturityDate)
_quickfix.LegMaturityDate_swigregister(LegMaturityDatePtr)

class LegStrikePrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegStrikePrice, name)
    def __repr__(self):
        return "<C FIX::LegStrikePrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegStrikePrice, 'this', _quickfix.new_LegStrikePrice(*args))
        _swig_setattr(self, LegStrikePrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegStrikePrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegStrikePricePtr(LegStrikePrice):
    def __init__(self, this):
        _swig_setattr(self, LegStrikePrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegStrikePrice, 'thisown', 0)
        _swig_setattr(self, LegStrikePrice,self.__class__,LegStrikePrice)
_quickfix.LegStrikePrice_swigregister(LegStrikePricePtr)

class LegOptAttribute(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegOptAttribute, name)
    def __repr__(self):
        return "<C FIX::LegOptAttribute instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegOptAttribute, 'this', _quickfix.new_LegOptAttribute(*args))
        _swig_setattr(self, LegOptAttribute, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegOptAttribute):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegOptAttributePtr(LegOptAttribute):
    def __init__(self, this):
        _swig_setattr(self, LegOptAttribute, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegOptAttribute, 'thisown', 0)
        _swig_setattr(self, LegOptAttribute,self.__class__,LegOptAttribute)
_quickfix.LegOptAttribute_swigregister(LegOptAttributePtr)

class LegContractMultiplier(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegContractMultiplier, name)
    def __repr__(self):
        return "<C FIX::LegContractMultiplier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegContractMultiplier, 'this', _quickfix.new_LegContractMultiplier(*args))
        _swig_setattr(self, LegContractMultiplier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegContractMultiplier):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegContractMultiplierPtr(LegContractMultiplier):
    def __init__(self, this):
        _swig_setattr(self, LegContractMultiplier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegContractMultiplier, 'thisown', 0)
        _swig_setattr(self, LegContractMultiplier,self.__class__,LegContractMultiplier)
_quickfix.LegContractMultiplier_swigregister(LegContractMultiplierPtr)

class LegCouponRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCouponRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegCouponRate, name)
    def __repr__(self):
        return "<C FIX::LegCouponRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegCouponRate, 'this', _quickfix.new_LegCouponRate(*args))
        _swig_setattr(self, LegCouponRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegCouponRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegCouponRatePtr(LegCouponRate):
    def __init__(self, this):
        _swig_setattr(self, LegCouponRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegCouponRate, 'thisown', 0)
        _swig_setattr(self, LegCouponRate,self.__class__,LegCouponRate)
_quickfix.LegCouponRate_swigregister(LegCouponRatePtr)

class LegSecurityExchange(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityExchange, name)
    def __repr__(self):
        return "<C FIX::LegSecurityExchange instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityExchange, 'this', _quickfix.new_LegSecurityExchange(*args))
        _swig_setattr(self, LegSecurityExchange, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityExchange):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityExchangePtr(LegSecurityExchange):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityExchange, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityExchange, 'thisown', 0)
        _swig_setattr(self, LegSecurityExchange,self.__class__,LegSecurityExchange)
_quickfix.LegSecurityExchange_swigregister(LegSecurityExchangePtr)

class LegIssuer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegIssuer, name)
    def __repr__(self):
        return "<C FIX::LegIssuer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegIssuer, 'this', _quickfix.new_LegIssuer(*args))
        _swig_setattr(self, LegIssuer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegIssuer):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegIssuerPtr(LegIssuer):
    def __init__(self, this):
        _swig_setattr(self, LegIssuer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegIssuer, 'thisown', 0)
        _swig_setattr(self, LegIssuer,self.__class__,LegIssuer)
_quickfix.LegIssuer_swigregister(LegIssuerPtr)

class EncodedLegIssuerLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegIssuerLen, name)
    def __repr__(self):
        return "<C FIX::EncodedLegIssuerLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedLegIssuerLen, 'this', _quickfix.new_EncodedLegIssuerLen(*args))
        _swig_setattr(self, EncodedLegIssuerLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedLegIssuerLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedLegIssuerLenPtr(EncodedLegIssuerLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedLegIssuerLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedLegIssuerLen, 'thisown', 0)
        _swig_setattr(self, EncodedLegIssuerLen,self.__class__,EncodedLegIssuerLen)
_quickfix.EncodedLegIssuerLen_swigregister(EncodedLegIssuerLenPtr)

class EncodedLegIssuer(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegIssuer, name)
    def __repr__(self):
        return "<C FIX::EncodedLegIssuer instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedLegIssuer, 'this', _quickfix.new_EncodedLegIssuer(*args))
        _swig_setattr(self, EncodedLegIssuer, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedLegIssuer):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedLegIssuerPtr(EncodedLegIssuer):
    def __init__(self, this):
        _swig_setattr(self, EncodedLegIssuer, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedLegIssuer, 'thisown', 0)
        _swig_setattr(self, EncodedLegIssuer,self.__class__,EncodedLegIssuer)
_quickfix.EncodedLegIssuer_swigregister(EncodedLegIssuerPtr)

class LegSecurityDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityDesc, name)
    def __repr__(self):
        return "<C FIX::LegSecurityDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecurityDesc, 'this', _quickfix.new_LegSecurityDesc(*args))
        _swig_setattr(self, LegSecurityDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecurityDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecurityDescPtr(LegSecurityDesc):
    def __init__(self, this):
        _swig_setattr(self, LegSecurityDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecurityDesc, 'thisown', 0)
        _swig_setattr(self, LegSecurityDesc,self.__class__,LegSecurityDesc)
_quickfix.LegSecurityDesc_swigregister(LegSecurityDescPtr)

class EncodedLegSecurityDescLen(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegSecurityDescLen, name)
    def __repr__(self):
        return "<C FIX::EncodedLegSecurityDescLen instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedLegSecurityDescLen, 'this', _quickfix.new_EncodedLegSecurityDescLen(*args))
        _swig_setattr(self, EncodedLegSecurityDescLen, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedLegSecurityDescLen):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedLegSecurityDescLenPtr(EncodedLegSecurityDescLen):
    def __init__(self, this):
        _swig_setattr(self, EncodedLegSecurityDescLen, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedLegSecurityDescLen, 'thisown', 0)
        _swig_setattr(self, EncodedLegSecurityDescLen,self.__class__,EncodedLegSecurityDescLen)
_quickfix.EncodedLegSecurityDescLen_swigregister(EncodedLegSecurityDescLenPtr)

class EncodedLegSecurityDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegSecurityDesc, name)
    def __repr__(self):
        return "<C FIX::EncodedLegSecurityDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EncodedLegSecurityDesc, 'this', _quickfix.new_EncodedLegSecurityDesc(*args))
        _swig_setattr(self, EncodedLegSecurityDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EncodedLegSecurityDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class EncodedLegSecurityDescPtr(EncodedLegSecurityDesc):
    def __init__(self, this):
        _swig_setattr(self, EncodedLegSecurityDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EncodedLegSecurityDesc, 'thisown', 0)
        _swig_setattr(self, EncodedLegSecurityDesc,self.__class__,EncodedLegSecurityDesc)
_quickfix.EncodedLegSecurityDesc_swigregister(EncodedLegSecurityDescPtr)

class LegRatioQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRatioQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegRatioQty, name)
    def __repr__(self):
        return "<C FIX::LegRatioQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegRatioQty, 'this', _quickfix.new_LegRatioQty(*args))
        _swig_setattr(self, LegRatioQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegRatioQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegRatioQtyPtr(LegRatioQty):
    def __init__(self, this):
        _swig_setattr(self, LegRatioQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegRatioQty, 'thisown', 0)
        _swig_setattr(self, LegRatioQty,self.__class__,LegRatioQty)
_quickfix.LegRatioQty_swigregister(LegRatioQtyPtr)

class LegSide(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSide, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSide, name)
    def __repr__(self):
        return "<C FIX::LegSide instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSide, 'this', _quickfix.new_LegSide(*args))
        _swig_setattr(self, LegSide, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSide):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSidePtr(LegSide):
    def __init__(self, this):
        _swig_setattr(self, LegSide, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSide, 'thisown', 0)
        _swig_setattr(self, LegSide,self.__class__,LegSide)
_quickfix.LegSide_swigregister(LegSidePtr)

class TradingSessionSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingSessionSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradingSessionSubID, name)
    def __repr__(self):
        return "<C FIX::TradingSessionSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradingSessionSubID, 'this', _quickfix.new_TradingSessionSubID(*args))
        _swig_setattr(self, TradingSessionSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradingSessionSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradingSessionSubIDPtr(TradingSessionSubID):
    def __init__(self, this):
        _swig_setattr(self, TradingSessionSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradingSessionSubID, 'thisown', 0)
        _swig_setattr(self, TradingSessionSubID,self.__class__,TradingSessionSubID)
_quickfix.TradingSessionSubID_swigregister(TradingSessionSubIDPtr)

class AllocType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocType, name)
    def __repr__(self):
        return "<C FIX::AllocType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocType, 'this', _quickfix.new_AllocType(*args))
        _swig_setattr(self, AllocType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocTypePtr(AllocType):
    def __init__(self, this):
        _swig_setattr(self, AllocType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocType, 'thisown', 0)
        _swig_setattr(self, AllocType,self.__class__,AllocType)
_quickfix.AllocType_swigregister(AllocTypePtr)

class NoHops(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoHops, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoHops, name)
    def __repr__(self):
        return "<C FIX::NoHops instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoHops, 'this', _quickfix.new_NoHops(*args))
        _swig_setattr(self, NoHops, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoHops):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoHopsPtr(NoHops):
    def __init__(self, this):
        _swig_setattr(self, NoHops, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoHops, 'thisown', 0)
        _swig_setattr(self, NoHops,self.__class__,NoHops)
_quickfix.NoHops_swigregister(NoHopsPtr)

class HopCompID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HopCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HopCompID, name)
    def __repr__(self):
        return "<C FIX::HopCompID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HopCompID, 'this', _quickfix.new_HopCompID(*args))
        _swig_setattr(self, HopCompID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HopCompID):
        try:
            if self.thisown: destroy(self)
        except: pass

class HopCompIDPtr(HopCompID):
    def __init__(self, this):
        _swig_setattr(self, HopCompID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HopCompID, 'thisown', 0)
        _swig_setattr(self, HopCompID,self.__class__,HopCompID)
_quickfix.HopCompID_swigregister(HopCompIDPtr)

class HopSendingTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HopSendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HopSendingTime, name)
    def __repr__(self):
        return "<C FIX::HopSendingTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HopSendingTime, 'this', _quickfix.new_HopSendingTime(*args))
        _swig_setattr(self, HopSendingTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HopSendingTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class HopSendingTimePtr(HopSendingTime):
    def __init__(self, this):
        _swig_setattr(self, HopSendingTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HopSendingTime, 'thisown', 0)
        _swig_setattr(self, HopSendingTime,self.__class__,HopSendingTime)
_quickfix.HopSendingTime_swigregister(HopSendingTimePtr)

class HopRefID(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HopRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HopRefID, name)
    def __repr__(self):
        return "<C FIX::HopRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, HopRefID, 'this', _quickfix.new_HopRefID(*args))
        _swig_setattr(self, HopRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_HopRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class HopRefIDPtr(HopRefID):
    def __init__(self, this):
        _swig_setattr(self, HopRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HopRefID, 'thisown', 0)
        _swig_setattr(self, HopRefID,self.__class__,HopRefID)
_quickfix.HopRefID_swigregister(HopRefIDPtr)

class MidPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MidPx, name)
    def __repr__(self):
        return "<C FIX::MidPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MidPx, 'this', _quickfix.new_MidPx(*args))
        _swig_setattr(self, MidPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MidPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class MidPxPtr(MidPx):
    def __init__(self, this):
        _swig_setattr(self, MidPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MidPx, 'thisown', 0)
        _swig_setattr(self, MidPx,self.__class__,MidPx)
_quickfix.MidPx_swigregister(MidPxPtr)

class BidYield(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidYield, name)
    def __repr__(self):
        return "<C FIX::BidYield instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidYield, 'this', _quickfix.new_BidYield(*args))
        _swig_setattr(self, BidYield, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidYield):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidYieldPtr(BidYield):
    def __init__(self, this):
        _swig_setattr(self, BidYield, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidYield, 'thisown', 0)
        _swig_setattr(self, BidYield,self.__class__,BidYield)
_quickfix.BidYield_swigregister(BidYieldPtr)

class MidYield(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MidYield, name)
    def __repr__(self):
        return "<C FIX::MidYield instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MidYield, 'this', _quickfix.new_MidYield(*args))
        _swig_setattr(self, MidYield, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MidYield):
        try:
            if self.thisown: destroy(self)
        except: pass

class MidYieldPtr(MidYield):
    def __init__(self, this):
        _swig_setattr(self, MidYield, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MidYield, 'thisown', 0)
        _swig_setattr(self, MidYield,self.__class__,MidYield)
_quickfix.MidYield_swigregister(MidYieldPtr)

class OfferYield(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OfferYield, name)
    def __repr__(self):
        return "<C FIX::OfferYield instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OfferYield, 'this', _quickfix.new_OfferYield(*args))
        _swig_setattr(self, OfferYield, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OfferYield):
        try:
            if self.thisown: destroy(self)
        except: pass

class OfferYieldPtr(OfferYield):
    def __init__(self, this):
        _swig_setattr(self, OfferYield, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OfferYield, 'thisown', 0)
        _swig_setattr(self, OfferYield,self.__class__,OfferYield)
_quickfix.OfferYield_swigregister(OfferYieldPtr)

class ClearingFeeIndicator(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingFeeIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingFeeIndicator, name)
    def __repr__(self):
        return "<C FIX::ClearingFeeIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClearingFeeIndicator, 'this', _quickfix.new_ClearingFeeIndicator(*args))
        _swig_setattr(self, ClearingFeeIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClearingFeeIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClearingFeeIndicatorPtr(ClearingFeeIndicator):
    def __init__(self, this):
        _swig_setattr(self, ClearingFeeIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClearingFeeIndicator, 'thisown', 0)
        _swig_setattr(self, ClearingFeeIndicator,self.__class__,ClearingFeeIndicator)
_quickfix.ClearingFeeIndicator_swigregister(ClearingFeeIndicatorPtr)

class WorkingIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkingIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, WorkingIndicator, name)
    def __repr__(self):
        return "<C FIX::WorkingIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, WorkingIndicator, 'this', _quickfix.new_WorkingIndicator(*args))
        _swig_setattr(self, WorkingIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_WorkingIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class WorkingIndicatorPtr(WorkingIndicator):
    def __init__(self, this):
        _swig_setattr(self, WorkingIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, WorkingIndicator, 'thisown', 0)
        _swig_setattr(self, WorkingIndicator,self.__class__,WorkingIndicator)
_quickfix.WorkingIndicator_swigregister(WorkingIndicatorPtr)

class LegLastPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegLastPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegLastPx, name)
    def __repr__(self):
        return "<C FIX::LegLastPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegLastPx, 'this', _quickfix.new_LegLastPx(*args))
        _swig_setattr(self, LegLastPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegLastPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegLastPxPtr(LegLastPx):
    def __init__(self, this):
        _swig_setattr(self, LegLastPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegLastPx, 'thisown', 0)
        _swig_setattr(self, LegLastPx,self.__class__,LegLastPx)
_quickfix.LegLastPx_swigregister(LegLastPxPtr)

class PriorityIndicator(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorityIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PriorityIndicator, name)
    def __repr__(self):
        return "<C FIX::PriorityIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PriorityIndicator, 'this', _quickfix.new_PriorityIndicator(*args))
        _swig_setattr(self, PriorityIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PriorityIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class PriorityIndicatorPtr(PriorityIndicator):
    def __init__(self, this):
        _swig_setattr(self, PriorityIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PriorityIndicator, 'thisown', 0)
        _swig_setattr(self, PriorityIndicator,self.__class__,PriorityIndicator)
_quickfix.PriorityIndicator_swigregister(PriorityIndicatorPtr)

class PriceImprovement(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceImprovement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PriceImprovement, name)
    def __repr__(self):
        return "<C FIX::PriceImprovement instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PriceImprovement, 'this', _quickfix.new_PriceImprovement(*args))
        _swig_setattr(self, PriceImprovement, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PriceImprovement):
        try:
            if self.thisown: destroy(self)
        except: pass

class PriceImprovementPtr(PriceImprovement):
    def __init__(self, this):
        _swig_setattr(self, PriceImprovement, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PriceImprovement, 'thisown', 0)
        _swig_setattr(self, PriceImprovement,self.__class__,PriceImprovement)
_quickfix.PriceImprovement_swigregister(PriceImprovementPtr)

class Price2(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Price2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Price2, name)
    def __repr__(self):
        return "<C FIX::Price2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Price2, 'this', _quickfix.new_Price2(*args))
        _swig_setattr(self, Price2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Price2):
        try:
            if self.thisown: destroy(self)
        except: pass

class Price2Ptr(Price2):
    def __init__(self, this):
        _swig_setattr(self, Price2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Price2, 'thisown', 0)
        _swig_setattr(self, Price2,self.__class__,Price2)
_quickfix.Price2_swigregister(Price2Ptr)

class LastForwardPoints2(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastForwardPoints2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastForwardPoints2, name)
    def __repr__(self):
        return "<C FIX::LastForwardPoints2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastForwardPoints2, 'this', _quickfix.new_LastForwardPoints2(*args))
        _swig_setattr(self, LastForwardPoints2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastForwardPoints2):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastForwardPoints2Ptr(LastForwardPoints2):
    def __init__(self, this):
        _swig_setattr(self, LastForwardPoints2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastForwardPoints2, 'thisown', 0)
        _swig_setattr(self, LastForwardPoints2,self.__class__,LastForwardPoints2)
_quickfix.LastForwardPoints2_swigregister(LastForwardPoints2Ptr)

class BidForwardPoints2(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidForwardPoints2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BidForwardPoints2, name)
    def __repr__(self):
        return "<C FIX::BidForwardPoints2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BidForwardPoints2, 'this', _quickfix.new_BidForwardPoints2(*args))
        _swig_setattr(self, BidForwardPoints2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BidForwardPoints2):
        try:
            if self.thisown: destroy(self)
        except: pass

class BidForwardPoints2Ptr(BidForwardPoints2):
    def __init__(self, this):
        _swig_setattr(self, BidForwardPoints2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BidForwardPoints2, 'thisown', 0)
        _swig_setattr(self, BidForwardPoints2,self.__class__,BidForwardPoints2)
_quickfix.BidForwardPoints2_swigregister(BidForwardPoints2Ptr)

class OfferForwardPoints2(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferForwardPoints2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OfferForwardPoints2, name)
    def __repr__(self):
        return "<C FIX::OfferForwardPoints2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OfferForwardPoints2, 'this', _quickfix.new_OfferForwardPoints2(*args))
        _swig_setattr(self, OfferForwardPoints2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OfferForwardPoints2):
        try:
            if self.thisown: destroy(self)
        except: pass

class OfferForwardPoints2Ptr(OfferForwardPoints2):
    def __init__(self, this):
        _swig_setattr(self, OfferForwardPoints2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OfferForwardPoints2, 'thisown', 0)
        _swig_setattr(self, OfferForwardPoints2,self.__class__,OfferForwardPoints2)
_quickfix.OfferForwardPoints2_swigregister(OfferForwardPoints2Ptr)

class RFQReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RFQReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RFQReqID, name)
    def __repr__(self):
        return "<C FIX::RFQReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RFQReqID, 'this', _quickfix.new_RFQReqID(*args))
        _swig_setattr(self, RFQReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RFQReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RFQReqIDPtr(RFQReqID):
    def __init__(self, this):
        _swig_setattr(self, RFQReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RFQReqID, 'thisown', 0)
        _swig_setattr(self, RFQReqID,self.__class__,RFQReqID)
_quickfix.RFQReqID_swigregister(RFQReqIDPtr)

class MktBidPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MktBidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MktBidPx, name)
    def __repr__(self):
        return "<C FIX::MktBidPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MktBidPx, 'this', _quickfix.new_MktBidPx(*args))
        _swig_setattr(self, MktBidPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MktBidPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class MktBidPxPtr(MktBidPx):
    def __init__(self, this):
        _swig_setattr(self, MktBidPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MktBidPx, 'thisown', 0)
        _swig_setattr(self, MktBidPx,self.__class__,MktBidPx)
_quickfix.MktBidPx_swigregister(MktBidPxPtr)

class MktOfferPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MktOfferPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MktOfferPx, name)
    def __repr__(self):
        return "<C FIX::MktOfferPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MktOfferPx, 'this', _quickfix.new_MktOfferPx(*args))
        _swig_setattr(self, MktOfferPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MktOfferPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class MktOfferPxPtr(MktOfferPx):
    def __init__(self, this):
        _swig_setattr(self, MktOfferPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MktOfferPx, 'thisown', 0)
        _swig_setattr(self, MktOfferPx,self.__class__,MktOfferPx)
_quickfix.MktOfferPx_swigregister(MktOfferPxPtr)

class MinBidSize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinBidSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MinBidSize, name)
    def __repr__(self):
        return "<C FIX::MinBidSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MinBidSize, 'this', _quickfix.new_MinBidSize(*args))
        _swig_setattr(self, MinBidSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MinBidSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class MinBidSizePtr(MinBidSize):
    def __init__(self, this):
        _swig_setattr(self, MinBidSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MinBidSize, 'thisown', 0)
        _swig_setattr(self, MinBidSize,self.__class__,MinBidSize)
_quickfix.MinBidSize_swigregister(MinBidSizePtr)

class MinOfferSize(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinOfferSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MinOfferSize, name)
    def __repr__(self):
        return "<C FIX::MinOfferSize instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MinOfferSize, 'this', _quickfix.new_MinOfferSize(*args))
        _swig_setattr(self, MinOfferSize, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MinOfferSize):
        try:
            if self.thisown: destroy(self)
        except: pass

class MinOfferSizePtr(MinOfferSize):
    def __init__(self, this):
        _swig_setattr(self, MinOfferSize, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MinOfferSize, 'thisown', 0)
        _swig_setattr(self, MinOfferSize,self.__class__,MinOfferSize)
_quickfix.MinOfferSize_swigregister(MinOfferSizePtr)

class QuoteStatusReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteStatusReqID, name)
    def __repr__(self):
        return "<C FIX::QuoteStatusReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteStatusReqID, 'this', _quickfix.new_QuoteStatusReqID(*args))
        _swig_setattr(self, QuoteStatusReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteStatusReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteStatusReqIDPtr(QuoteStatusReqID):
    def __init__(self, this):
        _swig_setattr(self, QuoteStatusReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteStatusReqID, 'thisown', 0)
        _swig_setattr(self, QuoteStatusReqID,self.__class__,QuoteStatusReqID)
_quickfix.QuoteStatusReqID_swigregister(QuoteStatusReqIDPtr)

class LegalConfirm(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegalConfirm, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegalConfirm, name)
    def __repr__(self):
        return "<C FIX::LegalConfirm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegalConfirm, 'this', _quickfix.new_LegalConfirm(*args))
        _swig_setattr(self, LegalConfirm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegalConfirm):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegalConfirmPtr(LegalConfirm):
    def __init__(self, this):
        _swig_setattr(self, LegalConfirm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegalConfirm, 'thisown', 0)
        _swig_setattr(self, LegalConfirm,self.__class__,LegalConfirm)
_quickfix.LegalConfirm_swigregister(LegalConfirmPtr)

class UnderlyingLastPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLastPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLastPx, name)
    def __repr__(self):
        return "<C FIX::UnderlyingLastPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingLastPx, 'this', _quickfix.new_UnderlyingLastPx(*args))
        _swig_setattr(self, UnderlyingLastPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingLastPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingLastPxPtr(UnderlyingLastPx):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingLastPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingLastPx, 'thisown', 0)
        _swig_setattr(self, UnderlyingLastPx,self.__class__,UnderlyingLastPx)
_quickfix.UnderlyingLastPx_swigregister(UnderlyingLastPxPtr)

class UnderlyingLastQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLastQty, name)
    def __repr__(self):
        return "<C FIX::UnderlyingLastQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingLastQty, 'this', _quickfix.new_UnderlyingLastQty(*args))
        _swig_setattr(self, UnderlyingLastQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingLastQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingLastQtyPtr(UnderlyingLastQty):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingLastQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingLastQty, 'thisown', 0)
        _swig_setattr(self, UnderlyingLastQty,self.__class__,UnderlyingLastQty)
_quickfix.UnderlyingLastQty_swigregister(UnderlyingLastQtyPtr)

class LegRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegRefID, name)
    def __repr__(self):
        return "<C FIX::LegRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegRefID, 'this', _quickfix.new_LegRefID(*args))
        _swig_setattr(self, LegRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegRefIDPtr(LegRefID):
    def __init__(self, this):
        _swig_setattr(self, LegRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegRefID, 'thisown', 0)
        _swig_setattr(self, LegRefID,self.__class__,LegRefID)
_quickfix.LegRefID_swigregister(LegRefIDPtr)

class ContraLegRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraLegRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContraLegRefID, name)
    def __repr__(self):
        return "<C FIX::ContraLegRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContraLegRefID, 'this', _quickfix.new_ContraLegRefID(*args))
        _swig_setattr(self, ContraLegRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContraLegRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContraLegRefIDPtr(ContraLegRefID):
    def __init__(self, this):
        _swig_setattr(self, ContraLegRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContraLegRefID, 'thisown', 0)
        _swig_setattr(self, ContraLegRefID,self.__class__,ContraLegRefID)
_quickfix.ContraLegRefID_swigregister(ContraLegRefIDPtr)

class SettlCurrBidFxRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrBidFxRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrBidFxRate, name)
    def __repr__(self):
        return "<C FIX::SettlCurrBidFxRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlCurrBidFxRate, 'this', _quickfix.new_SettlCurrBidFxRate(*args))
        _swig_setattr(self, SettlCurrBidFxRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlCurrBidFxRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlCurrBidFxRatePtr(SettlCurrBidFxRate):
    def __init__(self, this):
        _swig_setattr(self, SettlCurrBidFxRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlCurrBidFxRate, 'thisown', 0)
        _swig_setattr(self, SettlCurrBidFxRate,self.__class__,SettlCurrBidFxRate)
_quickfix.SettlCurrBidFxRate_swigregister(SettlCurrBidFxRatePtr)

class SettlCurrOfferFxRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrOfferFxRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrOfferFxRate, name)
    def __repr__(self):
        return "<C FIX::SettlCurrOfferFxRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlCurrOfferFxRate, 'this', _quickfix.new_SettlCurrOfferFxRate(*args))
        _swig_setattr(self, SettlCurrOfferFxRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlCurrOfferFxRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlCurrOfferFxRatePtr(SettlCurrOfferFxRate):
    def __init__(self, this):
        _swig_setattr(self, SettlCurrOfferFxRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlCurrOfferFxRate, 'thisown', 0)
        _swig_setattr(self, SettlCurrOfferFxRate,self.__class__,SettlCurrOfferFxRate)
_quickfix.SettlCurrOfferFxRate_swigregister(SettlCurrOfferFxRatePtr)

class QuoteRequestRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRequestRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRequestRejectReason, name)
    def __repr__(self):
        return "<C FIX::QuoteRequestRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteRequestRejectReason, 'this', _quickfix.new_QuoteRequestRejectReason(*args))
        _swig_setattr(self, QuoteRequestRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteRequestRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteRequestRejectReasonPtr(QuoteRequestRejectReason):
    def __init__(self, this):
        _swig_setattr(self, QuoteRequestRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteRequestRejectReason, 'thisown', 0)
        _swig_setattr(self, QuoteRequestRejectReason,self.__class__,QuoteRequestRejectReason)
_quickfix.QuoteRequestRejectReason_swigregister(QuoteRequestRejectReasonPtr)

class SideComplianceID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideComplianceID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SideComplianceID, name)
    def __repr__(self):
        return "<C FIX::SideComplianceID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SideComplianceID, 'this', _quickfix.new_SideComplianceID(*args))
        _swig_setattr(self, SideComplianceID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SideComplianceID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SideComplianceIDPtr(SideComplianceID):
    def __init__(self, this):
        _swig_setattr(self, SideComplianceID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SideComplianceID, 'thisown', 0)
        _swig_setattr(self, SideComplianceID,self.__class__,SideComplianceID)
_quickfix.SideComplianceID_swigregister(SideComplianceIDPtr)

class AcctIDSource(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AcctIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AcctIDSource, name)
    def __repr__(self):
        return "<C FIX::AcctIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AcctIDSource, 'this', _quickfix.new_AcctIDSource(*args))
        _swig_setattr(self, AcctIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AcctIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class AcctIDSourcePtr(AcctIDSource):
    def __init__(self, this):
        _swig_setattr(self, AcctIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AcctIDSource, 'thisown', 0)
        _swig_setattr(self, AcctIDSource,self.__class__,AcctIDSource)
_quickfix.AcctIDSource_swigregister(AcctIDSourcePtr)

class AllocAcctIDSource(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAcctIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAcctIDSource, name)
    def __repr__(self):
        return "<C FIX::AllocAcctIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocAcctIDSource, 'this', _quickfix.new_AllocAcctIDSource(*args))
        _swig_setattr(self, AllocAcctIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocAcctIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocAcctIDSourcePtr(AllocAcctIDSource):
    def __init__(self, this):
        _swig_setattr(self, AllocAcctIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocAcctIDSource, 'thisown', 0)
        _swig_setattr(self, AllocAcctIDSource,self.__class__,AllocAcctIDSource)
_quickfix.AllocAcctIDSource_swigregister(AllocAcctIDSourcePtr)

class BenchmarkPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkPrice, name)
    def __repr__(self):
        return "<C FIX::BenchmarkPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkPrice, 'this', _quickfix.new_BenchmarkPrice(*args))
        _swig_setattr(self, BenchmarkPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkPricePtr(BenchmarkPrice):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkPrice, 'thisown', 0)
        _swig_setattr(self, BenchmarkPrice,self.__class__,BenchmarkPrice)
_quickfix.BenchmarkPrice_swigregister(BenchmarkPricePtr)

class BenchmarkPriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkPriceType, name)
    def __repr__(self):
        return "<C FIX::BenchmarkPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkPriceType, 'this', _quickfix.new_BenchmarkPriceType(*args))
        _swig_setattr(self, BenchmarkPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkPriceTypePtr(BenchmarkPriceType):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkPriceType, 'thisown', 0)
        _swig_setattr(self, BenchmarkPriceType,self.__class__,BenchmarkPriceType)
_quickfix.BenchmarkPriceType_swigregister(BenchmarkPriceTypePtr)

class ConfirmID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmID, name)
    def __repr__(self):
        return "<C FIX::ConfirmID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmID, 'this', _quickfix.new_ConfirmID(*args))
        _swig_setattr(self, ConfirmID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmIDPtr(ConfirmID):
    def __init__(self, this):
        _swig_setattr(self, ConfirmID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmID, 'thisown', 0)
        _swig_setattr(self, ConfirmID,self.__class__,ConfirmID)
_quickfix.ConfirmID_swigregister(ConfirmIDPtr)

class ConfirmStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmStatus, name)
    def __repr__(self):
        return "<C FIX::ConfirmStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmStatus, 'this', _quickfix.new_ConfirmStatus(*args))
        _swig_setattr(self, ConfirmStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmStatusPtr(ConfirmStatus):
    def __init__(self, this):
        _swig_setattr(self, ConfirmStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmStatus, 'thisown', 0)
        _swig_setattr(self, ConfirmStatus,self.__class__,ConfirmStatus)
_quickfix.ConfirmStatus_swigregister(ConfirmStatusPtr)

class ConfirmTransType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmTransType, name)
    def __repr__(self):
        return "<C FIX::ConfirmTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmTransType, 'this', _quickfix.new_ConfirmTransType(*args))
        _swig_setattr(self, ConfirmTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmTransTypePtr(ConfirmTransType):
    def __init__(self, this):
        _swig_setattr(self, ConfirmTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmTransType, 'thisown', 0)
        _swig_setattr(self, ConfirmTransType,self.__class__,ConfirmTransType)
_quickfix.ConfirmTransType_swigregister(ConfirmTransTypePtr)

class ContractSettlMonth(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContractSettlMonth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContractSettlMonth, name)
    def __repr__(self):
        return "<C FIX::ContractSettlMonth instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContractSettlMonth, 'this', _quickfix.new_ContractSettlMonth(*args))
        _swig_setattr(self, ContractSettlMonth, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContractSettlMonth):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContractSettlMonthPtr(ContractSettlMonth):
    def __init__(self, this):
        _swig_setattr(self, ContractSettlMonth, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContractSettlMonth, 'thisown', 0)
        _swig_setattr(self, ContractSettlMonth,self.__class__,ContractSettlMonth)
_quickfix.ContractSettlMonth_swigregister(ContractSettlMonthPtr)

class DeliveryForm(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryForm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryForm, name)
    def __repr__(self):
        return "<C FIX::DeliveryForm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeliveryForm, 'this', _quickfix.new_DeliveryForm(*args))
        _swig_setattr(self, DeliveryForm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeliveryForm):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeliveryFormPtr(DeliveryForm):
    def __init__(self, this):
        _swig_setattr(self, DeliveryForm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeliveryForm, 'thisown', 0)
        _swig_setattr(self, DeliveryForm,self.__class__,DeliveryForm)
_quickfix.DeliveryForm_swigregister(DeliveryFormPtr)

class LastParPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastParPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastParPx, name)
    def __repr__(self):
        return "<C FIX::LastParPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastParPx, 'this', _quickfix.new_LastParPx(*args))
        _swig_setattr(self, LastParPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastParPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastParPxPtr(LastParPx):
    def __init__(self, this):
        _swig_setattr(self, LastParPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastParPx, 'thisown', 0)
        _swig_setattr(self, LastParPx,self.__class__,LastParPx)
_quickfix.LastParPx_swigregister(LastParPxPtr)

class NoLegAllocs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegAllocs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegAllocs, name)
    def __repr__(self):
        return "<C FIX::NoLegAllocs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoLegAllocs, 'this', _quickfix.new_NoLegAllocs(*args))
        _swig_setattr(self, NoLegAllocs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoLegAllocs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoLegAllocsPtr(NoLegAllocs):
    def __init__(self, this):
        _swig_setattr(self, NoLegAllocs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoLegAllocs, 'thisown', 0)
        _swig_setattr(self, NoLegAllocs,self.__class__,NoLegAllocs)
_quickfix.NoLegAllocs_swigregister(NoLegAllocsPtr)

class LegAllocAccount(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocAccount, name)
    def __repr__(self):
        return "<C FIX::LegAllocAccount instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegAllocAccount, 'this', _quickfix.new_LegAllocAccount(*args))
        _swig_setattr(self, LegAllocAccount, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegAllocAccount):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegAllocAccountPtr(LegAllocAccount):
    def __init__(self, this):
        _swig_setattr(self, LegAllocAccount, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegAllocAccount, 'thisown', 0)
        _swig_setattr(self, LegAllocAccount,self.__class__,LegAllocAccount)
_quickfix.LegAllocAccount_swigregister(LegAllocAccountPtr)

class LegIndividualAllocID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIndividualAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegIndividualAllocID, name)
    def __repr__(self):
        return "<C FIX::LegIndividualAllocID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegIndividualAllocID, 'this', _quickfix.new_LegIndividualAllocID(*args))
        _swig_setattr(self, LegIndividualAllocID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegIndividualAllocID):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegIndividualAllocIDPtr(LegIndividualAllocID):
    def __init__(self, this):
        _swig_setattr(self, LegIndividualAllocID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegIndividualAllocID, 'thisown', 0)
        _swig_setattr(self, LegIndividualAllocID,self.__class__,LegIndividualAllocID)
_quickfix.LegIndividualAllocID_swigregister(LegIndividualAllocIDPtr)

class LegAllocQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocQty, name)
    def __repr__(self):
        return "<C FIX::LegAllocQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegAllocQty, 'this', _quickfix.new_LegAllocQty(*args))
        _swig_setattr(self, LegAllocQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegAllocQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegAllocQtyPtr(LegAllocQty):
    def __init__(self, this):
        _swig_setattr(self, LegAllocQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegAllocQty, 'thisown', 0)
        _swig_setattr(self, LegAllocQty,self.__class__,LegAllocQty)
_quickfix.LegAllocQty_swigregister(LegAllocQtyPtr)

class LegAllocAcctIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocAcctIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocAcctIDSource, name)
    def __repr__(self):
        return "<C FIX::LegAllocAcctIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegAllocAcctIDSource, 'this', _quickfix.new_LegAllocAcctIDSource(*args))
        _swig_setattr(self, LegAllocAcctIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegAllocAcctIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegAllocAcctIDSourcePtr(LegAllocAcctIDSource):
    def __init__(self, this):
        _swig_setattr(self, LegAllocAcctIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegAllocAcctIDSource, 'thisown', 0)
        _swig_setattr(self, LegAllocAcctIDSource,self.__class__,LegAllocAcctIDSource)
_quickfix.LegAllocAcctIDSource_swigregister(LegAllocAcctIDSourcePtr)

class LegSettlCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlCurrency, name)
    def __repr__(self):
        return "<C FIX::LegSettlCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSettlCurrency, 'this', _quickfix.new_LegSettlCurrency(*args))
        _swig_setattr(self, LegSettlCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSettlCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSettlCurrencyPtr(LegSettlCurrency):
    def __init__(self, this):
        _swig_setattr(self, LegSettlCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSettlCurrency, 'thisown', 0)
        _swig_setattr(self, LegSettlCurrency,self.__class__,LegSettlCurrency)
_quickfix.LegSettlCurrency_swigregister(LegSettlCurrencyPtr)

class LegBenchmarkCurveCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkCurveCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkCurveCurrency, name)
    def __repr__(self):
        return "<C FIX::LegBenchmarkCurveCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegBenchmarkCurveCurrency, 'this', _quickfix.new_LegBenchmarkCurveCurrency(*args))
        _swig_setattr(self, LegBenchmarkCurveCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegBenchmarkCurveCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegBenchmarkCurveCurrencyPtr(LegBenchmarkCurveCurrency):
    def __init__(self, this):
        _swig_setattr(self, LegBenchmarkCurveCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegBenchmarkCurveCurrency, 'thisown', 0)
        _swig_setattr(self, LegBenchmarkCurveCurrency,self.__class__,LegBenchmarkCurveCurrency)
_quickfix.LegBenchmarkCurveCurrency_swigregister(LegBenchmarkCurveCurrencyPtr)

class LegBenchmarkCurveName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkCurveName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkCurveName, name)
    def __repr__(self):
        return "<C FIX::LegBenchmarkCurveName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegBenchmarkCurveName, 'this', _quickfix.new_LegBenchmarkCurveName(*args))
        _swig_setattr(self, LegBenchmarkCurveName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegBenchmarkCurveName):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegBenchmarkCurveNamePtr(LegBenchmarkCurveName):
    def __init__(self, this):
        _swig_setattr(self, LegBenchmarkCurveName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegBenchmarkCurveName, 'thisown', 0)
        _swig_setattr(self, LegBenchmarkCurveName,self.__class__,LegBenchmarkCurveName)
_quickfix.LegBenchmarkCurveName_swigregister(LegBenchmarkCurveNamePtr)

class LegBenchmarkCurvePoint(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkCurvePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkCurvePoint, name)
    def __repr__(self):
        return "<C FIX::LegBenchmarkCurvePoint instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegBenchmarkCurvePoint, 'this', _quickfix.new_LegBenchmarkCurvePoint(*args))
        _swig_setattr(self, LegBenchmarkCurvePoint, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegBenchmarkCurvePoint):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegBenchmarkCurvePointPtr(LegBenchmarkCurvePoint):
    def __init__(self, this):
        _swig_setattr(self, LegBenchmarkCurvePoint, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegBenchmarkCurvePoint, 'thisown', 0)
        _swig_setattr(self, LegBenchmarkCurvePoint,self.__class__,LegBenchmarkCurvePoint)
_quickfix.LegBenchmarkCurvePoint_swigregister(LegBenchmarkCurvePointPtr)

class LegBenchmarkPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkPrice, name)
    def __repr__(self):
        return "<C FIX::LegBenchmarkPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegBenchmarkPrice, 'this', _quickfix.new_LegBenchmarkPrice(*args))
        _swig_setattr(self, LegBenchmarkPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegBenchmarkPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegBenchmarkPricePtr(LegBenchmarkPrice):
    def __init__(self, this):
        _swig_setattr(self, LegBenchmarkPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegBenchmarkPrice, 'thisown', 0)
        _swig_setattr(self, LegBenchmarkPrice,self.__class__,LegBenchmarkPrice)
_quickfix.LegBenchmarkPrice_swigregister(LegBenchmarkPricePtr)

class LegBenchmarkPriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkPriceType, name)
    def __repr__(self):
        return "<C FIX::LegBenchmarkPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegBenchmarkPriceType, 'this', _quickfix.new_LegBenchmarkPriceType(*args))
        _swig_setattr(self, LegBenchmarkPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegBenchmarkPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegBenchmarkPriceTypePtr(LegBenchmarkPriceType):
    def __init__(self, this):
        _swig_setattr(self, LegBenchmarkPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegBenchmarkPriceType, 'thisown', 0)
        _swig_setattr(self, LegBenchmarkPriceType,self.__class__,LegBenchmarkPriceType)
_quickfix.LegBenchmarkPriceType_swigregister(LegBenchmarkPriceTypePtr)

class LegBidPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegBidPx, name)
    def __repr__(self):
        return "<C FIX::LegBidPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegBidPx, 'this', _quickfix.new_LegBidPx(*args))
        _swig_setattr(self, LegBidPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegBidPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegBidPxPtr(LegBidPx):
    def __init__(self, this):
        _swig_setattr(self, LegBidPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegBidPx, 'thisown', 0)
        _swig_setattr(self, LegBidPx,self.__class__,LegBidPx)
_quickfix.LegBidPx_swigregister(LegBidPxPtr)

class LegIOIQty(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIOIQty, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegIOIQty, name)
    def __repr__(self):
        return "<C FIX::LegIOIQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegIOIQty, 'this', _quickfix.new_LegIOIQty(*args))
        _swig_setattr(self, LegIOIQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegIOIQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegIOIQtyPtr(LegIOIQty):
    def __init__(self, this):
        _swig_setattr(self, LegIOIQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegIOIQty, 'thisown', 0)
        _swig_setattr(self, LegIOIQty,self.__class__,LegIOIQty)
_quickfix.LegIOIQty_swigregister(LegIOIQtyPtr)

class NoLegStipulations(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegStipulations, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegStipulations, name)
    def __repr__(self):
        return "<C FIX::NoLegStipulations instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoLegStipulations, 'this', _quickfix.new_NoLegStipulations(*args))
        _swig_setattr(self, NoLegStipulations, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoLegStipulations):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoLegStipulationsPtr(NoLegStipulations):
    def __init__(self, this):
        _swig_setattr(self, NoLegStipulations, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoLegStipulations, 'thisown', 0)
        _swig_setattr(self, NoLegStipulations,self.__class__,NoLegStipulations)
_quickfix.NoLegStipulations_swigregister(NoLegStipulationsPtr)

class LegOfferPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOfferPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegOfferPx, name)
    def __repr__(self):
        return "<C FIX::LegOfferPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegOfferPx, 'this', _quickfix.new_LegOfferPx(*args))
        _swig_setattr(self, LegOfferPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegOfferPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegOfferPxPtr(LegOfferPx):
    def __init__(self, this):
        _swig_setattr(self, LegOfferPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegOfferPx, 'thisown', 0)
        _swig_setattr(self, LegOfferPx,self.__class__,LegOfferPx)
_quickfix.LegOfferPx_swigregister(LegOfferPxPtr)

class LegOrderQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegOrderQty, name)
    def __repr__(self):
        return "<C FIX::LegOrderQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegOrderQty, 'this', _quickfix.new_LegOrderQty(*args))
        _swig_setattr(self, LegOrderQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegOrderQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegOrderQtyPtr(LegOrderQty):
    def __init__(self, this):
        _swig_setattr(self, LegOrderQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegOrderQty, 'thisown', 0)
        _swig_setattr(self, LegOrderQty,self.__class__,LegOrderQty)
_quickfix.LegOrderQty_swigregister(LegOrderQtyPtr)

class LegPriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegPriceType, name)
    def __repr__(self):
        return "<C FIX::LegPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegPriceType, 'this', _quickfix.new_LegPriceType(*args))
        _swig_setattr(self, LegPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegPriceTypePtr(LegPriceType):
    def __init__(self, this):
        _swig_setattr(self, LegPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegPriceType, 'thisown', 0)
        _swig_setattr(self, LegPriceType,self.__class__,LegPriceType)
_quickfix.LegPriceType_swigregister(LegPriceTypePtr)

class LegQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegQty, name)
    def __repr__(self):
        return "<C FIX::LegQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegQty, 'this', _quickfix.new_LegQty(*args))
        _swig_setattr(self, LegQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegQtyPtr(LegQty):
    def __init__(self, this):
        _swig_setattr(self, LegQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegQty, 'thisown', 0)
        _swig_setattr(self, LegQty,self.__class__,LegQty)
_quickfix.LegQty_swigregister(LegQtyPtr)

class LegStipulationType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStipulationType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegStipulationType, name)
    def __repr__(self):
        return "<C FIX::LegStipulationType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegStipulationType, 'this', _quickfix.new_LegStipulationType(*args))
        _swig_setattr(self, LegStipulationType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegStipulationType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegStipulationTypePtr(LegStipulationType):
    def __init__(self, this):
        _swig_setattr(self, LegStipulationType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegStipulationType, 'thisown', 0)
        _swig_setattr(self, LegStipulationType,self.__class__,LegStipulationType)
_quickfix.LegStipulationType_swigregister(LegStipulationTypePtr)

class LegStipulationValue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStipulationValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegStipulationValue, name)
    def __repr__(self):
        return "<C FIX::LegStipulationValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegStipulationValue, 'this', _quickfix.new_LegStipulationValue(*args))
        _swig_setattr(self, LegStipulationValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegStipulationValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegStipulationValuePtr(LegStipulationValue):
    def __init__(self, this):
        _swig_setattr(self, LegStipulationValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegStipulationValue, 'thisown', 0)
        _swig_setattr(self, LegStipulationValue,self.__class__,LegStipulationValue)
_quickfix.LegStipulationValue_swigregister(LegStipulationValuePtr)

class LegSwapType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSwapType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSwapType, name)
    def __repr__(self):
        return "<C FIX::LegSwapType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSwapType, 'this', _quickfix.new_LegSwapType(*args))
        _swig_setattr(self, LegSwapType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSwapType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSwapTypePtr(LegSwapType):
    def __init__(self, this):
        _swig_setattr(self, LegSwapType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSwapType, 'thisown', 0)
        _swig_setattr(self, LegSwapType,self.__class__,LegSwapType)
_quickfix.LegSwapType_swigregister(LegSwapTypePtr)

class Pool(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pool, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Pool, name)
    def __repr__(self):
        return "<C FIX::Pool instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Pool, 'this', _quickfix.new_Pool(*args))
        _swig_setattr(self, Pool, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Pool):
        try:
            if self.thisown: destroy(self)
        except: pass

class PoolPtr(Pool):
    def __init__(self, this):
        _swig_setattr(self, Pool, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Pool, 'thisown', 0)
        _swig_setattr(self, Pool,self.__class__,Pool)
_quickfix.Pool_swigregister(PoolPtr)

class QuotePriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuotePriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuotePriceType, name)
    def __repr__(self):
        return "<C FIX::QuotePriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuotePriceType, 'this', _quickfix.new_QuotePriceType(*args))
        _swig_setattr(self, QuotePriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuotePriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuotePriceTypePtr(QuotePriceType):
    def __init__(self, this):
        _swig_setattr(self, QuotePriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuotePriceType, 'thisown', 0)
        _swig_setattr(self, QuotePriceType,self.__class__,QuotePriceType)
_quickfix.QuotePriceType_swigregister(QuotePriceTypePtr)

class QuoteRespID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRespID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRespID, name)
    def __repr__(self):
        return "<C FIX::QuoteRespID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteRespID, 'this', _quickfix.new_QuoteRespID(*args))
        _swig_setattr(self, QuoteRespID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteRespID):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteRespIDPtr(QuoteRespID):
    def __init__(self, this):
        _swig_setattr(self, QuoteRespID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteRespID, 'thisown', 0)
        _swig_setattr(self, QuoteRespID,self.__class__,QuoteRespID)
_quickfix.QuoteRespID_swigregister(QuoteRespIDPtr)

class QuoteRespType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRespType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRespType, name)
    def __repr__(self):
        return "<C FIX::QuoteRespType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteRespType, 'this', _quickfix.new_QuoteRespType(*args))
        _swig_setattr(self, QuoteRespType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteRespType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteRespTypePtr(QuoteRespType):
    def __init__(self, this):
        _swig_setattr(self, QuoteRespType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteRespType, 'thisown', 0)
        _swig_setattr(self, QuoteRespType,self.__class__,QuoteRespType)
_quickfix.QuoteRespType_swigregister(QuoteRespTypePtr)

class QuoteQualifier(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteQualifier, name)
    def __repr__(self):
        return "<C FIX::QuoteQualifier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteQualifier, 'this', _quickfix.new_QuoteQualifier(*args))
        _swig_setattr(self, QuoteQualifier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteQualifier):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteQualifierPtr(QuoteQualifier):
    def __init__(self, this):
        _swig_setattr(self, QuoteQualifier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteQualifier, 'thisown', 0)
        _swig_setattr(self, QuoteQualifier,self.__class__,QuoteQualifier)
_quickfix.QuoteQualifier_swigregister(QuoteQualifierPtr)

class YieldRedemptionDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldRedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, YieldRedemptionDate, name)
    def __repr__(self):
        return "<C FIX::YieldRedemptionDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, YieldRedemptionDate, 'this', _quickfix.new_YieldRedemptionDate(*args))
        _swig_setattr(self, YieldRedemptionDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_YieldRedemptionDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class YieldRedemptionDatePtr(YieldRedemptionDate):
    def __init__(self, this):
        _swig_setattr(self, YieldRedemptionDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, YieldRedemptionDate, 'thisown', 0)
        _swig_setattr(self, YieldRedemptionDate,self.__class__,YieldRedemptionDate)
_quickfix.YieldRedemptionDate_swigregister(YieldRedemptionDatePtr)

class YieldRedemptionPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldRedemptionPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, YieldRedemptionPrice, name)
    def __repr__(self):
        return "<C FIX::YieldRedemptionPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, YieldRedemptionPrice, 'this', _quickfix.new_YieldRedemptionPrice(*args))
        _swig_setattr(self, YieldRedemptionPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_YieldRedemptionPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class YieldRedemptionPricePtr(YieldRedemptionPrice):
    def __init__(self, this):
        _swig_setattr(self, YieldRedemptionPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, YieldRedemptionPrice, 'thisown', 0)
        _swig_setattr(self, YieldRedemptionPrice,self.__class__,YieldRedemptionPrice)
_quickfix.YieldRedemptionPrice_swigregister(YieldRedemptionPricePtr)

class YieldRedemptionPriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldRedemptionPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, YieldRedemptionPriceType, name)
    def __repr__(self):
        return "<C FIX::YieldRedemptionPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, YieldRedemptionPriceType, 'this', _quickfix.new_YieldRedemptionPriceType(*args))
        _swig_setattr(self, YieldRedemptionPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_YieldRedemptionPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class YieldRedemptionPriceTypePtr(YieldRedemptionPriceType):
    def __init__(self, this):
        _swig_setattr(self, YieldRedemptionPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, YieldRedemptionPriceType, 'thisown', 0)
        _swig_setattr(self, YieldRedemptionPriceType,self.__class__,YieldRedemptionPriceType)
_quickfix.YieldRedemptionPriceType_swigregister(YieldRedemptionPriceTypePtr)

class BenchmarkSecurityID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkSecurityID, name)
    def __repr__(self):
        return "<C FIX::BenchmarkSecurityID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkSecurityID, 'this', _quickfix.new_BenchmarkSecurityID(*args))
        _swig_setattr(self, BenchmarkSecurityID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkSecurityID):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkSecurityIDPtr(BenchmarkSecurityID):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkSecurityID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkSecurityID, 'thisown', 0)
        _swig_setattr(self, BenchmarkSecurityID,self.__class__,BenchmarkSecurityID)
_quickfix.BenchmarkSecurityID_swigregister(BenchmarkSecurityIDPtr)

class ReversalIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReversalIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ReversalIndicator, name)
    def __repr__(self):
        return "<C FIX::ReversalIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ReversalIndicator, 'this', _quickfix.new_ReversalIndicator(*args))
        _swig_setattr(self, ReversalIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ReversalIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class ReversalIndicatorPtr(ReversalIndicator):
    def __init__(self, this):
        _swig_setattr(self, ReversalIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ReversalIndicator, 'thisown', 0)
        _swig_setattr(self, ReversalIndicator,self.__class__,ReversalIndicator)
_quickfix.ReversalIndicator_swigregister(ReversalIndicatorPtr)

class YieldCalcDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldCalcDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, YieldCalcDate, name)
    def __repr__(self):
        return "<C FIX::YieldCalcDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, YieldCalcDate, 'this', _quickfix.new_YieldCalcDate(*args))
        _swig_setattr(self, YieldCalcDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_YieldCalcDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class YieldCalcDatePtr(YieldCalcDate):
    def __init__(self, this):
        _swig_setattr(self, YieldCalcDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, YieldCalcDate, 'thisown', 0)
        _swig_setattr(self, YieldCalcDate,self.__class__,YieldCalcDate)
_quickfix.YieldCalcDate_swigregister(YieldCalcDatePtr)

class NoPositions(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPositions, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoPositions, name)
    def __repr__(self):
        return "<C FIX::NoPositions instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoPositions, 'this', _quickfix.new_NoPositions(*args))
        _swig_setattr(self, NoPositions, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoPositions):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoPositionsPtr(NoPositions):
    def __init__(self, this):
        _swig_setattr(self, NoPositions, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoPositions, 'thisown', 0)
        _swig_setattr(self, NoPositions,self.__class__,NoPositions)
_quickfix.NoPositions_swigregister(NoPositionsPtr)

class PosType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosType, name)
    def __repr__(self):
        return "<C FIX::PosType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosType, 'this', _quickfix.new_PosType(*args))
        _swig_setattr(self, PosType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosTypePtr(PosType):
    def __init__(self, this):
        _swig_setattr(self, PosType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosType, 'thisown', 0)
        _swig_setattr(self, PosType,self.__class__,PosType)
_quickfix.PosType_swigregister(PosTypePtr)

class LongQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LongQty, name)
    def __repr__(self):
        return "<C FIX::LongQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LongQty, 'this', _quickfix.new_LongQty(*args))
        _swig_setattr(self, LongQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LongQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class LongQtyPtr(LongQty):
    def __init__(self, this):
        _swig_setattr(self, LongQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LongQty, 'thisown', 0)
        _swig_setattr(self, LongQty,self.__class__,LongQty)
_quickfix.LongQty_swigregister(LongQtyPtr)

class ShortQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ShortQty, name)
    def __repr__(self):
        return "<C FIX::ShortQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ShortQty, 'this', _quickfix.new_ShortQty(*args))
        _swig_setattr(self, ShortQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ShortQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class ShortQtyPtr(ShortQty):
    def __init__(self, this):
        _swig_setattr(self, ShortQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ShortQty, 'thisown', 0)
        _swig_setattr(self, ShortQty,self.__class__,ShortQty)
_quickfix.ShortQty_swigregister(ShortQtyPtr)

class PosQtyStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosQtyStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosQtyStatus, name)
    def __repr__(self):
        return "<C FIX::PosQtyStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosQtyStatus, 'this', _quickfix.new_PosQtyStatus(*args))
        _swig_setattr(self, PosQtyStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosQtyStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosQtyStatusPtr(PosQtyStatus):
    def __init__(self, this):
        _swig_setattr(self, PosQtyStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosQtyStatus, 'thisown', 0)
        _swig_setattr(self, PosQtyStatus,self.__class__,PosQtyStatus)
_quickfix.PosQtyStatus_swigregister(PosQtyStatusPtr)

class PosAmtType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosAmtType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosAmtType, name)
    def __repr__(self):
        return "<C FIX::PosAmtType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosAmtType, 'this', _quickfix.new_PosAmtType(*args))
        _swig_setattr(self, PosAmtType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosAmtType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosAmtTypePtr(PosAmtType):
    def __init__(self, this):
        _swig_setattr(self, PosAmtType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosAmtType, 'thisown', 0)
        _swig_setattr(self, PosAmtType,self.__class__,PosAmtType)
_quickfix.PosAmtType_swigregister(PosAmtTypePtr)

class PosAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosAmt, name)
    def __repr__(self):
        return "<C FIX::PosAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosAmt, 'this', _quickfix.new_PosAmt(*args))
        _swig_setattr(self, PosAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosAmtPtr(PosAmt):
    def __init__(self, this):
        _swig_setattr(self, PosAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosAmt, 'thisown', 0)
        _swig_setattr(self, PosAmt,self.__class__,PosAmt)
_quickfix.PosAmt_swigregister(PosAmtPtr)

class PosTransType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosTransType, name)
    def __repr__(self):
        return "<C FIX::PosTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosTransType, 'this', _quickfix.new_PosTransType(*args))
        _swig_setattr(self, PosTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosTransTypePtr(PosTransType):
    def __init__(self, this):
        _swig_setattr(self, PosTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosTransType, 'thisown', 0)
        _swig_setattr(self, PosTransType,self.__class__,PosTransType)
_quickfix.PosTransType_swigregister(PosTransTypePtr)

class PosReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqID, name)
    def __repr__(self):
        return "<C FIX::PosReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosReqID, 'this', _quickfix.new_PosReqID(*args))
        _swig_setattr(self, PosReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosReqIDPtr(PosReqID):
    def __init__(self, this):
        _swig_setattr(self, PosReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosReqID, 'thisown', 0)
        _swig_setattr(self, PosReqID,self.__class__,PosReqID)
_quickfix.PosReqID_swigregister(PosReqIDPtr)

class NoUnderlyings(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyings, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyings, name)
    def __repr__(self):
        return "<C FIX::NoUnderlyings instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoUnderlyings, 'this', _quickfix.new_NoUnderlyings(*args))
        _swig_setattr(self, NoUnderlyings, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoUnderlyings):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoUnderlyingsPtr(NoUnderlyings):
    def __init__(self, this):
        _swig_setattr(self, NoUnderlyings, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoUnderlyings, 'thisown', 0)
        _swig_setattr(self, NoUnderlyings,self.__class__,NoUnderlyings)
_quickfix.NoUnderlyings_swigregister(NoUnderlyingsPtr)

class PosMaintAction(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintAction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintAction, name)
    def __repr__(self):
        return "<C FIX::PosMaintAction instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosMaintAction, 'this', _quickfix.new_PosMaintAction(*args))
        _swig_setattr(self, PosMaintAction, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosMaintAction):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosMaintActionPtr(PosMaintAction):
    def __init__(self, this):
        _swig_setattr(self, PosMaintAction, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosMaintAction, 'thisown', 0)
        _swig_setattr(self, PosMaintAction,self.__class__,PosMaintAction)
_quickfix.PosMaintAction_swigregister(PosMaintActionPtr)

class OrigPosReqRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigPosReqRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrigPosReqRefID, name)
    def __repr__(self):
        return "<C FIX::OrigPosReqRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrigPosReqRefID, 'this', _quickfix.new_OrigPosReqRefID(*args))
        _swig_setattr(self, OrigPosReqRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrigPosReqRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrigPosReqRefIDPtr(OrigPosReqRefID):
    def __init__(self, this):
        _swig_setattr(self, OrigPosReqRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrigPosReqRefID, 'thisown', 0)
        _swig_setattr(self, OrigPosReqRefID,self.__class__,OrigPosReqRefID)
_quickfix.OrigPosReqRefID_swigregister(OrigPosReqRefIDPtr)

class PosMaintRptRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintRptRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintRptRefID, name)
    def __repr__(self):
        return "<C FIX::PosMaintRptRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosMaintRptRefID, 'this', _quickfix.new_PosMaintRptRefID(*args))
        _swig_setattr(self, PosMaintRptRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosMaintRptRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosMaintRptRefIDPtr(PosMaintRptRefID):
    def __init__(self, this):
        _swig_setattr(self, PosMaintRptRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosMaintRptRefID, 'thisown', 0)
        _swig_setattr(self, PosMaintRptRefID,self.__class__,PosMaintRptRefID)
_quickfix.PosMaintRptRefID_swigregister(PosMaintRptRefIDPtr)

class ClearingBusinessDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingBusinessDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingBusinessDate, name)
    def __repr__(self):
        return "<C FIX::ClearingBusinessDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClearingBusinessDate, 'this', _quickfix.new_ClearingBusinessDate(*args))
        _swig_setattr(self, ClearingBusinessDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClearingBusinessDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClearingBusinessDatePtr(ClearingBusinessDate):
    def __init__(self, this):
        _swig_setattr(self, ClearingBusinessDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClearingBusinessDate, 'thisown', 0)
        _swig_setattr(self, ClearingBusinessDate,self.__class__,ClearingBusinessDate)
_quickfix.ClearingBusinessDate_swigregister(ClearingBusinessDatePtr)

class SettlSessID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlSessID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlSessID, name)
    def __repr__(self):
        return "<C FIX::SettlSessID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlSessID, 'this', _quickfix.new_SettlSessID(*args))
        _swig_setattr(self, SettlSessID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlSessID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlSessIDPtr(SettlSessID):
    def __init__(self, this):
        _swig_setattr(self, SettlSessID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlSessID, 'thisown', 0)
        _swig_setattr(self, SettlSessID,self.__class__,SettlSessID)
_quickfix.SettlSessID_swigregister(SettlSessIDPtr)

class SettlSessSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlSessSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlSessSubID, name)
    def __repr__(self):
        return "<C FIX::SettlSessSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlSessSubID, 'this', _quickfix.new_SettlSessSubID(*args))
        _swig_setattr(self, SettlSessSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlSessSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlSessSubIDPtr(SettlSessSubID):
    def __init__(self, this):
        _swig_setattr(self, SettlSessSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlSessSubID, 'thisown', 0)
        _swig_setattr(self, SettlSessSubID,self.__class__,SettlSessSubID)
_quickfix.SettlSessSubID_swigregister(SettlSessSubIDPtr)

class AdjustmentType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjustmentType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AdjustmentType, name)
    def __repr__(self):
        return "<C FIX::AdjustmentType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AdjustmentType, 'this', _quickfix.new_AdjustmentType(*args))
        _swig_setattr(self, AdjustmentType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AdjustmentType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AdjustmentTypePtr(AdjustmentType):
    def __init__(self, this):
        _swig_setattr(self, AdjustmentType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AdjustmentType, 'thisown', 0)
        _swig_setattr(self, AdjustmentType,self.__class__,AdjustmentType)
_quickfix.AdjustmentType_swigregister(AdjustmentTypePtr)

class ContraryInstructionIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraryInstructionIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ContraryInstructionIndicator, name)
    def __repr__(self):
        return "<C FIX::ContraryInstructionIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ContraryInstructionIndicator, 'this', _quickfix.new_ContraryInstructionIndicator(*args))
        _swig_setattr(self, ContraryInstructionIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ContraryInstructionIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class ContraryInstructionIndicatorPtr(ContraryInstructionIndicator):
    def __init__(self, this):
        _swig_setattr(self, ContraryInstructionIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ContraryInstructionIndicator, 'thisown', 0)
        _swig_setattr(self, ContraryInstructionIndicator,self.__class__,ContraryInstructionIndicator)
_quickfix.ContraryInstructionIndicator_swigregister(ContraryInstructionIndicatorPtr)

class PriorSpreadIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorSpreadIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PriorSpreadIndicator, name)
    def __repr__(self):
        return "<C FIX::PriorSpreadIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PriorSpreadIndicator, 'this', _quickfix.new_PriorSpreadIndicator(*args))
        _swig_setattr(self, PriorSpreadIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PriorSpreadIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class PriorSpreadIndicatorPtr(PriorSpreadIndicator):
    def __init__(self, this):
        _swig_setattr(self, PriorSpreadIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PriorSpreadIndicator, 'thisown', 0)
        _swig_setattr(self, PriorSpreadIndicator,self.__class__,PriorSpreadIndicator)
_quickfix.PriorSpreadIndicator_swigregister(PriorSpreadIndicatorPtr)

class PosMaintRptID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintRptID, name)
    def __repr__(self):
        return "<C FIX::PosMaintRptID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosMaintRptID, 'this', _quickfix.new_PosMaintRptID(*args))
        _swig_setattr(self, PosMaintRptID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosMaintRptID):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosMaintRptIDPtr(PosMaintRptID):
    def __init__(self, this):
        _swig_setattr(self, PosMaintRptID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosMaintRptID, 'thisown', 0)
        _swig_setattr(self, PosMaintRptID,self.__class__,PosMaintRptID)
_quickfix.PosMaintRptID_swigregister(PosMaintRptIDPtr)

class PosMaintStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintStatus, name)
    def __repr__(self):
        return "<C FIX::PosMaintStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosMaintStatus, 'this', _quickfix.new_PosMaintStatus(*args))
        _swig_setattr(self, PosMaintStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosMaintStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosMaintStatusPtr(PosMaintStatus):
    def __init__(self, this):
        _swig_setattr(self, PosMaintStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosMaintStatus, 'thisown', 0)
        _swig_setattr(self, PosMaintStatus,self.__class__,PosMaintStatus)
_quickfix.PosMaintStatus_swigregister(PosMaintStatusPtr)

class PosMaintResult(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintResult, name)
    def __repr__(self):
        return "<C FIX::PosMaintResult instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosMaintResult, 'this', _quickfix.new_PosMaintResult(*args))
        _swig_setattr(self, PosMaintResult, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosMaintResult):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosMaintResultPtr(PosMaintResult):
    def __init__(self, this):
        _swig_setattr(self, PosMaintResult, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosMaintResult, 'thisown', 0)
        _swig_setattr(self, PosMaintResult,self.__class__,PosMaintResult)
_quickfix.PosMaintResult_swigregister(PosMaintResultPtr)

class PosReqType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqType, name)
    def __repr__(self):
        return "<C FIX::PosReqType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosReqType, 'this', _quickfix.new_PosReqType(*args))
        _swig_setattr(self, PosReqType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosReqType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosReqTypePtr(PosReqType):
    def __init__(self, this):
        _swig_setattr(self, PosReqType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosReqType, 'thisown', 0)
        _swig_setattr(self, PosReqType,self.__class__,PosReqType)
_quickfix.PosReqType_swigregister(PosReqTypePtr)

class ResponseTransportType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseTransportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseTransportType, name)
    def __repr__(self):
        return "<C FIX::ResponseTransportType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ResponseTransportType, 'this', _quickfix.new_ResponseTransportType(*args))
        _swig_setattr(self, ResponseTransportType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ResponseTransportType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ResponseTransportTypePtr(ResponseTransportType):
    def __init__(self, this):
        _swig_setattr(self, ResponseTransportType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ResponseTransportType, 'thisown', 0)
        _swig_setattr(self, ResponseTransportType,self.__class__,ResponseTransportType)
_quickfix.ResponseTransportType_swigregister(ResponseTransportTypePtr)

class ResponseDestination(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseDestination, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseDestination, name)
    def __repr__(self):
        return "<C FIX::ResponseDestination instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ResponseDestination, 'this', _quickfix.new_ResponseDestination(*args))
        _swig_setattr(self, ResponseDestination, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ResponseDestination):
        try:
            if self.thisown: destroy(self)
        except: pass

class ResponseDestinationPtr(ResponseDestination):
    def __init__(self, this):
        _swig_setattr(self, ResponseDestination, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ResponseDestination, 'thisown', 0)
        _swig_setattr(self, ResponseDestination,self.__class__,ResponseDestination)
_quickfix.ResponseDestination_swigregister(ResponseDestinationPtr)

class TotalNumPosReports(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumPosReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumPosReports, name)
    def __repr__(self):
        return "<C FIX::TotalNumPosReports instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalNumPosReports, 'this', _quickfix.new_TotalNumPosReports(*args))
        _swig_setattr(self, TotalNumPosReports, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalNumPosReports):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalNumPosReportsPtr(TotalNumPosReports):
    def __init__(self, this):
        _swig_setattr(self, TotalNumPosReports, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalNumPosReports, 'thisown', 0)
        _swig_setattr(self, TotalNumPosReports,self.__class__,TotalNumPosReports)
_quickfix.TotalNumPosReports_swigregister(TotalNumPosReportsPtr)

class PosReqResult(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqResult, name)
    def __repr__(self):
        return "<C FIX::PosReqResult instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosReqResult, 'this', _quickfix.new_PosReqResult(*args))
        _swig_setattr(self, PosReqResult, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosReqResult):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosReqResultPtr(PosReqResult):
    def __init__(self, this):
        _swig_setattr(self, PosReqResult, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosReqResult, 'thisown', 0)
        _swig_setattr(self, PosReqResult,self.__class__,PosReqResult)
_quickfix.PosReqResult_swigregister(PosReqResultPtr)

class PosReqStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqStatus, name)
    def __repr__(self):
        return "<C FIX::PosReqStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PosReqStatus, 'this', _quickfix.new_PosReqStatus(*args))
        _swig_setattr(self, PosReqStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PosReqStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class PosReqStatusPtr(PosReqStatus):
    def __init__(self, this):
        _swig_setattr(self, PosReqStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PosReqStatus, 'thisown', 0)
        _swig_setattr(self, PosReqStatus,self.__class__,PosReqStatus)
_quickfix.PosReqStatus_swigregister(PosReqStatusPtr)

class SettlPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPrice, name)
    def __repr__(self):
        return "<C FIX::SettlPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPrice, 'this', _quickfix.new_SettlPrice(*args))
        _swig_setattr(self, SettlPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPricePtr(SettlPrice):
    def __init__(self, this):
        _swig_setattr(self, SettlPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPrice, 'thisown', 0)
        _swig_setattr(self, SettlPrice,self.__class__,SettlPrice)
_quickfix.SettlPrice_swigregister(SettlPricePtr)

class SettlPriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPriceType, name)
    def __repr__(self):
        return "<C FIX::SettlPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPriceType, 'this', _quickfix.new_SettlPriceType(*args))
        _swig_setattr(self, SettlPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPriceTypePtr(SettlPriceType):
    def __init__(self, this):
        _swig_setattr(self, SettlPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPriceType, 'thisown', 0)
        _swig_setattr(self, SettlPriceType,self.__class__,SettlPriceType)
_quickfix.SettlPriceType_swigregister(SettlPriceTypePtr)

class UnderlyingSettlPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlPrice, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSettlPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSettlPrice, 'this', _quickfix.new_UnderlyingSettlPrice(*args))
        _swig_setattr(self, UnderlyingSettlPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSettlPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSettlPricePtr(UnderlyingSettlPrice):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSettlPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSettlPrice, 'thisown', 0)
        _swig_setattr(self, UnderlyingSettlPrice,self.__class__,UnderlyingSettlPrice)
_quickfix.UnderlyingSettlPrice_swigregister(UnderlyingSettlPricePtr)

class UnderlyingSettlPriceType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlPriceType, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSettlPriceType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSettlPriceType, 'this', _quickfix.new_UnderlyingSettlPriceType(*args))
        _swig_setattr(self, UnderlyingSettlPriceType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSettlPriceType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSettlPriceTypePtr(UnderlyingSettlPriceType):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSettlPriceType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSettlPriceType, 'thisown', 0)
        _swig_setattr(self, UnderlyingSettlPriceType,self.__class__,UnderlyingSettlPriceType)
_quickfix.UnderlyingSettlPriceType_swigregister(UnderlyingSettlPriceTypePtr)

class PriorSettlPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorSettlPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PriorSettlPrice, name)
    def __repr__(self):
        return "<C FIX::PriorSettlPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PriorSettlPrice, 'this', _quickfix.new_PriorSettlPrice(*args))
        _swig_setattr(self, PriorSettlPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PriorSettlPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class PriorSettlPricePtr(PriorSettlPrice):
    def __init__(self, this):
        _swig_setattr(self, PriorSettlPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PriorSettlPrice, 'thisown', 0)
        _swig_setattr(self, PriorSettlPrice,self.__class__,PriorSettlPrice)
_quickfix.PriorSettlPrice_swigregister(PriorSettlPricePtr)

class NoQuoteQualifiers(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoQuoteQualifiers, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoQuoteQualifiers, name)
    def __repr__(self):
        return "<C FIX::NoQuoteQualifiers instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoQuoteQualifiers, 'this', _quickfix.new_NoQuoteQualifiers(*args))
        _swig_setattr(self, NoQuoteQualifiers, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoQuoteQualifiers):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoQuoteQualifiersPtr(NoQuoteQualifiers):
    def __init__(self, this):
        _swig_setattr(self, NoQuoteQualifiers, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoQuoteQualifiers, 'thisown', 0)
        _swig_setattr(self, NoQuoteQualifiers,self.__class__,NoQuoteQualifiers)
_quickfix.NoQuoteQualifiers_swigregister(NoQuoteQualifiersPtr)

class AllocSettlCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocSettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocSettlCurrency, name)
    def __repr__(self):
        return "<C FIX::AllocSettlCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocSettlCurrency, 'this', _quickfix.new_AllocSettlCurrency(*args))
        _swig_setattr(self, AllocSettlCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocSettlCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocSettlCurrencyPtr(AllocSettlCurrency):
    def __init__(self, this):
        _swig_setattr(self, AllocSettlCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocSettlCurrency, 'thisown', 0)
        _swig_setattr(self, AllocSettlCurrency,self.__class__,AllocSettlCurrency)
_quickfix.AllocSettlCurrency_swigregister(AllocSettlCurrencyPtr)

class AllocSettlCurrAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocSettlCurrAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocSettlCurrAmt, name)
    def __repr__(self):
        return "<C FIX::AllocSettlCurrAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocSettlCurrAmt, 'this', _quickfix.new_AllocSettlCurrAmt(*args))
        _swig_setattr(self, AllocSettlCurrAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocSettlCurrAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocSettlCurrAmtPtr(AllocSettlCurrAmt):
    def __init__(self, this):
        _swig_setattr(self, AllocSettlCurrAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocSettlCurrAmt, 'thisown', 0)
        _swig_setattr(self, AllocSettlCurrAmt,self.__class__,AllocSettlCurrAmt)
_quickfix.AllocSettlCurrAmt_swigregister(AllocSettlCurrAmtPtr)

class InterestAtMaturity(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestAtMaturity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InterestAtMaturity, name)
    def __repr__(self):
        return "<C FIX::InterestAtMaturity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InterestAtMaturity, 'this', _quickfix.new_InterestAtMaturity(*args))
        _swig_setattr(self, InterestAtMaturity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InterestAtMaturity):
        try:
            if self.thisown: destroy(self)
        except: pass

class InterestAtMaturityPtr(InterestAtMaturity):
    def __init__(self, this):
        _swig_setattr(self, InterestAtMaturity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InterestAtMaturity, 'thisown', 0)
        _swig_setattr(self, InterestAtMaturity,self.__class__,InterestAtMaturity)
_quickfix.InterestAtMaturity_swigregister(InterestAtMaturityPtr)

class LegDatedDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegDatedDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegDatedDate, name)
    def __repr__(self):
        return "<C FIX::LegDatedDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegDatedDate, 'this', _quickfix.new_LegDatedDate(*args))
        _swig_setattr(self, LegDatedDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegDatedDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegDatedDatePtr(LegDatedDate):
    def __init__(self, this):
        _swig_setattr(self, LegDatedDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegDatedDate, 'thisown', 0)
        _swig_setattr(self, LegDatedDate,self.__class__,LegDatedDate)
_quickfix.LegDatedDate_swigregister(LegDatedDatePtr)

class LegPool(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPool, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegPool, name)
    def __repr__(self):
        return "<C FIX::LegPool instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegPool, 'this', _quickfix.new_LegPool(*args))
        _swig_setattr(self, LegPool, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegPool):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegPoolPtr(LegPool):
    def __init__(self, this):
        _swig_setattr(self, LegPool, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegPool, 'thisown', 0)
        _swig_setattr(self, LegPool,self.__class__,LegPool)
_quickfix.LegPool_swigregister(LegPoolPtr)

class AllocInterestAtMaturity(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocInterestAtMaturity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocInterestAtMaturity, name)
    def __repr__(self):
        return "<C FIX::AllocInterestAtMaturity instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocInterestAtMaturity, 'this', _quickfix.new_AllocInterestAtMaturity(*args))
        _swig_setattr(self, AllocInterestAtMaturity, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocInterestAtMaturity):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocInterestAtMaturityPtr(AllocInterestAtMaturity):
    def __init__(self, this):
        _swig_setattr(self, AllocInterestAtMaturity, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocInterestAtMaturity, 'thisown', 0)
        _swig_setattr(self, AllocInterestAtMaturity,self.__class__,AllocInterestAtMaturity)
_quickfix.AllocInterestAtMaturity_swigregister(AllocInterestAtMaturityPtr)

class AllocAccruedInterestAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAccruedInterestAmt, name)
    def __repr__(self):
        return "<C FIX::AllocAccruedInterestAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocAccruedInterestAmt, 'this', _quickfix.new_AllocAccruedInterestAmt(*args))
        _swig_setattr(self, AllocAccruedInterestAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocAccruedInterestAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocAccruedInterestAmtPtr(AllocAccruedInterestAmt):
    def __init__(self, this):
        _swig_setattr(self, AllocAccruedInterestAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocAccruedInterestAmt, 'thisown', 0)
        _swig_setattr(self, AllocAccruedInterestAmt,self.__class__,AllocAccruedInterestAmt)
_quickfix.AllocAccruedInterestAmt_swigregister(AllocAccruedInterestAmtPtr)

class DeliveryDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryDate, name)
    def __repr__(self):
        return "<C FIX::DeliveryDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeliveryDate, 'this', _quickfix.new_DeliveryDate(*args))
        _swig_setattr(self, DeliveryDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeliveryDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeliveryDatePtr(DeliveryDate):
    def __init__(self, this):
        _swig_setattr(self, DeliveryDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeliveryDate, 'thisown', 0)
        _swig_setattr(self, DeliveryDate,self.__class__,DeliveryDate)
_quickfix.DeliveryDate_swigregister(DeliveryDatePtr)

class AssignmentMethod(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentMethod, name)
    def __repr__(self):
        return "<C FIX::AssignmentMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AssignmentMethod, 'this', _quickfix.new_AssignmentMethod(*args))
        _swig_setattr(self, AssignmentMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AssignmentMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class AssignmentMethodPtr(AssignmentMethod):
    def __init__(self, this):
        _swig_setattr(self, AssignmentMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AssignmentMethod, 'thisown', 0)
        _swig_setattr(self, AssignmentMethod,self.__class__,AssignmentMethod)
_quickfix.AssignmentMethod_swigregister(AssignmentMethodPtr)

class AssignmentUnit(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentUnit, name)
    def __repr__(self):
        return "<C FIX::AssignmentUnit instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AssignmentUnit, 'this', _quickfix.new_AssignmentUnit(*args))
        _swig_setattr(self, AssignmentUnit, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AssignmentUnit):
        try:
            if self.thisown: destroy(self)
        except: pass

class AssignmentUnitPtr(AssignmentUnit):
    def __init__(self, this):
        _swig_setattr(self, AssignmentUnit, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AssignmentUnit, 'thisown', 0)
        _swig_setattr(self, AssignmentUnit,self.__class__,AssignmentUnit)
_quickfix.AssignmentUnit_swigregister(AssignmentUnitPtr)

class OpenInterest(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenInterest, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OpenInterest, name)
    def __repr__(self):
        return "<C FIX::OpenInterest instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OpenInterest, 'this', _quickfix.new_OpenInterest(*args))
        _swig_setattr(self, OpenInterest, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OpenInterest):
        try:
            if self.thisown: destroy(self)
        except: pass

class OpenInterestPtr(OpenInterest):
    def __init__(self, this):
        _swig_setattr(self, OpenInterest, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OpenInterest, 'thisown', 0)
        _swig_setattr(self, OpenInterest,self.__class__,OpenInterest)
_quickfix.OpenInterest_swigregister(OpenInterestPtr)

class ExerciseMethod(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExerciseMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExerciseMethod, name)
    def __repr__(self):
        return "<C FIX::ExerciseMethod instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExerciseMethod, 'this', _quickfix.new_ExerciseMethod(*args))
        _swig_setattr(self, ExerciseMethod, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExerciseMethod):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExerciseMethodPtr(ExerciseMethod):
    def __init__(self, this):
        _swig_setattr(self, ExerciseMethod, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExerciseMethod, 'thisown', 0)
        _swig_setattr(self, ExerciseMethod,self.__class__,ExerciseMethod)
_quickfix.ExerciseMethod_swigregister(ExerciseMethodPtr)

class TotNumTradeReports(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNumTradeReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNumTradeReports, name)
    def __repr__(self):
        return "<C FIX::TotNumTradeReports instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNumTradeReports, 'this', _quickfix.new_TotNumTradeReports(*args))
        _swig_setattr(self, TotNumTradeReports, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNumTradeReports):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNumTradeReportsPtr(TotNumTradeReports):
    def __init__(self, this):
        _swig_setattr(self, TotNumTradeReports, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNumTradeReports, 'thisown', 0)
        _swig_setattr(self, TotNumTradeReports,self.__class__,TotNumTradeReports)
_quickfix.TotNumTradeReports_swigregister(TotNumTradeReportsPtr)

class TradeRequestResult(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestResult, name)
    def __repr__(self):
        return "<C FIX::TradeRequestResult instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeRequestResult, 'this', _quickfix.new_TradeRequestResult(*args))
        _swig_setattr(self, TradeRequestResult, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeRequestResult):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeRequestResultPtr(TradeRequestResult):
    def __init__(self, this):
        _swig_setattr(self, TradeRequestResult, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeRequestResult, 'thisown', 0)
        _swig_setattr(self, TradeRequestResult,self.__class__,TradeRequestResult)
_quickfix.TradeRequestResult_swigregister(TradeRequestResultPtr)

class TradeRequestStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestStatus, name)
    def __repr__(self):
        return "<C FIX::TradeRequestStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeRequestStatus, 'this', _quickfix.new_TradeRequestStatus(*args))
        _swig_setattr(self, TradeRequestStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeRequestStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeRequestStatusPtr(TradeRequestStatus):
    def __init__(self, this):
        _swig_setattr(self, TradeRequestStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeRequestStatus, 'thisown', 0)
        _swig_setattr(self, TradeRequestStatus,self.__class__,TradeRequestStatus)
_quickfix.TradeRequestStatus_swigregister(TradeRequestStatusPtr)

class TradeReportRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportRejectReason, name)
    def __repr__(self):
        return "<C FIX::TradeReportRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeReportRejectReason, 'this', _quickfix.new_TradeReportRejectReason(*args))
        _swig_setattr(self, TradeReportRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeReportRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeReportRejectReasonPtr(TradeReportRejectReason):
    def __init__(self, this):
        _swig_setattr(self, TradeReportRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeReportRejectReason, 'thisown', 0)
        _swig_setattr(self, TradeReportRejectReason,self.__class__,TradeReportRejectReason)
_quickfix.TradeReportRejectReason_swigregister(TradeReportRejectReasonPtr)

class SideMultiLegReportingType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideMultiLegReportingType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SideMultiLegReportingType, name)
    def __repr__(self):
        return "<C FIX::SideMultiLegReportingType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SideMultiLegReportingType, 'this', _quickfix.new_SideMultiLegReportingType(*args))
        _swig_setattr(self, SideMultiLegReportingType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SideMultiLegReportingType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SideMultiLegReportingTypePtr(SideMultiLegReportingType):
    def __init__(self, this):
        _swig_setattr(self, SideMultiLegReportingType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SideMultiLegReportingType, 'thisown', 0)
        _swig_setattr(self, SideMultiLegReportingType,self.__class__,SideMultiLegReportingType)
_quickfix.SideMultiLegReportingType_swigregister(SideMultiLegReportingTypePtr)

class NoPosAmt(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPosAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoPosAmt, name)
    def __repr__(self):
        return "<C FIX::NoPosAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoPosAmt, 'this', _quickfix.new_NoPosAmt(*args))
        _swig_setattr(self, NoPosAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoPosAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoPosAmtPtr(NoPosAmt):
    def __init__(self, this):
        _swig_setattr(self, NoPosAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoPosAmt, 'thisown', 0)
        _swig_setattr(self, NoPosAmt,self.__class__,NoPosAmt)
_quickfix.NoPosAmt_swigregister(NoPosAmtPtr)

class AutoAcceptIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoAcceptIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AutoAcceptIndicator, name)
    def __repr__(self):
        return "<C FIX::AutoAcceptIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AutoAcceptIndicator, 'this', _quickfix.new_AutoAcceptIndicator(*args))
        _swig_setattr(self, AutoAcceptIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AutoAcceptIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class AutoAcceptIndicatorPtr(AutoAcceptIndicator):
    def __init__(self, this):
        _swig_setattr(self, AutoAcceptIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AutoAcceptIndicator, 'thisown', 0)
        _swig_setattr(self, AutoAcceptIndicator,self.__class__,AutoAcceptIndicator)
_quickfix.AutoAcceptIndicator_swigregister(AutoAcceptIndicatorPtr)

class AllocReportID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocReportID, name)
    def __repr__(self):
        return "<C FIX::AllocReportID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocReportID, 'this', _quickfix.new_AllocReportID(*args))
        _swig_setattr(self, AllocReportID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocReportID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocReportIDPtr(AllocReportID):
    def __init__(self, this):
        _swig_setattr(self, AllocReportID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocReportID, 'thisown', 0)
        _swig_setattr(self, AllocReportID,self.__class__,AllocReportID)
_quickfix.AllocReportID_swigregister(AllocReportIDPtr)

class NoNested2PartyIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested2PartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested2PartyIDs, name)
    def __repr__(self):
        return "<C FIX::NoNested2PartyIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoNested2PartyIDs, 'this', _quickfix.new_NoNested2PartyIDs(*args))
        _swig_setattr(self, NoNested2PartyIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoNested2PartyIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoNested2PartyIDsPtr(NoNested2PartyIDs):
    def __init__(self, this):
        _swig_setattr(self, NoNested2PartyIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoNested2PartyIDs, 'thisown', 0)
        _swig_setattr(self, NoNested2PartyIDs,self.__class__,NoNested2PartyIDs)
_quickfix.NoNested2PartyIDs_swigregister(NoNested2PartyIDsPtr)

class Nested2PartyID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartyID, name)
    def __repr__(self):
        return "<C FIX::Nested2PartyID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested2PartyID, 'this', _quickfix.new_Nested2PartyID(*args))
        _swig_setattr(self, Nested2PartyID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested2PartyID):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested2PartyIDPtr(Nested2PartyID):
    def __init__(self, this):
        _swig_setattr(self, Nested2PartyID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested2PartyID, 'thisown', 0)
        _swig_setattr(self, Nested2PartyID,self.__class__,Nested2PartyID)
_quickfix.Nested2PartyID_swigregister(Nested2PartyIDPtr)

class Nested2PartyIDSource(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartyIDSource, name)
    def __repr__(self):
        return "<C FIX::Nested2PartyIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested2PartyIDSource, 'this', _quickfix.new_Nested2PartyIDSource(*args))
        _swig_setattr(self, Nested2PartyIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested2PartyIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested2PartyIDSourcePtr(Nested2PartyIDSource):
    def __init__(self, this):
        _swig_setattr(self, Nested2PartyIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested2PartyIDSource, 'thisown', 0)
        _swig_setattr(self, Nested2PartyIDSource,self.__class__,Nested2PartyIDSource)
_quickfix.Nested2PartyIDSource_swigregister(Nested2PartyIDSourcePtr)

class Nested2PartyRole(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartyRole, name)
    def __repr__(self):
        return "<C FIX::Nested2PartyRole instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested2PartyRole, 'this', _quickfix.new_Nested2PartyRole(*args))
        _swig_setattr(self, Nested2PartyRole, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested2PartyRole):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested2PartyRolePtr(Nested2PartyRole):
    def __init__(self, this):
        _swig_setattr(self, Nested2PartyRole, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested2PartyRole, 'thisown', 0)
        _swig_setattr(self, Nested2PartyRole,self.__class__,Nested2PartyRole)
_quickfix.Nested2PartyRole_swigregister(Nested2PartyRolePtr)

class Nested2PartySubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartySubID, name)
    def __repr__(self):
        return "<C FIX::Nested2PartySubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested2PartySubID, 'this', _quickfix.new_Nested2PartySubID(*args))
        _swig_setattr(self, Nested2PartySubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested2PartySubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested2PartySubIDPtr(Nested2PartySubID):
    def __init__(self, this):
        _swig_setattr(self, Nested2PartySubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested2PartySubID, 'thisown', 0)
        _swig_setattr(self, Nested2PartySubID,self.__class__,Nested2PartySubID)
_quickfix.Nested2PartySubID_swigregister(Nested2PartySubIDPtr)

class BenchmarkSecurityIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkSecurityIDSource, name)
    def __repr__(self):
        return "<C FIX::BenchmarkSecurityIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BenchmarkSecurityIDSource, 'this', _quickfix.new_BenchmarkSecurityIDSource(*args))
        _swig_setattr(self, BenchmarkSecurityIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BenchmarkSecurityIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkSecurityIDSourcePtr(BenchmarkSecurityIDSource):
    def __init__(self, this):
        _swig_setattr(self, BenchmarkSecurityIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BenchmarkSecurityIDSource, 'thisown', 0)
        _swig_setattr(self, BenchmarkSecurityIDSource,self.__class__,BenchmarkSecurityIDSource)
_quickfix.BenchmarkSecurityIDSource_swigregister(BenchmarkSecurityIDSourcePtr)

class SecuritySubType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySubType, name)
    def __repr__(self):
        return "<C FIX::SecuritySubType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySubType, 'this', _quickfix.new_SecuritySubType(*args))
        _swig_setattr(self, SecuritySubType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySubType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySubTypePtr(SecuritySubType):
    def __init__(self, this):
        _swig_setattr(self, SecuritySubType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySubType, 'thisown', 0)
        _swig_setattr(self, SecuritySubType,self.__class__,SecuritySubType)
_quickfix.SecuritySubType_swigregister(SecuritySubTypePtr)

class UnderlyingSecuritySubType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecuritySubType, name)
    def __repr__(self):
        return "<C FIX::UnderlyingSecuritySubType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingSecuritySubType, 'this', _quickfix.new_UnderlyingSecuritySubType(*args))
        _swig_setattr(self, UnderlyingSecuritySubType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingSecuritySubType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingSecuritySubTypePtr(UnderlyingSecuritySubType):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingSecuritySubType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingSecuritySubType, 'thisown', 0)
        _swig_setattr(self, UnderlyingSecuritySubType,self.__class__,UnderlyingSecuritySubType)
_quickfix.UnderlyingSecuritySubType_swigregister(UnderlyingSecuritySubTypePtr)

class LegSecuritySubType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecuritySubType, name)
    def __repr__(self):
        return "<C FIX::LegSecuritySubType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSecuritySubType, 'this', _quickfix.new_LegSecuritySubType(*args))
        _swig_setattr(self, LegSecuritySubType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSecuritySubType):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSecuritySubTypePtr(LegSecuritySubType):
    def __init__(self, this):
        _swig_setattr(self, LegSecuritySubType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSecuritySubType, 'thisown', 0)
        _swig_setattr(self, LegSecuritySubType,self.__class__,LegSecuritySubType)
_quickfix.LegSecuritySubType_swigregister(LegSecuritySubTypePtr)

class AllowableOneSidednessPct(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowableOneSidednessPct, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllowableOneSidednessPct, name)
    def __repr__(self):
        return "<C FIX::AllowableOneSidednessPct instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllowableOneSidednessPct, 'this', _quickfix.new_AllowableOneSidednessPct(*args))
        _swig_setattr(self, AllowableOneSidednessPct, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllowableOneSidednessPct):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllowableOneSidednessPctPtr(AllowableOneSidednessPct):
    def __init__(self, this):
        _swig_setattr(self, AllowableOneSidednessPct, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllowableOneSidednessPct, 'thisown', 0)
        _swig_setattr(self, AllowableOneSidednessPct,self.__class__,AllowableOneSidednessPct)
_quickfix.AllowableOneSidednessPct_swigregister(AllowableOneSidednessPctPtr)

class AllowableOneSidednessValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowableOneSidednessValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllowableOneSidednessValue, name)
    def __repr__(self):
        return "<C FIX::AllowableOneSidednessValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllowableOneSidednessValue, 'this', _quickfix.new_AllowableOneSidednessValue(*args))
        _swig_setattr(self, AllowableOneSidednessValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllowableOneSidednessValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllowableOneSidednessValuePtr(AllowableOneSidednessValue):
    def __init__(self, this):
        _swig_setattr(self, AllowableOneSidednessValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllowableOneSidednessValue, 'thisown', 0)
        _swig_setattr(self, AllowableOneSidednessValue,self.__class__,AllowableOneSidednessValue)
_quickfix.AllowableOneSidednessValue_swigregister(AllowableOneSidednessValuePtr)

class AllowableOneSidednessCurr(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowableOneSidednessCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllowableOneSidednessCurr, name)
    def __repr__(self):
        return "<C FIX::AllowableOneSidednessCurr instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllowableOneSidednessCurr, 'this', _quickfix.new_AllowableOneSidednessCurr(*args))
        _swig_setattr(self, AllowableOneSidednessCurr, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllowableOneSidednessCurr):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllowableOneSidednessCurrPtr(AllowableOneSidednessCurr):
    def __init__(self, this):
        _swig_setattr(self, AllowableOneSidednessCurr, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllowableOneSidednessCurr, 'thisown', 0)
        _swig_setattr(self, AllowableOneSidednessCurr,self.__class__,AllowableOneSidednessCurr)
_quickfix.AllowableOneSidednessCurr_swigregister(AllowableOneSidednessCurrPtr)

class NoTrdRegTimestamps(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTrdRegTimestamps, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoTrdRegTimestamps, name)
    def __repr__(self):
        return "<C FIX::NoTrdRegTimestamps instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoTrdRegTimestamps, 'this', _quickfix.new_NoTrdRegTimestamps(*args))
        _swig_setattr(self, NoTrdRegTimestamps, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoTrdRegTimestamps):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoTrdRegTimestampsPtr(NoTrdRegTimestamps):
    def __init__(self, this):
        _swig_setattr(self, NoTrdRegTimestamps, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoTrdRegTimestamps, 'thisown', 0)
        _swig_setattr(self, NoTrdRegTimestamps,self.__class__,NoTrdRegTimestamps)
_quickfix.NoTrdRegTimestamps_swigregister(NoTrdRegTimestampsPtr)

class TrdRegTimestamp(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRegTimestamp, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRegTimestamp, name)
    def __repr__(self):
        return "<C FIX::TrdRegTimestamp instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdRegTimestamp, 'this', _quickfix.new_TrdRegTimestamp(*args))
        _swig_setattr(self, TrdRegTimestamp, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdRegTimestamp):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdRegTimestampPtr(TrdRegTimestamp):
    def __init__(self, this):
        _swig_setattr(self, TrdRegTimestamp, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdRegTimestamp, 'thisown', 0)
        _swig_setattr(self, TrdRegTimestamp,self.__class__,TrdRegTimestamp)
_quickfix.TrdRegTimestamp_swigregister(TrdRegTimestampPtr)

class TrdRegTimestampType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRegTimestampType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRegTimestampType, name)
    def __repr__(self):
        return "<C FIX::TrdRegTimestampType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdRegTimestampType, 'this', _quickfix.new_TrdRegTimestampType(*args))
        _swig_setattr(self, TrdRegTimestampType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdRegTimestampType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdRegTimestampTypePtr(TrdRegTimestampType):
    def __init__(self, this):
        _swig_setattr(self, TrdRegTimestampType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdRegTimestampType, 'thisown', 0)
        _swig_setattr(self, TrdRegTimestampType,self.__class__,TrdRegTimestampType)
_quickfix.TrdRegTimestampType_swigregister(TrdRegTimestampTypePtr)

class TrdRegTimestampOrigin(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRegTimestampOrigin, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRegTimestampOrigin, name)
    def __repr__(self):
        return "<C FIX::TrdRegTimestampOrigin instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdRegTimestampOrigin, 'this', _quickfix.new_TrdRegTimestampOrigin(*args))
        _swig_setattr(self, TrdRegTimestampOrigin, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdRegTimestampOrigin):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdRegTimestampOriginPtr(TrdRegTimestampOrigin):
    def __init__(self, this):
        _swig_setattr(self, TrdRegTimestampOrigin, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdRegTimestampOrigin, 'thisown', 0)
        _swig_setattr(self, TrdRegTimestampOrigin,self.__class__,TrdRegTimestampOrigin)
_quickfix.TrdRegTimestampOrigin_swigregister(TrdRegTimestampOriginPtr)

class ConfirmRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmRefID, name)
    def __repr__(self):
        return "<C FIX::ConfirmRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmRefID, 'this', _quickfix.new_ConfirmRefID(*args))
        _swig_setattr(self, ConfirmRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmRefIDPtr(ConfirmRefID):
    def __init__(self, this):
        _swig_setattr(self, ConfirmRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmRefID, 'thisown', 0)
        _swig_setattr(self, ConfirmRefID,self.__class__,ConfirmRefID)
_quickfix.ConfirmRefID_swigregister(ConfirmRefIDPtr)

class ConfirmType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmType, name)
    def __repr__(self):
        return "<C FIX::ConfirmType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmType, 'this', _quickfix.new_ConfirmType(*args))
        _swig_setattr(self, ConfirmType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmTypePtr(ConfirmType):
    def __init__(self, this):
        _swig_setattr(self, ConfirmType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmType, 'thisown', 0)
        _swig_setattr(self, ConfirmType,self.__class__,ConfirmType)
_quickfix.ConfirmType_swigregister(ConfirmTypePtr)

class ConfirmRejReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmRejReason, name)
    def __repr__(self):
        return "<C FIX::ConfirmRejReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmRejReason, 'this', _quickfix.new_ConfirmRejReason(*args))
        _swig_setattr(self, ConfirmRejReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmRejReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmRejReasonPtr(ConfirmRejReason):
    def __init__(self, this):
        _swig_setattr(self, ConfirmRejReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmRejReason, 'thisown', 0)
        _swig_setattr(self, ConfirmRejReason,self.__class__,ConfirmRejReason)
_quickfix.ConfirmRejReason_swigregister(ConfirmRejReasonPtr)

class BookingType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookingType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BookingType, name)
    def __repr__(self):
        return "<C FIX::BookingType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BookingType, 'this', _quickfix.new_BookingType(*args))
        _swig_setattr(self, BookingType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BookingType):
        try:
            if self.thisown: destroy(self)
        except: pass

class BookingTypePtr(BookingType):
    def __init__(self, this):
        _swig_setattr(self, BookingType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BookingType, 'thisown', 0)
        _swig_setattr(self, BookingType,self.__class__,BookingType)
_quickfix.BookingType_swigregister(BookingTypePtr)

class IndividualAllocRejCode(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndividualAllocRejCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IndividualAllocRejCode, name)
    def __repr__(self):
        return "<C FIX::IndividualAllocRejCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IndividualAllocRejCode, 'this', _quickfix.new_IndividualAllocRejCode(*args))
        _swig_setattr(self, IndividualAllocRejCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IndividualAllocRejCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class IndividualAllocRejCodePtr(IndividualAllocRejCode):
    def __init__(self, this):
        _swig_setattr(self, IndividualAllocRejCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IndividualAllocRejCode, 'thisown', 0)
        _swig_setattr(self, IndividualAllocRejCode,self.__class__,IndividualAllocRejCode)
_quickfix.IndividualAllocRejCode_swigregister(IndividualAllocRejCodePtr)

class SettlInstMsgID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstMsgID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstMsgID, name)
    def __repr__(self):
        return "<C FIX::SettlInstMsgID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstMsgID, 'this', _quickfix.new_SettlInstMsgID(*args))
        _swig_setattr(self, SettlInstMsgID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstMsgID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstMsgIDPtr(SettlInstMsgID):
    def __init__(self, this):
        _swig_setattr(self, SettlInstMsgID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstMsgID, 'thisown', 0)
        _swig_setattr(self, SettlInstMsgID,self.__class__,SettlInstMsgID)
_quickfix.SettlInstMsgID_swigregister(SettlInstMsgIDPtr)

class NoSettlInst(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlInst, name)
    def __repr__(self):
        return "<C FIX::NoSettlInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoSettlInst, 'this', _quickfix.new_NoSettlInst(*args))
        _swig_setattr(self, NoSettlInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoSettlInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoSettlInstPtr(NoSettlInst):
    def __init__(self, this):
        _swig_setattr(self, NoSettlInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoSettlInst, 'thisown', 0)
        _swig_setattr(self, NoSettlInst,self.__class__,NoSettlInst)
_quickfix.NoSettlInst_swigregister(NoSettlInstPtr)

class LastUpdateTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastUpdateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastUpdateTime, name)
    def __repr__(self):
        return "<C FIX::LastUpdateTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastUpdateTime, 'this', _quickfix.new_LastUpdateTime(*args))
        _swig_setattr(self, LastUpdateTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastUpdateTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastUpdateTimePtr(LastUpdateTime):
    def __init__(self, this):
        _swig_setattr(self, LastUpdateTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastUpdateTime, 'thisown', 0)
        _swig_setattr(self, LastUpdateTime,self.__class__,LastUpdateTime)
_quickfix.LastUpdateTime_swigregister(LastUpdateTimePtr)

class AllocSettlInstType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocSettlInstType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocSettlInstType, name)
    def __repr__(self):
        return "<C FIX::AllocSettlInstType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocSettlInstType, 'this', _quickfix.new_AllocSettlInstType(*args))
        _swig_setattr(self, AllocSettlInstType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocSettlInstType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocSettlInstTypePtr(AllocSettlInstType):
    def __init__(self, this):
        _swig_setattr(self, AllocSettlInstType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocSettlInstType, 'thisown', 0)
        _swig_setattr(self, AllocSettlInstType,self.__class__,AllocSettlInstType)
_quickfix.AllocSettlInstType_swigregister(AllocSettlInstTypePtr)

class NoSettlPartyIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlPartyIDs, name)
    def __repr__(self):
        return "<C FIX::NoSettlPartyIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoSettlPartyIDs, 'this', _quickfix.new_NoSettlPartyIDs(*args))
        _swig_setattr(self, NoSettlPartyIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoSettlPartyIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoSettlPartyIDsPtr(NoSettlPartyIDs):
    def __init__(self, this):
        _swig_setattr(self, NoSettlPartyIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoSettlPartyIDs, 'thisown', 0)
        _swig_setattr(self, NoSettlPartyIDs,self.__class__,NoSettlPartyIDs)
_quickfix.NoSettlPartyIDs_swigregister(NoSettlPartyIDsPtr)

class SettlPartyID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartyID, name)
    def __repr__(self):
        return "<C FIX::SettlPartyID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPartyID, 'this', _quickfix.new_SettlPartyID(*args))
        _swig_setattr(self, SettlPartyID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPartyID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPartyIDPtr(SettlPartyID):
    def __init__(self, this):
        _swig_setattr(self, SettlPartyID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPartyID, 'thisown', 0)
        _swig_setattr(self, SettlPartyID,self.__class__,SettlPartyID)
_quickfix.SettlPartyID_swigregister(SettlPartyIDPtr)

class SettlPartyIDSource(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartyIDSource, name)
    def __repr__(self):
        return "<C FIX::SettlPartyIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPartyIDSource, 'this', _quickfix.new_SettlPartyIDSource(*args))
        _swig_setattr(self, SettlPartyIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPartyIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPartyIDSourcePtr(SettlPartyIDSource):
    def __init__(self, this):
        _swig_setattr(self, SettlPartyIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPartyIDSource, 'thisown', 0)
        _swig_setattr(self, SettlPartyIDSource,self.__class__,SettlPartyIDSource)
_quickfix.SettlPartyIDSource_swigregister(SettlPartyIDSourcePtr)

class SettlPartyRole(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartyRole, name)
    def __repr__(self):
        return "<C FIX::SettlPartyRole instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPartyRole, 'this', _quickfix.new_SettlPartyRole(*args))
        _swig_setattr(self, SettlPartyRole, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPartyRole):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPartyRolePtr(SettlPartyRole):
    def __init__(self, this):
        _swig_setattr(self, SettlPartyRole, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPartyRole, 'thisown', 0)
        _swig_setattr(self, SettlPartyRole,self.__class__,SettlPartyRole)
_quickfix.SettlPartyRole_swigregister(SettlPartyRolePtr)

class SettlPartySubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartySubID, name)
    def __repr__(self):
        return "<C FIX::SettlPartySubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPartySubID, 'this', _quickfix.new_SettlPartySubID(*args))
        _swig_setattr(self, SettlPartySubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPartySubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPartySubIDPtr(SettlPartySubID):
    def __init__(self, this):
        _swig_setattr(self, SettlPartySubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPartySubID, 'thisown', 0)
        _swig_setattr(self, SettlPartySubID,self.__class__,SettlPartySubID)
_quickfix.SettlPartySubID_swigregister(SettlPartySubIDPtr)

class SettlPartySubIDType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartySubIDType, name)
    def __repr__(self):
        return "<C FIX::SettlPartySubIDType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlPartySubIDType, 'this', _quickfix.new_SettlPartySubIDType(*args))
        _swig_setattr(self, SettlPartySubIDType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlPartySubIDType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlPartySubIDTypePtr(SettlPartySubIDType):
    def __init__(self, this):
        _swig_setattr(self, SettlPartySubIDType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlPartySubIDType, 'thisown', 0)
        _swig_setattr(self, SettlPartySubIDType,self.__class__,SettlPartySubIDType)
_quickfix.SettlPartySubIDType_swigregister(SettlPartySubIDTypePtr)

class DlvyInstType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DlvyInstType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DlvyInstType, name)
    def __repr__(self):
        return "<C FIX::DlvyInstType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DlvyInstType, 'this', _quickfix.new_DlvyInstType(*args))
        _swig_setattr(self, DlvyInstType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DlvyInstType):
        try:
            if self.thisown: destroy(self)
        except: pass

class DlvyInstTypePtr(DlvyInstType):
    def __init__(self, this):
        _swig_setattr(self, DlvyInstType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DlvyInstType, 'thisown', 0)
        _swig_setattr(self, DlvyInstType,self.__class__,DlvyInstType)
_quickfix.DlvyInstType_swigregister(DlvyInstTypePtr)

class TerminationType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerminationType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TerminationType, name)
    def __repr__(self):
        return "<C FIX::TerminationType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TerminationType, 'this', _quickfix.new_TerminationType(*args))
        _swig_setattr(self, TerminationType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TerminationType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TerminationTypePtr(TerminationType):
    def __init__(self, this):
        _swig_setattr(self, TerminationType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TerminationType, 'thisown', 0)
        _swig_setattr(self, TerminationType,self.__class__,TerminationType)
_quickfix.TerminationType_swigregister(TerminationTypePtr)

class NextExpectedMsgSeqNum(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NextExpectedMsgSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NextExpectedMsgSeqNum, name)
    def __repr__(self):
        return "<C FIX::NextExpectedMsgSeqNum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NextExpectedMsgSeqNum, 'this', _quickfix.new_NextExpectedMsgSeqNum(*args))
        _swig_setattr(self, NextExpectedMsgSeqNum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NextExpectedMsgSeqNum):
        try:
            if self.thisown: destroy(self)
        except: pass

class NextExpectedMsgSeqNumPtr(NextExpectedMsgSeqNum):
    def __init__(self, this):
        _swig_setattr(self, NextExpectedMsgSeqNum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NextExpectedMsgSeqNum, 'thisown', 0)
        _swig_setattr(self, NextExpectedMsgSeqNum,self.__class__,NextExpectedMsgSeqNum)
_quickfix.NextExpectedMsgSeqNum_swigregister(NextExpectedMsgSeqNumPtr)

class OrdStatusReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrdStatusReqID, name)
    def __repr__(self):
        return "<C FIX::OrdStatusReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrdStatusReqID, 'this', _quickfix.new_OrdStatusReqID(*args))
        _swig_setattr(self, OrdStatusReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrdStatusReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrdStatusReqIDPtr(OrdStatusReqID):
    def __init__(self, this):
        _swig_setattr(self, OrdStatusReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrdStatusReqID, 'thisown', 0)
        _swig_setattr(self, OrdStatusReqID,self.__class__,OrdStatusReqID)
_quickfix.OrdStatusReqID_swigregister(OrdStatusReqIDPtr)

class SettlInstReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstReqID, name)
    def __repr__(self):
        return "<C FIX::SettlInstReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstReqID, 'this', _quickfix.new_SettlInstReqID(*args))
        _swig_setattr(self, SettlInstReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstReqIDPtr(SettlInstReqID):
    def __init__(self, this):
        _swig_setattr(self, SettlInstReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstReqID, 'thisown', 0)
        _swig_setattr(self, SettlInstReqID,self.__class__,SettlInstReqID)
_quickfix.SettlInstReqID_swigregister(SettlInstReqIDPtr)

class SettlInstReqRejCode(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstReqRejCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstReqRejCode, name)
    def __repr__(self):
        return "<C FIX::SettlInstReqRejCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstReqRejCode, 'this', _quickfix.new_SettlInstReqRejCode(*args))
        _swig_setattr(self, SettlInstReqRejCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstReqRejCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstReqRejCodePtr(SettlInstReqRejCode):
    def __init__(self, this):
        _swig_setattr(self, SettlInstReqRejCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstReqRejCode, 'thisown', 0)
        _swig_setattr(self, SettlInstReqRejCode,self.__class__,SettlInstReqRejCode)
_quickfix.SettlInstReqRejCode_swigregister(SettlInstReqRejCodePtr)

class SecondaryAllocID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryAllocID, name)
    def __repr__(self):
        return "<C FIX::SecondaryAllocID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryAllocID, 'this', _quickfix.new_SecondaryAllocID(*args))
        _swig_setattr(self, SecondaryAllocID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryAllocID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryAllocIDPtr(SecondaryAllocID):
    def __init__(self, this):
        _swig_setattr(self, SecondaryAllocID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryAllocID, 'thisown', 0)
        _swig_setattr(self, SecondaryAllocID,self.__class__,SecondaryAllocID)
_quickfix.SecondaryAllocID_swigregister(SecondaryAllocIDPtr)

class AllocReportType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocReportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocReportType, name)
    def __repr__(self):
        return "<C FIX::AllocReportType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocReportType, 'this', _quickfix.new_AllocReportType(*args))
        _swig_setattr(self, AllocReportType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocReportType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocReportTypePtr(AllocReportType):
    def __init__(self, this):
        _swig_setattr(self, AllocReportType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocReportType, 'thisown', 0)
        _swig_setattr(self, AllocReportType,self.__class__,AllocReportType)
_quickfix.AllocReportType_swigregister(AllocReportTypePtr)

class AllocReportRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocReportRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocReportRefID, name)
    def __repr__(self):
        return "<C FIX::AllocReportRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocReportRefID, 'this', _quickfix.new_AllocReportRefID(*args))
        _swig_setattr(self, AllocReportRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocReportRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocReportRefIDPtr(AllocReportRefID):
    def __init__(self, this):
        _swig_setattr(self, AllocReportRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocReportRefID, 'thisown', 0)
        _swig_setattr(self, AllocReportRefID,self.__class__,AllocReportRefID)
_quickfix.AllocReportRefID_swigregister(AllocReportRefIDPtr)

class AllocCancReplaceReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocCancReplaceReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocCancReplaceReason, name)
    def __repr__(self):
        return "<C FIX::AllocCancReplaceReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocCancReplaceReason, 'this', _quickfix.new_AllocCancReplaceReason(*args))
        _swig_setattr(self, AllocCancReplaceReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocCancReplaceReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocCancReplaceReasonPtr(AllocCancReplaceReason):
    def __init__(self, this):
        _swig_setattr(self, AllocCancReplaceReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocCancReplaceReason, 'thisown', 0)
        _swig_setattr(self, AllocCancReplaceReason,self.__class__,AllocCancReplaceReason)
_quickfix.AllocCancReplaceReason_swigregister(AllocCancReplaceReasonPtr)

class CopyMsgIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyMsgIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CopyMsgIndicator, name)
    def __repr__(self):
        return "<C FIX::CopyMsgIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CopyMsgIndicator, 'this', _quickfix.new_CopyMsgIndicator(*args))
        _swig_setattr(self, CopyMsgIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CopyMsgIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class CopyMsgIndicatorPtr(CopyMsgIndicator):
    def __init__(self, this):
        _swig_setattr(self, CopyMsgIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CopyMsgIndicator, 'thisown', 0)
        _swig_setattr(self, CopyMsgIndicator,self.__class__,CopyMsgIndicator)
_quickfix.CopyMsgIndicator_swigregister(CopyMsgIndicatorPtr)

class AllocAccountType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAccountType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAccountType, name)
    def __repr__(self):
        return "<C FIX::AllocAccountType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocAccountType, 'this', _quickfix.new_AllocAccountType(*args))
        _swig_setattr(self, AllocAccountType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocAccountType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocAccountTypePtr(AllocAccountType):
    def __init__(self, this):
        _swig_setattr(self, AllocAccountType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocAccountType, 'thisown', 0)
        _swig_setattr(self, AllocAccountType,self.__class__,AllocAccountType)
_quickfix.AllocAccountType_swigregister(AllocAccountTypePtr)

class OrderAvgPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderAvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderAvgPx, name)
    def __repr__(self):
        return "<C FIX::OrderAvgPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderAvgPx, 'this', _quickfix.new_OrderAvgPx(*args))
        _swig_setattr(self, OrderAvgPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderAvgPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderAvgPxPtr(OrderAvgPx):
    def __init__(self, this):
        _swig_setattr(self, OrderAvgPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderAvgPx, 'thisown', 0)
        _swig_setattr(self, OrderAvgPx,self.__class__,OrderAvgPx)
_quickfix.OrderAvgPx_swigregister(OrderAvgPxPtr)

class OrderBookingQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderBookingQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderBookingQty, name)
    def __repr__(self):
        return "<C FIX::OrderBookingQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderBookingQty, 'this', _quickfix.new_OrderBookingQty(*args))
        _swig_setattr(self, OrderBookingQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderBookingQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderBookingQtyPtr(OrderBookingQty):
    def __init__(self, this):
        _swig_setattr(self, OrderBookingQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderBookingQty, 'thisown', 0)
        _swig_setattr(self, OrderBookingQty,self.__class__,OrderBookingQty)
_quickfix.OrderBookingQty_swigregister(OrderBookingQtyPtr)

class NoSettlPartySubIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlPartySubIDs, name)
    def __repr__(self):
        return "<C FIX::NoSettlPartySubIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoSettlPartySubIDs, 'this', _quickfix.new_NoSettlPartySubIDs(*args))
        _swig_setattr(self, NoSettlPartySubIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoSettlPartySubIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoSettlPartySubIDsPtr(NoSettlPartySubIDs):
    def __init__(self, this):
        _swig_setattr(self, NoSettlPartySubIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoSettlPartySubIDs, 'thisown', 0)
        _swig_setattr(self, NoSettlPartySubIDs,self.__class__,NoSettlPartySubIDs)
_quickfix.NoSettlPartySubIDs_swigregister(NoSettlPartySubIDsPtr)

class NoPartySubIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoPartySubIDs, name)
    def __repr__(self):
        return "<C FIX::NoPartySubIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoPartySubIDs, 'this', _quickfix.new_NoPartySubIDs(*args))
        _swig_setattr(self, NoPartySubIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoPartySubIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoPartySubIDsPtr(NoPartySubIDs):
    def __init__(self, this):
        _swig_setattr(self, NoPartySubIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoPartySubIDs, 'thisown', 0)
        _swig_setattr(self, NoPartySubIDs,self.__class__,NoPartySubIDs)
_quickfix.NoPartySubIDs_swigregister(NoPartySubIDsPtr)

class PartySubIDType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PartySubIDType, name)
    def __repr__(self):
        return "<C FIX::PartySubIDType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PartySubIDType, 'this', _quickfix.new_PartySubIDType(*args))
        _swig_setattr(self, PartySubIDType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PartySubIDType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PartySubIDTypePtr(PartySubIDType):
    def __init__(self, this):
        _swig_setattr(self, PartySubIDType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PartySubIDType, 'thisown', 0)
        _swig_setattr(self, PartySubIDType,self.__class__,PartySubIDType)
_quickfix.PartySubIDType_swigregister(PartySubIDTypePtr)

class NoNestedPartySubIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNestedPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoNestedPartySubIDs, name)
    def __repr__(self):
        return "<C FIX::NoNestedPartySubIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoNestedPartySubIDs, 'this', _quickfix.new_NoNestedPartySubIDs(*args))
        _swig_setattr(self, NoNestedPartySubIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoNestedPartySubIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoNestedPartySubIDsPtr(NoNestedPartySubIDs):
    def __init__(self, this):
        _swig_setattr(self, NoNestedPartySubIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoNestedPartySubIDs, 'thisown', 0)
        _swig_setattr(self, NoNestedPartySubIDs,self.__class__,NoNestedPartySubIDs)
_quickfix.NoNestedPartySubIDs_swigregister(NoNestedPartySubIDsPtr)

class NestedPartySubIDType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartySubIDType, name)
    def __repr__(self):
        return "<C FIX::NestedPartySubIDType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NestedPartySubIDType, 'this', _quickfix.new_NestedPartySubIDType(*args))
        _swig_setattr(self, NestedPartySubIDType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NestedPartySubIDType):
        try:
            if self.thisown: destroy(self)
        except: pass

class NestedPartySubIDTypePtr(NestedPartySubIDType):
    def __init__(self, this):
        _swig_setattr(self, NestedPartySubIDType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NestedPartySubIDType, 'thisown', 0)
        _swig_setattr(self, NestedPartySubIDType,self.__class__,NestedPartySubIDType)
_quickfix.NestedPartySubIDType_swigregister(NestedPartySubIDTypePtr)

class NoNested2PartySubIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested2PartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested2PartySubIDs, name)
    def __repr__(self):
        return "<C FIX::NoNested2PartySubIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoNested2PartySubIDs, 'this', _quickfix.new_NoNested2PartySubIDs(*args))
        _swig_setattr(self, NoNested2PartySubIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoNested2PartySubIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoNested2PartySubIDsPtr(NoNested2PartySubIDs):
    def __init__(self, this):
        _swig_setattr(self, NoNested2PartySubIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoNested2PartySubIDs, 'thisown', 0)
        _swig_setattr(self, NoNested2PartySubIDs,self.__class__,NoNested2PartySubIDs)
_quickfix.NoNested2PartySubIDs_swigregister(NoNested2PartySubIDsPtr)

class Nested2PartySubIDType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartySubIDType, name)
    def __repr__(self):
        return "<C FIX::Nested2PartySubIDType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested2PartySubIDType, 'this', _quickfix.new_Nested2PartySubIDType(*args))
        _swig_setattr(self, Nested2PartySubIDType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested2PartySubIDType):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested2PartySubIDTypePtr(Nested2PartySubIDType):
    def __init__(self, this):
        _swig_setattr(self, Nested2PartySubIDType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested2PartySubIDType, 'thisown', 0)
        _swig_setattr(self, Nested2PartySubIDType,self.__class__,Nested2PartySubIDType)
_quickfix.Nested2PartySubIDType_swigregister(Nested2PartySubIDTypePtr)

class AllocIntermedReqType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocIntermedReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocIntermedReqType, name)
    def __repr__(self):
        return "<C FIX::AllocIntermedReqType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocIntermedReqType, 'this', _quickfix.new_AllocIntermedReqType(*args))
        _swig_setattr(self, AllocIntermedReqType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocIntermedReqType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocIntermedReqTypePtr(AllocIntermedReqType):
    def __init__(self, this):
        _swig_setattr(self, AllocIntermedReqType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocIntermedReqType, 'thisown', 0)
        _swig_setattr(self, AllocIntermedReqType,self.__class__,AllocIntermedReqType)
_quickfix.AllocIntermedReqType_swigregister(AllocIntermedReqTypePtr)

class UnderlyingPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPx, name)
    def __repr__(self):
        return "<C FIX::UnderlyingPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingPx, 'this', _quickfix.new_UnderlyingPx(*args))
        _swig_setattr(self, UnderlyingPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingPxPtr(UnderlyingPx):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingPx, 'thisown', 0)
        _swig_setattr(self, UnderlyingPx,self.__class__,UnderlyingPx)
_quickfix.UnderlyingPx_swigregister(UnderlyingPxPtr)

class PriceDelta(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PriceDelta, name)
    def __repr__(self):
        return "<C FIX::PriceDelta instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PriceDelta, 'this', _quickfix.new_PriceDelta(*args))
        _swig_setattr(self, PriceDelta, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PriceDelta):
        try:
            if self.thisown: destroy(self)
        except: pass

class PriceDeltaPtr(PriceDelta):
    def __init__(self, this):
        _swig_setattr(self, PriceDelta, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PriceDelta, 'thisown', 0)
        _swig_setattr(self, PriceDelta,self.__class__,PriceDelta)
_quickfix.PriceDelta_swigregister(PriceDeltaPtr)

class ApplQueueMax(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueMax, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueMax, name)
    def __repr__(self):
        return "<C FIX::ApplQueueMax instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ApplQueueMax, 'this', _quickfix.new_ApplQueueMax(*args))
        _swig_setattr(self, ApplQueueMax, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ApplQueueMax):
        try:
            if self.thisown: destroy(self)
        except: pass

class ApplQueueMaxPtr(ApplQueueMax):
    def __init__(self, this):
        _swig_setattr(self, ApplQueueMax, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ApplQueueMax, 'thisown', 0)
        _swig_setattr(self, ApplQueueMax,self.__class__,ApplQueueMax)
_quickfix.ApplQueueMax_swigregister(ApplQueueMaxPtr)

class ApplQueueDepth(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueDepth, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueDepth, name)
    def __repr__(self):
        return "<C FIX::ApplQueueDepth instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ApplQueueDepth, 'this', _quickfix.new_ApplQueueDepth(*args))
        _swig_setattr(self, ApplQueueDepth, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ApplQueueDepth):
        try:
            if self.thisown: destroy(self)
        except: pass

class ApplQueueDepthPtr(ApplQueueDepth):
    def __init__(self, this):
        _swig_setattr(self, ApplQueueDepth, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ApplQueueDepth, 'thisown', 0)
        _swig_setattr(self, ApplQueueDepth,self.__class__,ApplQueueDepth)
_quickfix.ApplQueueDepth_swigregister(ApplQueueDepthPtr)

class ApplQueueResolution(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueResolution, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueResolution, name)
    def __repr__(self):
        return "<C FIX::ApplQueueResolution instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ApplQueueResolution, 'this', _quickfix.new_ApplQueueResolution(*args))
        _swig_setattr(self, ApplQueueResolution, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ApplQueueResolution):
        try:
            if self.thisown: destroy(self)
        except: pass

class ApplQueueResolutionPtr(ApplQueueResolution):
    def __init__(self, this):
        _swig_setattr(self, ApplQueueResolution, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ApplQueueResolution, 'thisown', 0)
        _swig_setattr(self, ApplQueueResolution,self.__class__,ApplQueueResolution)
_quickfix.ApplQueueResolution_swigregister(ApplQueueResolutionPtr)

class ApplQueueAction(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueAction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueAction, name)
    def __repr__(self):
        return "<C FIX::ApplQueueAction instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ApplQueueAction, 'this', _quickfix.new_ApplQueueAction(*args))
        _swig_setattr(self, ApplQueueAction, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ApplQueueAction):
        try:
            if self.thisown: destroy(self)
        except: pass

class ApplQueueActionPtr(ApplQueueAction):
    def __init__(self, this):
        _swig_setattr(self, ApplQueueAction, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ApplQueueAction, 'thisown', 0)
        _swig_setattr(self, ApplQueueAction,self.__class__,ApplQueueAction)
_quickfix.ApplQueueAction_swigregister(ApplQueueActionPtr)

class NoAltMDSource(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAltMDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoAltMDSource, name)
    def __repr__(self):
        return "<C FIX::NoAltMDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoAltMDSource, 'this', _quickfix.new_NoAltMDSource(*args))
        _swig_setattr(self, NoAltMDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoAltMDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoAltMDSourcePtr(NoAltMDSource):
    def __init__(self, this):
        _swig_setattr(self, NoAltMDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoAltMDSource, 'thisown', 0)
        _swig_setattr(self, NoAltMDSource,self.__class__,NoAltMDSource)
_quickfix.NoAltMDSource_swigregister(NoAltMDSourcePtr)

class AltMDSourceID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AltMDSourceID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AltMDSourceID, name)
    def __repr__(self):
        return "<C FIX::AltMDSourceID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AltMDSourceID, 'this', _quickfix.new_AltMDSourceID(*args))
        _swig_setattr(self, AltMDSourceID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AltMDSourceID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AltMDSourceIDPtr(AltMDSourceID):
    def __init__(self, this):
        _swig_setattr(self, AltMDSourceID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AltMDSourceID, 'thisown', 0)
        _swig_setattr(self, AltMDSourceID,self.__class__,AltMDSourceID)
_quickfix.AltMDSourceID_swigregister(AltMDSourceIDPtr)

class SecondaryTradeReportID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTradeReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTradeReportID, name)
    def __repr__(self):
        return "<C FIX::SecondaryTradeReportID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryTradeReportID, 'this', _quickfix.new_SecondaryTradeReportID(*args))
        _swig_setattr(self, SecondaryTradeReportID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryTradeReportID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryTradeReportIDPtr(SecondaryTradeReportID):
    def __init__(self, this):
        _swig_setattr(self, SecondaryTradeReportID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryTradeReportID, 'thisown', 0)
        _swig_setattr(self, SecondaryTradeReportID,self.__class__,SecondaryTradeReportID)
_quickfix.SecondaryTradeReportID_swigregister(SecondaryTradeReportIDPtr)

class AvgPxIndicator(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPxIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPxIndicator, name)
    def __repr__(self):
        return "<C FIX::AvgPxIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AvgPxIndicator, 'this', _quickfix.new_AvgPxIndicator(*args))
        _swig_setattr(self, AvgPxIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AvgPxIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class AvgPxIndicatorPtr(AvgPxIndicator):
    def __init__(self, this):
        _swig_setattr(self, AvgPxIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AvgPxIndicator, 'thisown', 0)
        _swig_setattr(self, AvgPxIndicator,self.__class__,AvgPxIndicator)
_quickfix.AvgPxIndicator_swigregister(AvgPxIndicatorPtr)

class TradeLinkID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeLinkID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeLinkID, name)
    def __repr__(self):
        return "<C FIX::TradeLinkID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeLinkID, 'this', _quickfix.new_TradeLinkID(*args))
        _swig_setattr(self, TradeLinkID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeLinkID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeLinkIDPtr(TradeLinkID):
    def __init__(self, this):
        _swig_setattr(self, TradeLinkID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeLinkID, 'thisown', 0)
        _swig_setattr(self, TradeLinkID,self.__class__,TradeLinkID)
_quickfix.TradeLinkID_swigregister(TradeLinkIDPtr)

class OrderInputDevice(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderInputDevice, name)
    def __repr__(self):
        return "<C FIX::OrderInputDevice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderInputDevice, 'this', _quickfix.new_OrderInputDevice(*args))
        _swig_setattr(self, OrderInputDevice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderInputDevice):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderInputDevicePtr(OrderInputDevice):
    def __init__(self, this):
        _swig_setattr(self, OrderInputDevice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderInputDevice, 'thisown', 0)
        _swig_setattr(self, OrderInputDevice,self.__class__,OrderInputDevice)
_quickfix.OrderInputDevice_swigregister(OrderInputDevicePtr)

class UnderlyingTradingSessionID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingTradingSessionID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingTradingSessionID, name)
    def __repr__(self):
        return "<C FIX::UnderlyingTradingSessionID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingTradingSessionID, 'this', _quickfix.new_UnderlyingTradingSessionID(*args))
        _swig_setattr(self, UnderlyingTradingSessionID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingTradingSessionID):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingTradingSessionIDPtr(UnderlyingTradingSessionID):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingTradingSessionID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingTradingSessionID, 'thisown', 0)
        _swig_setattr(self, UnderlyingTradingSessionID,self.__class__,UnderlyingTradingSessionID)
_quickfix.UnderlyingTradingSessionID_swigregister(UnderlyingTradingSessionIDPtr)

class UnderlyingTradingSessionSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingTradingSessionSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingTradingSessionSubID, name)
    def __repr__(self):
        return "<C FIX::UnderlyingTradingSessionSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingTradingSessionSubID, 'this', _quickfix.new_UnderlyingTradingSessionSubID(*args))
        _swig_setattr(self, UnderlyingTradingSessionSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingTradingSessionSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingTradingSessionSubIDPtr(UnderlyingTradingSessionSubID):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingTradingSessionSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingTradingSessionSubID, 'thisown', 0)
        _swig_setattr(self, UnderlyingTradingSessionSubID,self.__class__,UnderlyingTradingSessionSubID)
_quickfix.UnderlyingTradingSessionSubID_swigregister(UnderlyingTradingSessionSubIDPtr)

class TradeLegRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeLegRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeLegRefID, name)
    def __repr__(self):
        return "<C FIX::TradeLegRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeLegRefID, 'this', _quickfix.new_TradeLegRefID(*args))
        _swig_setattr(self, TradeLegRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeLegRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeLegRefIDPtr(TradeLegRefID):
    def __init__(self, this):
        _swig_setattr(self, TradeLegRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeLegRefID, 'thisown', 0)
        _swig_setattr(self, TradeLegRefID,self.__class__,TradeLegRefID)
_quickfix.TradeLegRefID_swigregister(TradeLegRefIDPtr)

class ExchangeRule(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeRule, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeRule, name)
    def __repr__(self):
        return "<C FIX::ExchangeRule instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExchangeRule, 'this', _quickfix.new_ExchangeRule(*args))
        _swig_setattr(self, ExchangeRule, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExchangeRule):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExchangeRulePtr(ExchangeRule):
    def __init__(self, this):
        _swig_setattr(self, ExchangeRule, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExchangeRule, 'thisown', 0)
        _swig_setattr(self, ExchangeRule,self.__class__,ExchangeRule)
_quickfix.ExchangeRule_swigregister(ExchangeRulePtr)

class TradeAllocIndicator(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeAllocIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeAllocIndicator, name)
    def __repr__(self):
        return "<C FIX::TradeAllocIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeAllocIndicator, 'this', _quickfix.new_TradeAllocIndicator(*args))
        _swig_setattr(self, TradeAllocIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeAllocIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeAllocIndicatorPtr(TradeAllocIndicator):
    def __init__(self, this):
        _swig_setattr(self, TradeAllocIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeAllocIndicator, 'thisown', 0)
        _swig_setattr(self, TradeAllocIndicator,self.__class__,TradeAllocIndicator)
_quickfix.TradeAllocIndicator_swigregister(TradeAllocIndicatorPtr)

class ExpirationCycle(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpirationCycle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExpirationCycle, name)
    def __repr__(self):
        return "<C FIX::ExpirationCycle instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExpirationCycle, 'this', _quickfix.new_ExpirationCycle(*args))
        _swig_setattr(self, ExpirationCycle, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExpirationCycle):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExpirationCyclePtr(ExpirationCycle):
    def __init__(self, this):
        _swig_setattr(self, ExpirationCycle, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExpirationCycle, 'thisown', 0)
        _swig_setattr(self, ExpirationCycle,self.__class__,ExpirationCycle)
_quickfix.ExpirationCycle_swigregister(ExpirationCyclePtr)

class TrdType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdType, name)
    def __repr__(self):
        return "<C FIX::TrdType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdType, 'this', _quickfix.new_TrdType(*args))
        _swig_setattr(self, TrdType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdTypePtr(TrdType):
    def __init__(self, this):
        _swig_setattr(self, TrdType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdType, 'thisown', 0)
        _swig_setattr(self, TrdType,self.__class__,TrdType)
_quickfix.TrdType_swigregister(TrdTypePtr)

class TrdSubType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdSubType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdSubType, name)
    def __repr__(self):
        return "<C FIX::TrdSubType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdSubType, 'this', _quickfix.new_TrdSubType(*args))
        _swig_setattr(self, TrdSubType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdSubType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdSubTypePtr(TrdSubType):
    def __init__(self, this):
        _swig_setattr(self, TrdSubType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdSubType, 'thisown', 0)
        _swig_setattr(self, TrdSubType,self.__class__,TrdSubType)
_quickfix.TrdSubType_swigregister(TrdSubTypePtr)

class TransferReason(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransferReason, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TransferReason, name)
    def __repr__(self):
        return "<C FIX::TransferReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TransferReason, 'this', _quickfix.new_TransferReason(*args))
        _swig_setattr(self, TransferReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TransferReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class TransferReasonPtr(TransferReason):
    def __init__(self, this):
        _swig_setattr(self, TransferReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TransferReason, 'thisown', 0)
        _swig_setattr(self, TransferReason,self.__class__,TransferReason)
_quickfix.TransferReason_swigregister(TransferReasonPtr)

class AsgnReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsgnReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AsgnReqID, name)
    def __repr__(self):
        return "<C FIX::AsgnReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AsgnReqID, 'this', _quickfix.new_AsgnReqID(*args))
        _swig_setattr(self, AsgnReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AsgnReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AsgnReqIDPtr(AsgnReqID):
    def __init__(self, this):
        _swig_setattr(self, AsgnReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AsgnReqID, 'thisown', 0)
        _swig_setattr(self, AsgnReqID,self.__class__,AsgnReqID)
_quickfix.AsgnReqID_swigregister(AsgnReqIDPtr)

class TotNumAssignmentReports(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNumAssignmentReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNumAssignmentReports, name)
    def __repr__(self):
        return "<C FIX::TotNumAssignmentReports instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNumAssignmentReports, 'this', _quickfix.new_TotNumAssignmentReports(*args))
        _swig_setattr(self, TotNumAssignmentReports, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNumAssignmentReports):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNumAssignmentReportsPtr(TotNumAssignmentReports):
    def __init__(self, this):
        _swig_setattr(self, TotNumAssignmentReports, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNumAssignmentReports, 'thisown', 0)
        _swig_setattr(self, TotNumAssignmentReports,self.__class__,TotNumAssignmentReports)
_quickfix.TotNumAssignmentReports_swigregister(TotNumAssignmentReportsPtr)

class AsgnRptID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsgnRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AsgnRptID, name)
    def __repr__(self):
        return "<C FIX::AsgnRptID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AsgnRptID, 'this', _quickfix.new_AsgnRptID(*args))
        _swig_setattr(self, AsgnRptID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AsgnRptID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AsgnRptIDPtr(AsgnRptID):
    def __init__(self, this):
        _swig_setattr(self, AsgnRptID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AsgnRptID, 'thisown', 0)
        _swig_setattr(self, AsgnRptID,self.__class__,AsgnRptID)
_quickfix.AsgnRptID_swigregister(AsgnRptIDPtr)

class ThresholdAmount(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThresholdAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ThresholdAmount, name)
    def __repr__(self):
        return "<C FIX::ThresholdAmount instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ThresholdAmount, 'this', _quickfix.new_ThresholdAmount(*args))
        _swig_setattr(self, ThresholdAmount, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ThresholdAmount):
        try:
            if self.thisown: destroy(self)
        except: pass

class ThresholdAmountPtr(ThresholdAmount):
    def __init__(self, this):
        _swig_setattr(self, ThresholdAmount, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ThresholdAmount, 'thisown', 0)
        _swig_setattr(self, ThresholdAmount,self.__class__,ThresholdAmount)
_quickfix.ThresholdAmount_swigregister(ThresholdAmountPtr)

class PegMoveType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegMoveType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegMoveType, name)
    def __repr__(self):
        return "<C FIX::PegMoveType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegMoveType, 'this', _quickfix.new_PegMoveType(*args))
        _swig_setattr(self, PegMoveType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegMoveType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegMoveTypePtr(PegMoveType):
    def __init__(self, this):
        _swig_setattr(self, PegMoveType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegMoveType, 'thisown', 0)
        _swig_setattr(self, PegMoveType,self.__class__,PegMoveType)
_quickfix.PegMoveType_swigregister(PegMoveTypePtr)

class PegOffsetType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegOffsetType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegOffsetType, name)
    def __repr__(self):
        return "<C FIX::PegOffsetType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegOffsetType, 'this', _quickfix.new_PegOffsetType(*args))
        _swig_setattr(self, PegOffsetType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegOffsetType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegOffsetTypePtr(PegOffsetType):
    def __init__(self, this):
        _swig_setattr(self, PegOffsetType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegOffsetType, 'thisown', 0)
        _swig_setattr(self, PegOffsetType,self.__class__,PegOffsetType)
_quickfix.PegOffsetType_swigregister(PegOffsetTypePtr)

class PegLimitType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegLimitType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegLimitType, name)
    def __repr__(self):
        return "<C FIX::PegLimitType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegLimitType, 'this', _quickfix.new_PegLimitType(*args))
        _swig_setattr(self, PegLimitType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegLimitType):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegLimitTypePtr(PegLimitType):
    def __init__(self, this):
        _swig_setattr(self, PegLimitType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegLimitType, 'thisown', 0)
        _swig_setattr(self, PegLimitType,self.__class__,PegLimitType)
_quickfix.PegLimitType_swigregister(PegLimitTypePtr)

class PegRoundDirection(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegRoundDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegRoundDirection, name)
    def __repr__(self):
        return "<C FIX::PegRoundDirection instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegRoundDirection, 'this', _quickfix.new_PegRoundDirection(*args))
        _swig_setattr(self, PegRoundDirection, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegRoundDirection):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegRoundDirectionPtr(PegRoundDirection):
    def __init__(self, this):
        _swig_setattr(self, PegRoundDirection, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegRoundDirection, 'thisown', 0)
        _swig_setattr(self, PegRoundDirection,self.__class__,PegRoundDirection)
_quickfix.PegRoundDirection_swigregister(PegRoundDirectionPtr)

class PeggedPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeggedPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PeggedPrice, name)
    def __repr__(self):
        return "<C FIX::PeggedPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PeggedPrice, 'this', _quickfix.new_PeggedPrice(*args))
        _swig_setattr(self, PeggedPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PeggedPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class PeggedPricePtr(PeggedPrice):
    def __init__(self, this):
        _swig_setattr(self, PeggedPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PeggedPrice, 'thisown', 0)
        _swig_setattr(self, PeggedPrice,self.__class__,PeggedPrice)
_quickfix.PeggedPrice_swigregister(PeggedPricePtr)

class PegScope(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegScope, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegScope, name)
    def __repr__(self):
        return "<C FIX::PegScope instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegScope, 'this', _quickfix.new_PegScope(*args))
        _swig_setattr(self, PegScope, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegScope):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegScopePtr(PegScope):
    def __init__(self, this):
        _swig_setattr(self, PegScope, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegScope, 'thisown', 0)
        _swig_setattr(self, PegScope,self.__class__,PegScope)
_quickfix.PegScope_swigregister(PegScopePtr)

class DiscretionMoveType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionMoveType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionMoveType, name)
    def __repr__(self):
        return "<C FIX::DiscretionMoveType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionMoveType, 'this', _quickfix.new_DiscretionMoveType(*args))
        _swig_setattr(self, DiscretionMoveType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionMoveType):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionMoveTypePtr(DiscretionMoveType):
    def __init__(self, this):
        _swig_setattr(self, DiscretionMoveType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionMoveType, 'thisown', 0)
        _swig_setattr(self, DiscretionMoveType,self.__class__,DiscretionMoveType)
_quickfix.DiscretionMoveType_swigregister(DiscretionMoveTypePtr)

class DiscretionOffsetType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffsetType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffsetType, name)
    def __repr__(self):
        return "<C FIX::DiscretionOffsetType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionOffsetType, 'this', _quickfix.new_DiscretionOffsetType(*args))
        _swig_setattr(self, DiscretionOffsetType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionOffsetType):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionOffsetTypePtr(DiscretionOffsetType):
    def __init__(self, this):
        _swig_setattr(self, DiscretionOffsetType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionOffsetType, 'thisown', 0)
        _swig_setattr(self, DiscretionOffsetType,self.__class__,DiscretionOffsetType)
_quickfix.DiscretionOffsetType_swigregister(DiscretionOffsetTypePtr)

class DiscretionLimitType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionLimitType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionLimitType, name)
    def __repr__(self):
        return "<C FIX::DiscretionLimitType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionLimitType, 'this', _quickfix.new_DiscretionLimitType(*args))
        _swig_setattr(self, DiscretionLimitType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionLimitType):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionLimitTypePtr(DiscretionLimitType):
    def __init__(self, this):
        _swig_setattr(self, DiscretionLimitType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionLimitType, 'thisown', 0)
        _swig_setattr(self, DiscretionLimitType,self.__class__,DiscretionLimitType)
_quickfix.DiscretionLimitType_swigregister(DiscretionLimitTypePtr)

class DiscretionRoundDirection(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionRoundDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionRoundDirection, name)
    def __repr__(self):
        return "<C FIX::DiscretionRoundDirection instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionRoundDirection, 'this', _quickfix.new_DiscretionRoundDirection(*args))
        _swig_setattr(self, DiscretionRoundDirection, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionRoundDirection):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionRoundDirectionPtr(DiscretionRoundDirection):
    def __init__(self, this):
        _swig_setattr(self, DiscretionRoundDirection, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionRoundDirection, 'thisown', 0)
        _swig_setattr(self, DiscretionRoundDirection,self.__class__,DiscretionRoundDirection)
_quickfix.DiscretionRoundDirection_swigregister(DiscretionRoundDirectionPtr)

class DiscretionPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionPrice, name)
    def __repr__(self):
        return "<C FIX::DiscretionPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionPrice, 'this', _quickfix.new_DiscretionPrice(*args))
        _swig_setattr(self, DiscretionPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionPricePtr(DiscretionPrice):
    def __init__(self, this):
        _swig_setattr(self, DiscretionPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionPrice, 'thisown', 0)
        _swig_setattr(self, DiscretionPrice,self.__class__,DiscretionPrice)
_quickfix.DiscretionPrice_swigregister(DiscretionPricePtr)

class DiscretionScope(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionScope, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionScope, name)
    def __repr__(self):
        return "<C FIX::DiscretionScope instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionScope, 'this', _quickfix.new_DiscretionScope(*args))
        _swig_setattr(self, DiscretionScope, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionScope):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionScopePtr(DiscretionScope):
    def __init__(self, this):
        _swig_setattr(self, DiscretionScope, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionScope, 'thisown', 0)
        _swig_setattr(self, DiscretionScope,self.__class__,DiscretionScope)
_quickfix.DiscretionScope_swigregister(DiscretionScopePtr)

class TargetStrategy(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetStrategy, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TargetStrategy, name)
    def __repr__(self):
        return "<C FIX::TargetStrategy instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TargetStrategy, 'this', _quickfix.new_TargetStrategy(*args))
        _swig_setattr(self, TargetStrategy, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TargetStrategy):
        try:
            if self.thisown: destroy(self)
        except: pass

class TargetStrategyPtr(TargetStrategy):
    def __init__(self, this):
        _swig_setattr(self, TargetStrategy, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TargetStrategy, 'thisown', 0)
        _swig_setattr(self, TargetStrategy,self.__class__,TargetStrategy)
_quickfix.TargetStrategy_swigregister(TargetStrategyPtr)

class TargetStrategyParameters(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetStrategyParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TargetStrategyParameters, name)
    def __repr__(self):
        return "<C FIX::TargetStrategyParameters instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TargetStrategyParameters, 'this', _quickfix.new_TargetStrategyParameters(*args))
        _swig_setattr(self, TargetStrategyParameters, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TargetStrategyParameters):
        try:
            if self.thisown: destroy(self)
        except: pass

class TargetStrategyParametersPtr(TargetStrategyParameters):
    def __init__(self, this):
        _swig_setattr(self, TargetStrategyParameters, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TargetStrategyParameters, 'thisown', 0)
        _swig_setattr(self, TargetStrategyParameters,self.__class__,TargetStrategyParameters)
_quickfix.TargetStrategyParameters_swigregister(TargetStrategyParametersPtr)

class ParticipationRate(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticipationRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ParticipationRate, name)
    def __repr__(self):
        return "<C FIX::ParticipationRate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ParticipationRate, 'this', _quickfix.new_ParticipationRate(*args))
        _swig_setattr(self, ParticipationRate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ParticipationRate):
        try:
            if self.thisown: destroy(self)
        except: pass

class ParticipationRatePtr(ParticipationRate):
    def __init__(self, this):
        _swig_setattr(self, ParticipationRate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ParticipationRate, 'thisown', 0)
        _swig_setattr(self, ParticipationRate,self.__class__,ParticipationRate)
_quickfix.ParticipationRate_swigregister(ParticipationRatePtr)

class TargetStrategyPerformance(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetStrategyPerformance, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TargetStrategyPerformance, name)
    def __repr__(self):
        return "<C FIX::TargetStrategyPerformance instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TargetStrategyPerformance, 'this', _quickfix.new_TargetStrategyPerformance(*args))
        _swig_setattr(self, TargetStrategyPerformance, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TargetStrategyPerformance):
        try:
            if self.thisown: destroy(self)
        except: pass

class TargetStrategyPerformancePtr(TargetStrategyPerformance):
    def __init__(self, this):
        _swig_setattr(self, TargetStrategyPerformance, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TargetStrategyPerformance, 'thisown', 0)
        _swig_setattr(self, TargetStrategyPerformance,self.__class__,TargetStrategyPerformance)
_quickfix.TargetStrategyPerformance_swigregister(TargetStrategyPerformancePtr)

class LastLiquidityInd(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastLiquidityInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastLiquidityInd, name)
    def __repr__(self):
        return "<C FIX::LastLiquidityInd instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastLiquidityInd, 'this', _quickfix.new_LastLiquidityInd(*args))
        _swig_setattr(self, LastLiquidityInd, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastLiquidityInd):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastLiquidityIndPtr(LastLiquidityInd):
    def __init__(self, this):
        _swig_setattr(self, LastLiquidityInd, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastLiquidityInd, 'thisown', 0)
        _swig_setattr(self, LastLiquidityInd,self.__class__,LastLiquidityInd)
_quickfix.LastLiquidityInd_swigregister(LastLiquidityIndPtr)

class PublishTrdIndicator(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublishTrdIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PublishTrdIndicator, name)
    def __repr__(self):
        return "<C FIX::PublishTrdIndicator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PublishTrdIndicator, 'this', _quickfix.new_PublishTrdIndicator(*args))
        _swig_setattr(self, PublishTrdIndicator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PublishTrdIndicator):
        try:
            if self.thisown: destroy(self)
        except: pass

class PublishTrdIndicatorPtr(PublishTrdIndicator):
    def __init__(self, this):
        _swig_setattr(self, PublishTrdIndicator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PublishTrdIndicator, 'thisown', 0)
        _swig_setattr(self, PublishTrdIndicator,self.__class__,PublishTrdIndicator)
_quickfix.PublishTrdIndicator_swigregister(PublishTrdIndicatorPtr)

class ShortSaleReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortSaleReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ShortSaleReason, name)
    def __repr__(self):
        return "<C FIX::ShortSaleReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ShortSaleReason, 'this', _quickfix.new_ShortSaleReason(*args))
        _swig_setattr(self, ShortSaleReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ShortSaleReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class ShortSaleReasonPtr(ShortSaleReason):
    def __init__(self, this):
        _swig_setattr(self, ShortSaleReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ShortSaleReason, 'thisown', 0)
        _swig_setattr(self, ShortSaleReason,self.__class__,ShortSaleReason)
_quickfix.ShortSaleReason_swigregister(ShortSaleReasonPtr)

class QtyType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QtyType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QtyType, name)
    def __repr__(self):
        return "<C FIX::QtyType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QtyType, 'this', _quickfix.new_QtyType(*args))
        _swig_setattr(self, QtyType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QtyType):
        try:
            if self.thisown: destroy(self)
        except: pass

class QtyTypePtr(QtyType):
    def __init__(self, this):
        _swig_setattr(self, QtyType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QtyType, 'thisown', 0)
        _swig_setattr(self, QtyType,self.__class__,QtyType)
_quickfix.QtyType_swigregister(QtyTypePtr)

class SecondaryTrdType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTrdType, name)
    def __repr__(self):
        return "<C FIX::SecondaryTrdType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryTrdType, 'this', _quickfix.new_SecondaryTrdType(*args))
        _swig_setattr(self, SecondaryTrdType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryTrdType):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryTrdTypePtr(SecondaryTrdType):
    def __init__(self, this):
        _swig_setattr(self, SecondaryTrdType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryTrdType, 'thisown', 0)
        _swig_setattr(self, SecondaryTrdType,self.__class__,SecondaryTrdType)
_quickfix.SecondaryTrdType_swigregister(SecondaryTrdTypePtr)

class TradeReportType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportType, name)
    def __repr__(self):
        return "<C FIX::TradeReportType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeReportType, 'this', _quickfix.new_TradeReportType(*args))
        _swig_setattr(self, TradeReportType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeReportType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeReportTypePtr(TradeReportType):
    def __init__(self, this):
        _swig_setattr(self, TradeReportType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeReportType, 'thisown', 0)
        _swig_setattr(self, TradeReportType,self.__class__,TradeReportType)
_quickfix.TradeReportType_swigregister(TradeReportTypePtr)

class AllocNoOrdersType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocNoOrdersType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocNoOrdersType, name)
    def __repr__(self):
        return "<C FIX::AllocNoOrdersType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocNoOrdersType, 'this', _quickfix.new_AllocNoOrdersType(*args))
        _swig_setattr(self, AllocNoOrdersType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocNoOrdersType):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocNoOrdersTypePtr(AllocNoOrdersType):
    def __init__(self, this):
        _swig_setattr(self, AllocNoOrdersType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocNoOrdersType, 'thisown', 0)
        _swig_setattr(self, AllocNoOrdersType,self.__class__,AllocNoOrdersType)
_quickfix.AllocNoOrdersType_swigregister(AllocNoOrdersTypePtr)

class SharedCommission(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedCommission, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SharedCommission, name)
    def __repr__(self):
        return "<C FIX::SharedCommission instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SharedCommission, 'this', _quickfix.new_SharedCommission(*args))
        _swig_setattr(self, SharedCommission, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SharedCommission):
        try:
            if self.thisown: destroy(self)
        except: pass

class SharedCommissionPtr(SharedCommission):
    def __init__(self, this):
        _swig_setattr(self, SharedCommission, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SharedCommission, 'thisown', 0)
        _swig_setattr(self, SharedCommission,self.__class__,SharedCommission)
_quickfix.SharedCommission_swigregister(SharedCommissionPtr)

class ConfirmReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmReqID, name)
    def __repr__(self):
        return "<C FIX::ConfirmReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ConfirmReqID, 'this', _quickfix.new_ConfirmReqID(*args))
        _swig_setattr(self, ConfirmReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ConfirmReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ConfirmReqIDPtr(ConfirmReqID):
    def __init__(self, this):
        _swig_setattr(self, ConfirmReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ConfirmReqID, 'thisown', 0)
        _swig_setattr(self, ConfirmReqID,self.__class__,ConfirmReqID)
_quickfix.ConfirmReqID_swigregister(ConfirmReqIDPtr)

class AvgParPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgParPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AvgParPx, name)
    def __repr__(self):
        return "<C FIX::AvgParPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AvgParPx, 'this', _quickfix.new_AvgParPx(*args))
        _swig_setattr(self, AvgParPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AvgParPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class AvgParPxPtr(AvgParPx):
    def __init__(self, this):
        _swig_setattr(self, AvgParPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AvgParPx, 'thisown', 0)
        _swig_setattr(self, AvgParPx,self.__class__,AvgParPx)
_quickfix.AvgParPx_swigregister(AvgParPxPtr)

class ReportedPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportedPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ReportedPx, name)
    def __repr__(self):
        return "<C FIX::ReportedPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ReportedPx, 'this', _quickfix.new_ReportedPx(*args))
        _swig_setattr(self, ReportedPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ReportedPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class ReportedPxPtr(ReportedPx):
    def __init__(self, this):
        _swig_setattr(self, ReportedPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ReportedPx, 'thisown', 0)
        _swig_setattr(self, ReportedPx,self.__class__,ReportedPx)
_quickfix.ReportedPx_swigregister(ReportedPxPtr)

class NoCapacities(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoCapacities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoCapacities, name)
    def __repr__(self):
        return "<C FIX::NoCapacities instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoCapacities, 'this', _quickfix.new_NoCapacities(*args))
        _swig_setattr(self, NoCapacities, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoCapacities):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoCapacitiesPtr(NoCapacities):
    def __init__(self, this):
        _swig_setattr(self, NoCapacities, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoCapacities, 'thisown', 0)
        _swig_setattr(self, NoCapacities,self.__class__,NoCapacities)
_quickfix.NoCapacities_swigregister(NoCapacitiesPtr)

class OrderCapacityQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderCapacityQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OrderCapacityQty, name)
    def __repr__(self):
        return "<C FIX::OrderCapacityQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OrderCapacityQty, 'this', _quickfix.new_OrderCapacityQty(*args))
        _swig_setattr(self, OrderCapacityQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OrderCapacityQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class OrderCapacityQtyPtr(OrderCapacityQty):
    def __init__(self, this):
        _swig_setattr(self, OrderCapacityQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OrderCapacityQty, 'thisown', 0)
        _swig_setattr(self, OrderCapacityQty,self.__class__,OrderCapacityQty)
_quickfix.OrderCapacityQty_swigregister(OrderCapacityQtyPtr)

class NoEvents(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoEvents, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoEvents, name)
    def __repr__(self):
        return "<C FIX::NoEvents instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoEvents, 'this', _quickfix.new_NoEvents(*args))
        _swig_setattr(self, NoEvents, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoEvents):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoEventsPtr(NoEvents):
    def __init__(self, this):
        _swig_setattr(self, NoEvents, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoEvents, 'thisown', 0)
        _swig_setattr(self, NoEvents,self.__class__,NoEvents)
_quickfix.NoEvents_swigregister(NoEventsPtr)

class EventType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EventType, name)
    def __repr__(self):
        return "<C FIX::EventType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EventType, 'this', _quickfix.new_EventType(*args))
        _swig_setattr(self, EventType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EventType):
        try:
            if self.thisown: destroy(self)
        except: pass

class EventTypePtr(EventType):
    def __init__(self, this):
        _swig_setattr(self, EventType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EventType, 'thisown', 0)
        _swig_setattr(self, EventType,self.__class__,EventType)
_quickfix.EventType_swigregister(EventTypePtr)

class EventDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EventDate, name)
    def __repr__(self):
        return "<C FIX::EventDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EventDate, 'this', _quickfix.new_EventDate(*args))
        _swig_setattr(self, EventDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EventDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class EventDatePtr(EventDate):
    def __init__(self, this):
        _swig_setattr(self, EventDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EventDate, 'thisown', 0)
        _swig_setattr(self, EventDate,self.__class__,EventDate)
_quickfix.EventDate_swigregister(EventDatePtr)

class EventPx(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EventPx, name)
    def __repr__(self):
        return "<C FIX::EventPx instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EventPx, 'this', _quickfix.new_EventPx(*args))
        _swig_setattr(self, EventPx, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EventPx):
        try:
            if self.thisown: destroy(self)
        except: pass

class EventPxPtr(EventPx):
    def __init__(self, this):
        _swig_setattr(self, EventPx, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EventPx, 'thisown', 0)
        _swig_setattr(self, EventPx,self.__class__,EventPx)
_quickfix.EventPx_swigregister(EventPxPtr)

class EventText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EventText, name)
    def __repr__(self):
        return "<C FIX::EventText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EventText, 'this', _quickfix.new_EventText(*args))
        _swig_setattr(self, EventText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EventText):
        try:
            if self.thisown: destroy(self)
        except: pass

class EventTextPtr(EventText):
    def __init__(self, this):
        _swig_setattr(self, EventText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EventText, 'thisown', 0)
        _swig_setattr(self, EventText,self.__class__,EventText)
_quickfix.EventText_swigregister(EventTextPtr)

class PctAtRisk(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PctAtRisk, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PctAtRisk, name)
    def __repr__(self):
        return "<C FIX::PctAtRisk instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PctAtRisk, 'this', _quickfix.new_PctAtRisk(*args))
        _swig_setattr(self, PctAtRisk, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PctAtRisk):
        try:
            if self.thisown: destroy(self)
        except: pass

class PctAtRiskPtr(PctAtRisk):
    def __init__(self, this):
        _swig_setattr(self, PctAtRisk, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PctAtRisk, 'thisown', 0)
        _swig_setattr(self, PctAtRisk,self.__class__,PctAtRisk)
_quickfix.PctAtRisk_swigregister(PctAtRiskPtr)

class NoInstrAttrib(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoInstrAttrib, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoInstrAttrib, name)
    def __repr__(self):
        return "<C FIX::NoInstrAttrib instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoInstrAttrib, 'this', _quickfix.new_NoInstrAttrib(*args))
        _swig_setattr(self, NoInstrAttrib, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoInstrAttrib):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoInstrAttribPtr(NoInstrAttrib):
    def __init__(self, this):
        _swig_setattr(self, NoInstrAttrib, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoInstrAttrib, 'thisown', 0)
        _swig_setattr(self, NoInstrAttrib,self.__class__,NoInstrAttrib)
_quickfix.NoInstrAttrib_swigregister(NoInstrAttribPtr)

class InstrAttribType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrAttribType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InstrAttribType, name)
    def __repr__(self):
        return "<C FIX::InstrAttribType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InstrAttribType, 'this', _quickfix.new_InstrAttribType(*args))
        _swig_setattr(self, InstrAttribType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InstrAttribType):
        try:
            if self.thisown: destroy(self)
        except: pass

class InstrAttribTypePtr(InstrAttribType):
    def __init__(self, this):
        _swig_setattr(self, InstrAttribType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InstrAttribType, 'thisown', 0)
        _swig_setattr(self, InstrAttribType,self.__class__,InstrAttribType)
_quickfix.InstrAttribType_swigregister(InstrAttribTypePtr)

class InstrAttribValue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrAttribValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InstrAttribValue, name)
    def __repr__(self):
        return "<C FIX::InstrAttribValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InstrAttribValue, 'this', _quickfix.new_InstrAttribValue(*args))
        _swig_setattr(self, InstrAttribValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InstrAttribValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class InstrAttribValuePtr(InstrAttribValue):
    def __init__(self, this):
        _swig_setattr(self, InstrAttribValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InstrAttribValue, 'thisown', 0)
        _swig_setattr(self, InstrAttribValue,self.__class__,InstrAttribValue)
_quickfix.InstrAttribValue_swigregister(InstrAttribValuePtr)

class DatedDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatedDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DatedDate, name)
    def __repr__(self):
        return "<C FIX::DatedDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DatedDate, 'this', _quickfix.new_DatedDate(*args))
        _swig_setattr(self, DatedDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DatedDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class DatedDatePtr(DatedDate):
    def __init__(self, this):
        _swig_setattr(self, DatedDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DatedDate, 'thisown', 0)
        _swig_setattr(self, DatedDate,self.__class__,DatedDate)
_quickfix.DatedDate_swigregister(DatedDatePtr)

class InterestAccrualDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestAccrualDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, InterestAccrualDate, name)
    def __repr__(self):
        return "<C FIX::InterestAccrualDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, InterestAccrualDate, 'this', _quickfix.new_InterestAccrualDate(*args))
        _swig_setattr(self, InterestAccrualDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_InterestAccrualDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class InterestAccrualDatePtr(InterestAccrualDate):
    def __init__(self, this):
        _swig_setattr(self, InterestAccrualDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, InterestAccrualDate, 'thisown', 0)
        _swig_setattr(self, InterestAccrualDate,self.__class__,InterestAccrualDate)
_quickfix.InterestAccrualDate_swigregister(InterestAccrualDatePtr)

class CPProgram(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CPProgram, name)
    def __repr__(self):
        return "<C FIX::CPProgram instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CPProgram, 'this', _quickfix.new_CPProgram(*args))
        _swig_setattr(self, CPProgram, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CPProgram):
        try:
            if self.thisown: destroy(self)
        except: pass

class CPProgramPtr(CPProgram):
    def __init__(self, this):
        _swig_setattr(self, CPProgram, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CPProgram, 'thisown', 0)
        _swig_setattr(self, CPProgram,self.__class__,CPProgram)
_quickfix.CPProgram_swigregister(CPProgramPtr)

class CPRegType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRegType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CPRegType, name)
    def __repr__(self):
        return "<C FIX::CPRegType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CPRegType, 'this', _quickfix.new_CPRegType(*args))
        _swig_setattr(self, CPRegType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CPRegType):
        try:
            if self.thisown: destroy(self)
        except: pass

class CPRegTypePtr(CPRegType):
    def __init__(self, this):
        _swig_setattr(self, CPRegType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CPRegType, 'thisown', 0)
        _swig_setattr(self, CPRegType,self.__class__,CPRegType)
_quickfix.CPRegType_swigregister(CPRegTypePtr)

class UnderlyingCPProgram(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCPProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCPProgram, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCPProgram instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCPProgram, 'this', _quickfix.new_UnderlyingCPProgram(*args))
        _swig_setattr(self, UnderlyingCPProgram, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCPProgram):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCPProgramPtr(UnderlyingCPProgram):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCPProgram, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCPProgram, 'thisown', 0)
        _swig_setattr(self, UnderlyingCPProgram,self.__class__,UnderlyingCPProgram)
_quickfix.UnderlyingCPProgram_swigregister(UnderlyingCPProgramPtr)

class UnderlyingCPRegType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCPRegType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCPRegType, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCPRegType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCPRegType, 'this', _quickfix.new_UnderlyingCPRegType(*args))
        _swig_setattr(self, UnderlyingCPRegType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCPRegType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCPRegTypePtr(UnderlyingCPRegType):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCPRegType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCPRegType, 'thisown', 0)
        _swig_setattr(self, UnderlyingCPRegType,self.__class__,UnderlyingCPRegType)
_quickfix.UnderlyingCPRegType_swigregister(UnderlyingCPRegTypePtr)

class UnderlyingQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingQty, name)
    def __repr__(self):
        return "<C FIX::UnderlyingQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingQty, 'this', _quickfix.new_UnderlyingQty(*args))
        _swig_setattr(self, UnderlyingQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingQtyPtr(UnderlyingQty):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingQty, 'thisown', 0)
        _swig_setattr(self, UnderlyingQty,self.__class__,UnderlyingQty)
_quickfix.UnderlyingQty_swigregister(UnderlyingQtyPtr)

class TrdMatchID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdMatchID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdMatchID, name)
    def __repr__(self):
        return "<C FIX::TrdMatchID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdMatchID, 'this', _quickfix.new_TrdMatchID(*args))
        _swig_setattr(self, TrdMatchID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdMatchID):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdMatchIDPtr(TrdMatchID):
    def __init__(self, this):
        _swig_setattr(self, TrdMatchID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdMatchID, 'thisown', 0)
        _swig_setattr(self, TrdMatchID,self.__class__,TrdMatchID)
_quickfix.TrdMatchID_swigregister(TrdMatchIDPtr)

class SecondaryTradeReportRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTradeReportRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTradeReportRefID, name)
    def __repr__(self):
        return "<C FIX::SecondaryTradeReportRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecondaryTradeReportRefID, 'this', _quickfix.new_SecondaryTradeReportRefID(*args))
        _swig_setattr(self, SecondaryTradeReportRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecondaryTradeReportRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecondaryTradeReportRefIDPtr(SecondaryTradeReportRefID):
    def __init__(self, this):
        _swig_setattr(self, SecondaryTradeReportRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecondaryTradeReportRefID, 'thisown', 0)
        _swig_setattr(self, SecondaryTradeReportRefID,self.__class__,SecondaryTradeReportRefID)
_quickfix.SecondaryTradeReportRefID_swigregister(SecondaryTradeReportRefIDPtr)

class UnderlyingDirtyPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingDirtyPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingDirtyPrice, name)
    def __repr__(self):
        return "<C FIX::UnderlyingDirtyPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingDirtyPrice, 'this', _quickfix.new_UnderlyingDirtyPrice(*args))
        _swig_setattr(self, UnderlyingDirtyPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingDirtyPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingDirtyPricePtr(UnderlyingDirtyPrice):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingDirtyPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingDirtyPrice, 'thisown', 0)
        _swig_setattr(self, UnderlyingDirtyPrice,self.__class__,UnderlyingDirtyPrice)
_quickfix.UnderlyingDirtyPrice_swigregister(UnderlyingDirtyPricePtr)

class UnderlyingEndPrice(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingEndPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingEndPrice, name)
    def __repr__(self):
        return "<C FIX::UnderlyingEndPrice instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingEndPrice, 'this', _quickfix.new_UnderlyingEndPrice(*args))
        _swig_setattr(self, UnderlyingEndPrice, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingEndPrice):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingEndPricePtr(UnderlyingEndPrice):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingEndPrice, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingEndPrice, 'thisown', 0)
        _swig_setattr(self, UnderlyingEndPrice,self.__class__,UnderlyingEndPrice)
_quickfix.UnderlyingEndPrice_swigregister(UnderlyingEndPricePtr)

class UnderlyingStartValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStartValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStartValue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingStartValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingStartValue, 'this', _quickfix.new_UnderlyingStartValue(*args))
        _swig_setattr(self, UnderlyingStartValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingStartValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingStartValuePtr(UnderlyingStartValue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingStartValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingStartValue, 'thisown', 0)
        _swig_setattr(self, UnderlyingStartValue,self.__class__,UnderlyingStartValue)
_quickfix.UnderlyingStartValue_swigregister(UnderlyingStartValuePtr)

class UnderlyingCurrentValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCurrentValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCurrentValue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingCurrentValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingCurrentValue, 'this', _quickfix.new_UnderlyingCurrentValue(*args))
        _swig_setattr(self, UnderlyingCurrentValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingCurrentValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingCurrentValuePtr(UnderlyingCurrentValue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingCurrentValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingCurrentValue, 'thisown', 0)
        _swig_setattr(self, UnderlyingCurrentValue,self.__class__,UnderlyingCurrentValue)
_quickfix.UnderlyingCurrentValue_swigregister(UnderlyingCurrentValuePtr)

class UnderlyingEndValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingEndValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingEndValue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingEndValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingEndValue, 'this', _quickfix.new_UnderlyingEndValue(*args))
        _swig_setattr(self, UnderlyingEndValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingEndValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingEndValuePtr(UnderlyingEndValue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingEndValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingEndValue, 'thisown', 0)
        _swig_setattr(self, UnderlyingEndValue,self.__class__,UnderlyingEndValue)
_quickfix.UnderlyingEndValue_swigregister(UnderlyingEndValuePtr)

class NoUnderlyingStips(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyingStips, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyingStips, name)
    def __repr__(self):
        return "<C FIX::NoUnderlyingStips instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoUnderlyingStips, 'this', _quickfix.new_NoUnderlyingStips(*args))
        _swig_setattr(self, NoUnderlyingStips, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoUnderlyingStips):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoUnderlyingStipsPtr(NoUnderlyingStips):
    def __init__(self, this):
        _swig_setattr(self, NoUnderlyingStips, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoUnderlyingStips, 'thisown', 0)
        _swig_setattr(self, NoUnderlyingStips,self.__class__,NoUnderlyingStips)
_quickfix.NoUnderlyingStips_swigregister(NoUnderlyingStipsPtr)

class UnderlyingStipType(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStipType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStipType, name)
    def __repr__(self):
        return "<C FIX::UnderlyingStipType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingStipType, 'this', _quickfix.new_UnderlyingStipType(*args))
        _swig_setattr(self, UnderlyingStipType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingStipType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingStipTypePtr(UnderlyingStipType):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingStipType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingStipType, 'thisown', 0)
        _swig_setattr(self, UnderlyingStipType,self.__class__,UnderlyingStipType)
_quickfix.UnderlyingStipType_swigregister(UnderlyingStipTypePtr)

class UnderlyingStipValue(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStipValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStipValue, name)
    def __repr__(self):
        return "<C FIX::UnderlyingStipValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingStipValue, 'this', _quickfix.new_UnderlyingStipValue(*args))
        _swig_setattr(self, UnderlyingStipValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingStipValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingStipValuePtr(UnderlyingStipValue):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingStipValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingStipValue, 'thisown', 0)
        _swig_setattr(self, UnderlyingStipValue,self.__class__,UnderlyingStipValue)
_quickfix.UnderlyingStipValue_swigregister(UnderlyingStipValuePtr)

class MaturityNetMoney(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityNetMoney, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityNetMoney, name)
    def __repr__(self):
        return "<C FIX::MaturityNetMoney instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaturityNetMoney, 'this', _quickfix.new_MaturityNetMoney(*args))
        _swig_setattr(self, MaturityNetMoney, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaturityNetMoney):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaturityNetMoneyPtr(MaturityNetMoney):
    def __init__(self, this):
        _swig_setattr(self, MaturityNetMoney, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaturityNetMoney, 'thisown', 0)
        _swig_setattr(self, MaturityNetMoney,self.__class__,MaturityNetMoney)
_quickfix.MaturityNetMoney_swigregister(MaturityNetMoneyPtr)

class MiscFeeBasis(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeBasis, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeBasis, name)
    def __repr__(self):
        return "<C FIX::MiscFeeBasis instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MiscFeeBasis, 'this', _quickfix.new_MiscFeeBasis(*args))
        _swig_setattr(self, MiscFeeBasis, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MiscFeeBasis):
        try:
            if self.thisown: destroy(self)
        except: pass

class MiscFeeBasisPtr(MiscFeeBasis):
    def __init__(self, this):
        _swig_setattr(self, MiscFeeBasis, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MiscFeeBasis, 'thisown', 0)
        _swig_setattr(self, MiscFeeBasis,self.__class__,MiscFeeBasis)
_quickfix.MiscFeeBasis_swigregister(MiscFeeBasisPtr)

class TotNoAllocs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoAllocs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoAllocs, name)
    def __repr__(self):
        return "<C FIX::TotNoAllocs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNoAllocs, 'this', _quickfix.new_TotNoAllocs(*args))
        _swig_setattr(self, TotNoAllocs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNoAllocs):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNoAllocsPtr(TotNoAllocs):
    def __init__(self, this):
        _swig_setattr(self, TotNoAllocs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNoAllocs, 'thisown', 0)
        _swig_setattr(self, TotNoAllocs,self.__class__,TotNoAllocs)
_quickfix.TotNoAllocs_swigregister(TotNoAllocsPtr)

class LastFragment(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastFragment, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastFragment, name)
    def __repr__(self):
        return "<C FIX::LastFragment instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastFragment, 'this', _quickfix.new_LastFragment(*args))
        _swig_setattr(self, LastFragment, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastFragment):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastFragmentPtr(LastFragment):
    def __init__(self, this):
        _swig_setattr(self, LastFragment, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastFragment, 'thisown', 0)
        _swig_setattr(self, LastFragment,self.__class__,LastFragment)
_quickfix.LastFragment_swigregister(LastFragmentPtr)

class CollReqID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollReqID, name)
    def __repr__(self):
        return "<C FIX::CollReqID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollReqID, 'this', _quickfix.new_CollReqID(*args))
        _swig_setattr(self, CollReqID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollReqID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollReqIDPtr(CollReqID):
    def __init__(self, this):
        _swig_setattr(self, CollReqID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollReqID, 'thisown', 0)
        _swig_setattr(self, CollReqID,self.__class__,CollReqID)
_quickfix.CollReqID_swigregister(CollReqIDPtr)

class CollAsgnReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnReason, name)
    def __repr__(self):
        return "<C FIX::CollAsgnReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAsgnReason, 'this', _quickfix.new_CollAsgnReason(*args))
        _swig_setattr(self, CollAsgnReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAsgnReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollAsgnReasonPtr(CollAsgnReason):
    def __init__(self, this):
        _swig_setattr(self, CollAsgnReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAsgnReason, 'thisown', 0)
        _swig_setattr(self, CollAsgnReason,self.__class__,CollAsgnReason)
_quickfix.CollAsgnReason_swigregister(CollAsgnReasonPtr)

class CollInquiryQualifier(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryQualifier, name)
    def __repr__(self):
        return "<C FIX::CollInquiryQualifier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollInquiryQualifier, 'this', _quickfix.new_CollInquiryQualifier(*args))
        _swig_setattr(self, CollInquiryQualifier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollInquiryQualifier):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollInquiryQualifierPtr(CollInquiryQualifier):
    def __init__(self, this):
        _swig_setattr(self, CollInquiryQualifier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollInquiryQualifier, 'thisown', 0)
        _swig_setattr(self, CollInquiryQualifier,self.__class__,CollInquiryQualifier)
_quickfix.CollInquiryQualifier_swigregister(CollInquiryQualifierPtr)

class NoTrades(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTrades, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoTrades, name)
    def __repr__(self):
        return "<C FIX::NoTrades instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoTrades, 'this', _quickfix.new_NoTrades(*args))
        _swig_setattr(self, NoTrades, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoTrades):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoTradesPtr(NoTrades):
    def __init__(self, this):
        _swig_setattr(self, NoTrades, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoTrades, 'thisown', 0)
        _swig_setattr(self, NoTrades,self.__class__,NoTrades)
_quickfix.NoTrades_swigregister(NoTradesPtr)

class MarginRatio(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarginRatio, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MarginRatio, name)
    def __repr__(self):
        return "<C FIX::MarginRatio instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MarginRatio, 'this', _quickfix.new_MarginRatio(*args))
        _swig_setattr(self, MarginRatio, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MarginRatio):
        try:
            if self.thisown: destroy(self)
        except: pass

class MarginRatioPtr(MarginRatio):
    def __init__(self, this):
        _swig_setattr(self, MarginRatio, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MarginRatio, 'thisown', 0)
        _swig_setattr(self, MarginRatio,self.__class__,MarginRatio)
_quickfix.MarginRatio_swigregister(MarginRatioPtr)

class MarginExcess(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarginExcess, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MarginExcess, name)
    def __repr__(self):
        return "<C FIX::MarginExcess instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MarginExcess, 'this', _quickfix.new_MarginExcess(*args))
        _swig_setattr(self, MarginExcess, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MarginExcess):
        try:
            if self.thisown: destroy(self)
        except: pass

class MarginExcessPtr(MarginExcess):
    def __init__(self, this):
        _swig_setattr(self, MarginExcess, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MarginExcess, 'thisown', 0)
        _swig_setattr(self, MarginExcess,self.__class__,MarginExcess)
_quickfix.MarginExcess_swigregister(MarginExcessPtr)

class TotalNetValue(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNetValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNetValue, name)
    def __repr__(self):
        return "<C FIX::TotalNetValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalNetValue, 'this', _quickfix.new_TotalNetValue(*args))
        _swig_setattr(self, TotalNetValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalNetValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalNetValuePtr(TotalNetValue):
    def __init__(self, this):
        _swig_setattr(self, TotalNetValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalNetValue, 'thisown', 0)
        _swig_setattr(self, TotalNetValue,self.__class__,TotalNetValue)
_quickfix.TotalNetValue_swigregister(TotalNetValuePtr)

class CashOutstanding(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashOutstanding, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashOutstanding, name)
    def __repr__(self):
        return "<C FIX::CashOutstanding instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashOutstanding, 'this', _quickfix.new_CashOutstanding(*args))
        _swig_setattr(self, CashOutstanding, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashOutstanding):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashOutstandingPtr(CashOutstanding):
    def __init__(self, this):
        _swig_setattr(self, CashOutstanding, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashOutstanding, 'thisown', 0)
        _swig_setattr(self, CashOutstanding,self.__class__,CashOutstanding)
_quickfix.CashOutstanding_swigregister(CashOutstandingPtr)

class CollAsgnID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnID, name)
    def __repr__(self):
        return "<C FIX::CollAsgnID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAsgnID, 'this', _quickfix.new_CollAsgnID(*args))
        _swig_setattr(self, CollAsgnID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAsgnID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollAsgnIDPtr(CollAsgnID):
    def __init__(self, this):
        _swig_setattr(self, CollAsgnID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAsgnID, 'thisown', 0)
        _swig_setattr(self, CollAsgnID,self.__class__,CollAsgnID)
_quickfix.CollAsgnID_swigregister(CollAsgnIDPtr)

class CollAsgnTransType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnTransType, name)
    def __repr__(self):
        return "<C FIX::CollAsgnTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAsgnTransType, 'this', _quickfix.new_CollAsgnTransType(*args))
        _swig_setattr(self, CollAsgnTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAsgnTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollAsgnTransTypePtr(CollAsgnTransType):
    def __init__(self, this):
        _swig_setattr(self, CollAsgnTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAsgnTransType, 'thisown', 0)
        _swig_setattr(self, CollAsgnTransType,self.__class__,CollAsgnTransType)
_quickfix.CollAsgnTransType_swigregister(CollAsgnTransTypePtr)

class CollRespID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollRespID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollRespID, name)
    def __repr__(self):
        return "<C FIX::CollRespID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollRespID, 'this', _quickfix.new_CollRespID(*args))
        _swig_setattr(self, CollRespID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollRespID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollRespIDPtr(CollRespID):
    def __init__(self, this):
        _swig_setattr(self, CollRespID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollRespID, 'thisown', 0)
        _swig_setattr(self, CollRespID,self.__class__,CollRespID)
_quickfix.CollRespID_swigregister(CollRespIDPtr)

class CollAsgnRespType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnRespType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnRespType, name)
    def __repr__(self):
        return "<C FIX::CollAsgnRespType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAsgnRespType, 'this', _quickfix.new_CollAsgnRespType(*args))
        _swig_setattr(self, CollAsgnRespType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAsgnRespType):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollAsgnRespTypePtr(CollAsgnRespType):
    def __init__(self, this):
        _swig_setattr(self, CollAsgnRespType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAsgnRespType, 'thisown', 0)
        _swig_setattr(self, CollAsgnRespType,self.__class__,CollAsgnRespType)
_quickfix.CollAsgnRespType_swigregister(CollAsgnRespTypePtr)

class CollAsgnRejectReason(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnRejectReason, name)
    def __repr__(self):
        return "<C FIX::CollAsgnRejectReason instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAsgnRejectReason, 'this', _quickfix.new_CollAsgnRejectReason(*args))
        _swig_setattr(self, CollAsgnRejectReason, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAsgnRejectReason):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollAsgnRejectReasonPtr(CollAsgnRejectReason):
    def __init__(self, this):
        _swig_setattr(self, CollAsgnRejectReason, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAsgnRejectReason, 'thisown', 0)
        _swig_setattr(self, CollAsgnRejectReason,self.__class__,CollAsgnRejectReason)
_quickfix.CollAsgnRejectReason_swigregister(CollAsgnRejectReasonPtr)

class CollAsgnRefID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnRefID, name)
    def __repr__(self):
        return "<C FIX::CollAsgnRefID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAsgnRefID, 'this', _quickfix.new_CollAsgnRefID(*args))
        _swig_setattr(self, CollAsgnRefID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAsgnRefID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollAsgnRefIDPtr(CollAsgnRefID):
    def __init__(self, this):
        _swig_setattr(self, CollAsgnRefID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAsgnRefID, 'thisown', 0)
        _swig_setattr(self, CollAsgnRefID,self.__class__,CollAsgnRefID)
_quickfix.CollAsgnRefID_swigregister(CollAsgnRefIDPtr)

class CollRptID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollRptID, name)
    def __repr__(self):
        return "<C FIX::CollRptID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollRptID, 'this', _quickfix.new_CollRptID(*args))
        _swig_setattr(self, CollRptID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollRptID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollRptIDPtr(CollRptID):
    def __init__(self, this):
        _swig_setattr(self, CollRptID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollRptID, 'thisown', 0)
        _swig_setattr(self, CollRptID,self.__class__,CollRptID)
_quickfix.CollRptID_swigregister(CollRptIDPtr)

class CollInquiryID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryID, name)
    def __repr__(self):
        return "<C FIX::CollInquiryID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollInquiryID, 'this', _quickfix.new_CollInquiryID(*args))
        _swig_setattr(self, CollInquiryID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollInquiryID):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollInquiryIDPtr(CollInquiryID):
    def __init__(self, this):
        _swig_setattr(self, CollInquiryID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollInquiryID, 'thisown', 0)
        _swig_setattr(self, CollInquiryID,self.__class__,CollInquiryID)
_quickfix.CollInquiryID_swigregister(CollInquiryIDPtr)

class CollStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollStatus, name)
    def __repr__(self):
        return "<C FIX::CollStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollStatus, 'this', _quickfix.new_CollStatus(*args))
        _swig_setattr(self, CollStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollStatusPtr(CollStatus):
    def __init__(self, this):
        _swig_setattr(self, CollStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollStatus, 'thisown', 0)
        _swig_setattr(self, CollStatus,self.__class__,CollStatus)
_quickfix.CollStatus_swigregister(CollStatusPtr)

class TotNumReports(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNumReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotNumReports, name)
    def __repr__(self):
        return "<C FIX::TotNumReports instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotNumReports, 'this', _quickfix.new_TotNumReports(*args))
        _swig_setattr(self, TotNumReports, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotNumReports):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotNumReportsPtr(TotNumReports):
    def __init__(self, this):
        _swig_setattr(self, TotNumReports, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotNumReports, 'thisown', 0)
        _swig_setattr(self, TotNumReports,self.__class__,TotNumReports)
_quickfix.TotNumReports_swigregister(TotNumReportsPtr)

class LastRptRequested(BoolField):
    __swig_setmethods__ = {}
    for _s in [BoolField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastRptRequested, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastRptRequested, name)
    def __repr__(self):
        return "<C FIX::LastRptRequested instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastRptRequested, 'this', _quickfix.new_LastRptRequested(*args))
        _swig_setattr(self, LastRptRequested, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastRptRequested):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastRptRequestedPtr(LastRptRequested):
    def __init__(self, this):
        _swig_setattr(self, LastRptRequested, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastRptRequested, 'thisown', 0)
        _swig_setattr(self, LastRptRequested,self.__class__,LastRptRequested)
_quickfix.LastRptRequested_swigregister(LastRptRequestedPtr)

class AgreementDesc(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementDesc, name)
    def __repr__(self):
        return "<C FIX::AgreementDesc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AgreementDesc, 'this', _quickfix.new_AgreementDesc(*args))
        _swig_setattr(self, AgreementDesc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AgreementDesc):
        try:
            if self.thisown: destroy(self)
        except: pass

class AgreementDescPtr(AgreementDesc):
    def __init__(self, this):
        _swig_setattr(self, AgreementDesc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AgreementDesc, 'thisown', 0)
        _swig_setattr(self, AgreementDesc,self.__class__,AgreementDesc)
_quickfix.AgreementDesc_swigregister(AgreementDescPtr)

class AgreementID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementID, name)
    def __repr__(self):
        return "<C FIX::AgreementID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AgreementID, 'this', _quickfix.new_AgreementID(*args))
        _swig_setattr(self, AgreementID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AgreementID):
        try:
            if self.thisown: destroy(self)
        except: pass

class AgreementIDPtr(AgreementID):
    def __init__(self, this):
        _swig_setattr(self, AgreementID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AgreementID, 'thisown', 0)
        _swig_setattr(self, AgreementID,self.__class__,AgreementID)
_quickfix.AgreementID_swigregister(AgreementIDPtr)

class AgreementDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementDate, name)
    def __repr__(self):
        return "<C FIX::AgreementDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AgreementDate, 'this', _quickfix.new_AgreementDate(*args))
        _swig_setattr(self, AgreementDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AgreementDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class AgreementDatePtr(AgreementDate):
    def __init__(self, this):
        _swig_setattr(self, AgreementDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AgreementDate, 'thisown', 0)
        _swig_setattr(self, AgreementDate,self.__class__,AgreementDate)
_quickfix.AgreementDate_swigregister(AgreementDatePtr)

class StartDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StartDate, name)
    def __repr__(self):
        return "<C FIX::StartDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StartDate, 'this', _quickfix.new_StartDate(*args))
        _swig_setattr(self, StartDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StartDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class StartDatePtr(StartDate):
    def __init__(self, this):
        _swig_setattr(self, StartDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StartDate, 'thisown', 0)
        _swig_setattr(self, StartDate,self.__class__,StartDate)
_quickfix.StartDate_swigregister(StartDatePtr)

class EndDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EndDate, name)
    def __repr__(self):
        return "<C FIX::EndDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EndDate, 'this', _quickfix.new_EndDate(*args))
        _swig_setattr(self, EndDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EndDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class EndDatePtr(EndDate):
    def __init__(self, this):
        _swig_setattr(self, EndDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EndDate, 'thisown', 0)
        _swig_setattr(self, EndDate,self.__class__,EndDate)
_quickfix.EndDate_swigregister(EndDatePtr)

class AgreementCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementCurrency, name)
    def __repr__(self):
        return "<C FIX::AgreementCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AgreementCurrency, 'this', _quickfix.new_AgreementCurrency(*args))
        _swig_setattr(self, AgreementCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AgreementCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class AgreementCurrencyPtr(AgreementCurrency):
    def __init__(self, this):
        _swig_setattr(self, AgreementCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AgreementCurrency, 'thisown', 0)
        _swig_setattr(self, AgreementCurrency,self.__class__,AgreementCurrency)
_quickfix.AgreementCurrency_swigregister(AgreementCurrencyPtr)

class DeliveryType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryType, name)
    def __repr__(self):
        return "<C FIX::DeliveryType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DeliveryType, 'this', _quickfix.new_DeliveryType(*args))
        _swig_setattr(self, DeliveryType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DeliveryType):
        try:
            if self.thisown: destroy(self)
        except: pass

class DeliveryTypePtr(DeliveryType):
    def __init__(self, this):
        _swig_setattr(self, DeliveryType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DeliveryType, 'thisown', 0)
        _swig_setattr(self, DeliveryType,self.__class__,DeliveryType)
_quickfix.DeliveryType_swigregister(DeliveryTypePtr)

class EndAccruedInterestAmt(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndAccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EndAccruedInterestAmt, name)
    def __repr__(self):
        return "<C FIX::EndAccruedInterestAmt instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EndAccruedInterestAmt, 'this', _quickfix.new_EndAccruedInterestAmt(*args))
        _swig_setattr(self, EndAccruedInterestAmt, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EndAccruedInterestAmt):
        try:
            if self.thisown: destroy(self)
        except: pass

class EndAccruedInterestAmtPtr(EndAccruedInterestAmt):
    def __init__(self, this):
        _swig_setattr(self, EndAccruedInterestAmt, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EndAccruedInterestAmt, 'thisown', 0)
        _swig_setattr(self, EndAccruedInterestAmt,self.__class__,EndAccruedInterestAmt)
_quickfix.EndAccruedInterestAmt_swigregister(EndAccruedInterestAmtPtr)

class StartCash(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartCash, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StartCash, name)
    def __repr__(self):
        return "<C FIX::StartCash instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StartCash, 'this', _quickfix.new_StartCash(*args))
        _swig_setattr(self, StartCash, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StartCash):
        try:
            if self.thisown: destroy(self)
        except: pass

class StartCashPtr(StartCash):
    def __init__(self, this):
        _swig_setattr(self, StartCash, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StartCash, 'thisown', 0)
        _swig_setattr(self, StartCash,self.__class__,StartCash)
_quickfix.StartCash_swigregister(StartCashPtr)

class EndCash(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndCash, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, EndCash, name)
    def __repr__(self):
        return "<C FIX::EndCash instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, EndCash, 'this', _quickfix.new_EndCash(*args))
        _swig_setattr(self, EndCash, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_EndCash):
        try:
            if self.thisown: destroy(self)
        except: pass

class EndCashPtr(EndCash):
    def __init__(self, this):
        _swig_setattr(self, EndCash, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, EndCash, 'thisown', 0)
        _swig_setattr(self, EndCash,self.__class__,EndCash)
_quickfix.EndCash_swigregister(EndCashPtr)

class UserRequestID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserRequestID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UserRequestID, name)
    def __repr__(self):
        return "<C FIX::UserRequestID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UserRequestID, 'this', _quickfix.new_UserRequestID(*args))
        _swig_setattr(self, UserRequestID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UserRequestID):
        try:
            if self.thisown: destroy(self)
        except: pass

class UserRequestIDPtr(UserRequestID):
    def __init__(self, this):
        _swig_setattr(self, UserRequestID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UserRequestID, 'thisown', 0)
        _swig_setattr(self, UserRequestID,self.__class__,UserRequestID)
_quickfix.UserRequestID_swigregister(UserRequestIDPtr)

class UserRequestType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UserRequestType, name)
    def __repr__(self):
        return "<C FIX::UserRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UserRequestType, 'this', _quickfix.new_UserRequestType(*args))
        _swig_setattr(self, UserRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UserRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class UserRequestTypePtr(UserRequestType):
    def __init__(self, this):
        _swig_setattr(self, UserRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UserRequestType, 'thisown', 0)
        _swig_setattr(self, UserRequestType,self.__class__,UserRequestType)
_quickfix.UserRequestType_swigregister(UserRequestTypePtr)

class NewPassword(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewPassword, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NewPassword, name)
    def __repr__(self):
        return "<C FIX::NewPassword instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NewPassword, 'this', _quickfix.new_NewPassword(*args))
        _swig_setattr(self, NewPassword, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NewPassword):
        try:
            if self.thisown: destroy(self)
        except: pass

class NewPasswordPtr(NewPassword):
    def __init__(self, this):
        _swig_setattr(self, NewPassword, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NewPassword, 'thisown', 0)
        _swig_setattr(self, NewPassword,self.__class__,NewPassword)
_quickfix.NewPassword_swigregister(NewPasswordPtr)

class UserStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UserStatus, name)
    def __repr__(self):
        return "<C FIX::UserStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UserStatus, 'this', _quickfix.new_UserStatus(*args))
        _swig_setattr(self, UserStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UserStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class UserStatusPtr(UserStatus):
    def __init__(self, this):
        _swig_setattr(self, UserStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UserStatus, 'thisown', 0)
        _swig_setattr(self, UserStatus,self.__class__,UserStatus)
_quickfix.UserStatus_swigregister(UserStatusPtr)

class UserStatusText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserStatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UserStatusText, name)
    def __repr__(self):
        return "<C FIX::UserStatusText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UserStatusText, 'this', _quickfix.new_UserStatusText(*args))
        _swig_setattr(self, UserStatusText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UserStatusText):
        try:
            if self.thisown: destroy(self)
        except: pass

class UserStatusTextPtr(UserStatusText):
    def __init__(self, this):
        _swig_setattr(self, UserStatusText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UserStatusText, 'thisown', 0)
        _swig_setattr(self, UserStatusText,self.__class__,UserStatusText)
_quickfix.UserStatusText_swigregister(UserStatusTextPtr)

class StatusValue(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusValue, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StatusValue, name)
    def __repr__(self):
        return "<C FIX::StatusValue instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StatusValue, 'this', _quickfix.new_StatusValue(*args))
        _swig_setattr(self, StatusValue, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StatusValue):
        try:
            if self.thisown: destroy(self)
        except: pass

class StatusValuePtr(StatusValue):
    def __init__(self, this):
        _swig_setattr(self, StatusValue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StatusValue, 'thisown', 0)
        _swig_setattr(self, StatusValue,self.__class__,StatusValue)
_quickfix.StatusValue_swigregister(StatusValuePtr)

class StatusText(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StatusText, name)
    def __repr__(self):
        return "<C FIX::StatusText instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StatusText, 'this', _quickfix.new_StatusText(*args))
        _swig_setattr(self, StatusText, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StatusText):
        try:
            if self.thisown: destroy(self)
        except: pass

class StatusTextPtr(StatusText):
    def __init__(self, this):
        _swig_setattr(self, StatusText, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StatusText, 'thisown', 0)
        _swig_setattr(self, StatusText,self.__class__,StatusText)
_quickfix.StatusText_swigregister(StatusTextPtr)

class RefCompID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RefCompID, name)
    def __repr__(self):
        return "<C FIX::RefCompID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RefCompID, 'this', _quickfix.new_RefCompID(*args))
        _swig_setattr(self, RefCompID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RefCompID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RefCompIDPtr(RefCompID):
    def __init__(self, this):
        _swig_setattr(self, RefCompID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RefCompID, 'thisown', 0)
        _swig_setattr(self, RefCompID,self.__class__,RefCompID)
_quickfix.RefCompID_swigregister(RefCompIDPtr)

class RefSubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RefSubID, name)
    def __repr__(self):
        return "<C FIX::RefSubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RefSubID, 'this', _quickfix.new_RefSubID(*args))
        _swig_setattr(self, RefSubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RefSubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class RefSubIDPtr(RefSubID):
    def __init__(self, this):
        _swig_setattr(self, RefSubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RefSubID, 'thisown', 0)
        _swig_setattr(self, RefSubID,self.__class__,RefSubID)
_quickfix.RefSubID_swigregister(RefSubIDPtr)

class NetworkResponseID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkResponseID, name)
    def __repr__(self):
        return "<C FIX::NetworkResponseID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetworkResponseID, 'this', _quickfix.new_NetworkResponseID(*args))
        _swig_setattr(self, NetworkResponseID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetworkResponseID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetworkResponseIDPtr(NetworkResponseID):
    def __init__(self, this):
        _swig_setattr(self, NetworkResponseID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetworkResponseID, 'thisown', 0)
        _swig_setattr(self, NetworkResponseID,self.__class__,NetworkResponseID)
_quickfix.NetworkResponseID_swigregister(NetworkResponseIDPtr)

class NetworkRequestID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkRequestID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkRequestID, name)
    def __repr__(self):
        return "<C FIX::NetworkRequestID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetworkRequestID, 'this', _quickfix.new_NetworkRequestID(*args))
        _swig_setattr(self, NetworkRequestID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetworkRequestID):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetworkRequestIDPtr(NetworkRequestID):
    def __init__(self, this):
        _swig_setattr(self, NetworkRequestID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetworkRequestID, 'thisown', 0)
        _swig_setattr(self, NetworkRequestID,self.__class__,NetworkRequestID)
_quickfix.NetworkRequestID_swigregister(NetworkRequestIDPtr)

class LastNetworkResponseID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastNetworkResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastNetworkResponseID, name)
    def __repr__(self):
        return "<C FIX::LastNetworkResponseID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastNetworkResponseID, 'this', _quickfix.new_LastNetworkResponseID(*args))
        _swig_setattr(self, LastNetworkResponseID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastNetworkResponseID):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastNetworkResponseIDPtr(LastNetworkResponseID):
    def __init__(self, this):
        _swig_setattr(self, LastNetworkResponseID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastNetworkResponseID, 'thisown', 0)
        _swig_setattr(self, LastNetworkResponseID,self.__class__,LastNetworkResponseID)
_quickfix.LastNetworkResponseID_swigregister(LastNetworkResponseIDPtr)

class NetworkRequestType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkRequestType, name)
    def __repr__(self):
        return "<C FIX::NetworkRequestType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetworkRequestType, 'this', _quickfix.new_NetworkRequestType(*args))
        _swig_setattr(self, NetworkRequestType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetworkRequestType):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetworkRequestTypePtr(NetworkRequestType):
    def __init__(self, this):
        _swig_setattr(self, NetworkRequestType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetworkRequestType, 'thisown', 0)
        _swig_setattr(self, NetworkRequestType,self.__class__,NetworkRequestType)
_quickfix.NetworkRequestType_swigregister(NetworkRequestTypePtr)

class NoCompIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoCompIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoCompIDs, name)
    def __repr__(self):
        return "<C FIX::NoCompIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoCompIDs, 'this', _quickfix.new_NoCompIDs(*args))
        _swig_setattr(self, NoCompIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoCompIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoCompIDsPtr(NoCompIDs):
    def __init__(self, this):
        _swig_setattr(self, NoCompIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoCompIDs, 'thisown', 0)
        _swig_setattr(self, NoCompIDs,self.__class__,NoCompIDs)
_quickfix.NoCompIDs_swigregister(NoCompIDsPtr)

class NetworkStatusResponseType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkStatusResponseType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkStatusResponseType, name)
    def __repr__(self):
        return "<C FIX::NetworkStatusResponseType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NetworkStatusResponseType, 'this', _quickfix.new_NetworkStatusResponseType(*args))
        _swig_setattr(self, NetworkStatusResponseType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NetworkStatusResponseType):
        try:
            if self.thisown: destroy(self)
        except: pass

class NetworkStatusResponseTypePtr(NetworkStatusResponseType):
    def __init__(self, this):
        _swig_setattr(self, NetworkStatusResponseType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NetworkStatusResponseType, 'thisown', 0)
        _swig_setattr(self, NetworkStatusResponseType,self.__class__,NetworkStatusResponseType)
_quickfix.NetworkStatusResponseType_swigregister(NetworkStatusResponseTypePtr)

class NoCollInquiryQualifier(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoCollInquiryQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoCollInquiryQualifier, name)
    def __repr__(self):
        return "<C FIX::NoCollInquiryQualifier instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoCollInquiryQualifier, 'this', _quickfix.new_NoCollInquiryQualifier(*args))
        _swig_setattr(self, NoCollInquiryQualifier, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoCollInquiryQualifier):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoCollInquiryQualifierPtr(NoCollInquiryQualifier):
    def __init__(self, this):
        _swig_setattr(self, NoCollInquiryQualifier, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoCollInquiryQualifier, 'thisown', 0)
        _swig_setattr(self, NoCollInquiryQualifier,self.__class__,NoCollInquiryQualifier)
_quickfix.NoCollInquiryQualifier_swigregister(NoCollInquiryQualifierPtr)

class TrdRptStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRptStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRptStatus, name)
    def __repr__(self):
        return "<C FIX::TrdRptStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TrdRptStatus, 'this', _quickfix.new_TrdRptStatus(*args))
        _swig_setattr(self, TrdRptStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TrdRptStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class TrdRptStatusPtr(TrdRptStatus):
    def __init__(self, this):
        _swig_setattr(self, TrdRptStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TrdRptStatus, 'thisown', 0)
        _swig_setattr(self, TrdRptStatus,self.__class__,TrdRptStatus)
_quickfix.TrdRptStatus_swigregister(TrdRptStatusPtr)

class AffirmStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffirmStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AffirmStatus, name)
    def __repr__(self):
        return "<C FIX::AffirmStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AffirmStatus, 'this', _quickfix.new_AffirmStatus(*args))
        _swig_setattr(self, AffirmStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AffirmStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class AffirmStatusPtr(AffirmStatus):
    def __init__(self, this):
        _swig_setattr(self, AffirmStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AffirmStatus, 'thisown', 0)
        _swig_setattr(self, AffirmStatus,self.__class__,AffirmStatus)
_quickfix.AffirmStatus_swigregister(AffirmStatusPtr)

class UnderlyingStrikeCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStrikeCurrency, name)
    def __repr__(self):
        return "<C FIX::UnderlyingStrikeCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingStrikeCurrency, 'this', _quickfix.new_UnderlyingStrikeCurrency(*args))
        _swig_setattr(self, UnderlyingStrikeCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingStrikeCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingStrikeCurrencyPtr(UnderlyingStrikeCurrency):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingStrikeCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingStrikeCurrency, 'thisown', 0)
        _swig_setattr(self, UnderlyingStrikeCurrency,self.__class__,UnderlyingStrikeCurrency)
_quickfix.UnderlyingStrikeCurrency_swigregister(UnderlyingStrikeCurrencyPtr)

class LegStrikeCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegStrikeCurrency, name)
    def __repr__(self):
        return "<C FIX::LegStrikeCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegStrikeCurrency, 'this', _quickfix.new_LegStrikeCurrency(*args))
        _swig_setattr(self, LegStrikeCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegStrikeCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegStrikeCurrencyPtr(LegStrikeCurrency):
    def __init__(self, this):
        _swig_setattr(self, LegStrikeCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegStrikeCurrency, 'thisown', 0)
        _swig_setattr(self, LegStrikeCurrency,self.__class__,LegStrikeCurrency)
_quickfix.LegStrikeCurrency_swigregister(LegStrikeCurrencyPtr)

class TimeBracket(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeBracket, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TimeBracket, name)
    def __repr__(self):
        return "<C FIX::TimeBracket instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TimeBracket, 'this', _quickfix.new_TimeBracket(*args))
        _swig_setattr(self, TimeBracket, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TimeBracket):
        try:
            if self.thisown: destroy(self)
        except: pass

class TimeBracketPtr(TimeBracket):
    def __init__(self, this):
        _swig_setattr(self, TimeBracket, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TimeBracket, 'thisown', 0)
        _swig_setattr(self, TimeBracket,self.__class__,TimeBracket)
_quickfix.TimeBracket_swigregister(TimeBracketPtr)

class CollAction(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollAction, name)
    def __repr__(self):
        return "<C FIX::CollAction instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollAction, 'this', _quickfix.new_CollAction(*args))
        _swig_setattr(self, CollAction, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollAction):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollActionPtr(CollAction):
    def __init__(self, this):
        _swig_setattr(self, CollAction, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollAction, 'thisown', 0)
        _swig_setattr(self, CollAction,self.__class__,CollAction)
_quickfix.CollAction_swigregister(CollActionPtr)

class CollInquiryStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryStatus, name)
    def __repr__(self):
        return "<C FIX::CollInquiryStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollInquiryStatus, 'this', _quickfix.new_CollInquiryStatus(*args))
        _swig_setattr(self, CollInquiryStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollInquiryStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollInquiryStatusPtr(CollInquiryStatus):
    def __init__(self, this):
        _swig_setattr(self, CollInquiryStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollInquiryStatus, 'thisown', 0)
        _swig_setattr(self, CollInquiryStatus,self.__class__,CollInquiryStatus)
_quickfix.CollInquiryStatus_swigregister(CollInquiryStatusPtr)

class CollInquiryResult(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryResult, name)
    def __repr__(self):
        return "<C FIX::CollInquiryResult instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CollInquiryResult, 'this', _quickfix.new_CollInquiryResult(*args))
        _swig_setattr(self, CollInquiryResult, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CollInquiryResult):
        try:
            if self.thisown: destroy(self)
        except: pass

class CollInquiryResultPtr(CollInquiryResult):
    def __init__(self, this):
        _swig_setattr(self, CollInquiryResult, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CollInquiryResult, 'thisown', 0)
        _swig_setattr(self, CollInquiryResult,self.__class__,CollInquiryResult)
_quickfix.CollInquiryResult_swigregister(CollInquiryResultPtr)

class StrikeCurrency(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeCurrency, name)
    def __repr__(self):
        return "<C FIX::StrikeCurrency instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, StrikeCurrency, 'this', _quickfix.new_StrikeCurrency(*args))
        _swig_setattr(self, StrikeCurrency, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_StrikeCurrency):
        try:
            if self.thisown: destroy(self)
        except: pass

class StrikeCurrencyPtr(StrikeCurrency):
    def __init__(self, this):
        _swig_setattr(self, StrikeCurrency, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, StrikeCurrency, 'thisown', 0)
        _swig_setattr(self, StrikeCurrency,self.__class__,StrikeCurrency)
_quickfix.StrikeCurrency_swigregister(StrikeCurrencyPtr)

class NoNested3PartyIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested3PartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested3PartyIDs, name)
    def __repr__(self):
        return "<C FIX::NoNested3PartyIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoNested3PartyIDs, 'this', _quickfix.new_NoNested3PartyIDs(*args))
        _swig_setattr(self, NoNested3PartyIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoNested3PartyIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoNested3PartyIDsPtr(NoNested3PartyIDs):
    def __init__(self, this):
        _swig_setattr(self, NoNested3PartyIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoNested3PartyIDs, 'thisown', 0)
        _swig_setattr(self, NoNested3PartyIDs,self.__class__,NoNested3PartyIDs)
_quickfix.NoNested3PartyIDs_swigregister(NoNested3PartyIDsPtr)

class Nested3PartyID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartyID, name)
    def __repr__(self):
        return "<C FIX::Nested3PartyID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested3PartyID, 'this', _quickfix.new_Nested3PartyID(*args))
        _swig_setattr(self, Nested3PartyID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested3PartyID):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested3PartyIDPtr(Nested3PartyID):
    def __init__(self, this):
        _swig_setattr(self, Nested3PartyID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested3PartyID, 'thisown', 0)
        _swig_setattr(self, Nested3PartyID,self.__class__,Nested3PartyID)
_quickfix.Nested3PartyID_swigregister(Nested3PartyIDPtr)

class Nested3PartyIDSource(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartyIDSource, name)
    def __repr__(self):
        return "<C FIX::Nested3PartyIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested3PartyIDSource, 'this', _quickfix.new_Nested3PartyIDSource(*args))
        _swig_setattr(self, Nested3PartyIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested3PartyIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested3PartyIDSourcePtr(Nested3PartyIDSource):
    def __init__(self, this):
        _swig_setattr(self, Nested3PartyIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested3PartyIDSource, 'thisown', 0)
        _swig_setattr(self, Nested3PartyIDSource,self.__class__,Nested3PartyIDSource)
_quickfix.Nested3PartyIDSource_swigregister(Nested3PartyIDSourcePtr)

class Nested3PartyRole(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartyRole, name)
    def __repr__(self):
        return "<C FIX::Nested3PartyRole instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested3PartyRole, 'this', _quickfix.new_Nested3PartyRole(*args))
        _swig_setattr(self, Nested3PartyRole, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested3PartyRole):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested3PartyRolePtr(Nested3PartyRole):
    def __init__(self, this):
        _swig_setattr(self, Nested3PartyRole, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested3PartyRole, 'thisown', 0)
        _swig_setattr(self, Nested3PartyRole,self.__class__,Nested3PartyRole)
_quickfix.Nested3PartyRole_swigregister(Nested3PartyRolePtr)

class NoNested3PartySubIDs(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested3PartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested3PartySubIDs, name)
    def __repr__(self):
        return "<C FIX::NoNested3PartySubIDs instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NoNested3PartySubIDs, 'this', _quickfix.new_NoNested3PartySubIDs(*args))
        _swig_setattr(self, NoNested3PartySubIDs, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NoNested3PartySubIDs):
        try:
            if self.thisown: destroy(self)
        except: pass

class NoNested3PartySubIDsPtr(NoNested3PartySubIDs):
    def __init__(self, this):
        _swig_setattr(self, NoNested3PartySubIDs, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NoNested3PartySubIDs, 'thisown', 0)
        _swig_setattr(self, NoNested3PartySubIDs,self.__class__,NoNested3PartySubIDs)
_quickfix.NoNested3PartySubIDs_swigregister(NoNested3PartySubIDsPtr)

class Nested3PartySubID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartySubID, name)
    def __repr__(self):
        return "<C FIX::Nested3PartySubID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested3PartySubID, 'this', _quickfix.new_Nested3PartySubID(*args))
        _swig_setattr(self, Nested3PartySubID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested3PartySubID):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested3PartySubIDPtr(Nested3PartySubID):
    def __init__(self, this):
        _swig_setattr(self, Nested3PartySubID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested3PartySubID, 'thisown', 0)
        _swig_setattr(self, Nested3PartySubID,self.__class__,Nested3PartySubID)
_quickfix.Nested3PartySubID_swigregister(Nested3PartySubIDPtr)

class Nested3PartySubIDType(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartySubIDType, name)
    def __repr__(self):
        return "<C FIX::Nested3PartySubIDType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Nested3PartySubIDType, 'this', _quickfix.new_Nested3PartySubIDType(*args))
        _swig_setattr(self, Nested3PartySubIDType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Nested3PartySubIDType):
        try:
            if self.thisown: destroy(self)
        except: pass

class Nested3PartySubIDTypePtr(Nested3PartySubIDType):
    def __init__(self, this):
        _swig_setattr(self, Nested3PartySubIDType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Nested3PartySubIDType, 'thisown', 0)
        _swig_setattr(self, Nested3PartySubIDType,self.__class__,Nested3PartySubIDType)
_quickfix.Nested3PartySubIDType_swigregister(Nested3PartySubIDTypePtr)

class LegContractSettlMonth(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegContractSettlMonth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegContractSettlMonth, name)
    def __repr__(self):
        return "<C FIX::LegContractSettlMonth instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegContractSettlMonth, 'this', _quickfix.new_LegContractSettlMonth(*args))
        _swig_setattr(self, LegContractSettlMonth, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegContractSettlMonth):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegContractSettlMonthPtr(LegContractSettlMonth):
    def __init__(self, this):
        _swig_setattr(self, LegContractSettlMonth, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegContractSettlMonth, 'thisown', 0)
        _swig_setattr(self, LegContractSettlMonth,self.__class__,LegContractSettlMonth)
_quickfix.LegContractSettlMonth_swigregister(LegContractSettlMonthPtr)

class LegInterestAccrualDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegInterestAccrualDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegInterestAccrualDate, name)
    def __repr__(self):
        return "<C FIX::LegInterestAccrualDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegInterestAccrualDate, 'this', _quickfix.new_LegInterestAccrualDate(*args))
        _swig_setattr(self, LegInterestAccrualDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegInterestAccrualDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegInterestAccrualDatePtr(LegInterestAccrualDate):
    def __init__(self, this):
        _swig_setattr(self, LegInterestAccrualDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegInterestAccrualDate, 'thisown', 0)
        _swig_setattr(self, LegInterestAccrualDate,self.__class__,LegInterestAccrualDate)
_quickfix.LegInterestAccrualDate_swigregister(LegInterestAccrualDatePtr)

class ExecTransType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecTransType, name)
    def __repr__(self):
        return "<C FIX::ExecTransType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecTransType, 'this', _quickfix.new_ExecTransType(*args))
        _swig_setattr(self, ExecTransType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecTransType):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecTransTypePtr(ExecTransType):
    def __init__(self, this):
        _swig_setattr(self, ExecTransType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecTransType, 'thisown', 0)
        _swig_setattr(self, ExecTransType,self.__class__,ExecTransType)
_quickfix.ExecTransType_swigregister(ExecTransTypePtr)

class IDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IDSource, name)
    def __repr__(self):
        return "<C FIX::IDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IDSource, 'this', _quickfix.new_IDSource(*args))
        _swig_setattr(self, IDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class IDSourcePtr(IDSource):
    def __init__(self, this):
        _swig_setattr(self, IDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IDSource, 'thisown', 0)
        _swig_setattr(self, IDSource,self.__class__,IDSource)
_quickfix.IDSource_swigregister(IDSourcePtr)

class IOIOthSvc(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIOthSvc, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIOthSvc, name)
    def __repr__(self):
        return "<C FIX::IOIOthSvc instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIOthSvc, 'this', _quickfix.new_IOIOthSvc(*args))
        _swig_setattr(self, IOIOthSvc, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIOthSvc):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOIOthSvcPtr(IOIOthSvc):
    def __init__(self, this):
        _swig_setattr(self, IOIOthSvc, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIOthSvc, 'thisown', 0)
        _swig_setattr(self, IOIOthSvc,self.__class__,IOIOthSvc)
_quickfix.IOIOthSvc_swigregister(IOIOthSvcPtr)

class IOIShares(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIShares, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, IOIShares, name)
    def __repr__(self):
        return "<C FIX::IOIShares instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, IOIShares, 'this', _quickfix.new_IOIShares(*args))
        _swig_setattr(self, IOIShares, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_IOIShares):
        try:
            if self.thisown: destroy(self)
        except: pass

class IOISharesPtr(IOIShares):
    def __init__(self, this):
        _swig_setattr(self, IOIShares, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, IOIShares, 'thisown', 0)
        _swig_setattr(self, IOIShares,self.__class__,IOIShares)
_quickfix.IOIShares_swigregister(IOISharesPtr)

class LastShares(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastShares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LastShares, name)
    def __repr__(self):
        return "<C FIX::LastShares instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LastShares, 'this', _quickfix.new_LastShares(*args))
        _swig_setattr(self, LastShares, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LastShares):
        try:
            if self.thisown: destroy(self)
        except: pass

class LastSharesPtr(LastShares):
    def __init__(self, this):
        _swig_setattr(self, LastShares, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LastShares, 'thisown', 0)
        _swig_setattr(self, LastShares,self.__class__,LastShares)
_quickfix.LastShares_swigregister(LastSharesPtr)

class RelatdSym(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelatdSym, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RelatdSym, name)
    def __repr__(self):
        return "<C FIX::RelatdSym instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RelatdSym, 'this', _quickfix.new_RelatdSym(*args))
        _swig_setattr(self, RelatdSym, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RelatdSym):
        try:
            if self.thisown: destroy(self)
        except: pass

class RelatdSymPtr(RelatdSym):
    def __init__(self, this):
        _swig_setattr(self, RelatdSym, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RelatdSym, 'thisown', 0)
        _swig_setattr(self, RelatdSym,self.__class__,RelatdSym)
_quickfix.RelatdSym_swigregister(RelatdSymPtr)

class Rule80A(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rule80A, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Rule80A, name)
    def __repr__(self):
        return "<C FIX::Rule80A instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Rule80A, 'this', _quickfix.new_Rule80A(*args))
        _swig_setattr(self, Rule80A, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Rule80A):
        try:
            if self.thisown: destroy(self)
        except: pass

class Rule80APtr(Rule80A):
    def __init__(self, this):
        _swig_setattr(self, Rule80A, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Rule80A, 'thisown', 0)
        _swig_setattr(self, Rule80A,self.__class__,Rule80A)
_quickfix.Rule80A_swigregister(Rule80APtr)

class Shares(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Shares, name)
    def __repr__(self):
        return "<C FIX::Shares instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Shares, 'this', _quickfix.new_Shares(*args))
        _swig_setattr(self, Shares, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Shares):
        try:
            if self.thisown: destroy(self)
        except: pass

class SharesPtr(Shares):
    def __init__(self, this):
        _swig_setattr(self, Shares, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Shares, 'thisown', 0)
        _swig_setattr(self, Shares,self.__class__,Shares)
_quickfix.Shares_swigregister(SharesPtr)

class SettlmntTyp(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlmntTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlmntTyp, name)
    def __repr__(self):
        return "<C FIX::SettlmntTyp instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlmntTyp, 'this', _quickfix.new_SettlmntTyp(*args))
        _swig_setattr(self, SettlmntTyp, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlmntTyp):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlmntTypPtr(SettlmntTyp):
    def __init__(self, this):
        _swig_setattr(self, SettlmntTyp, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlmntTyp, 'thisown', 0)
        _swig_setattr(self, SettlmntTyp,self.__class__,SettlmntTyp)
_quickfix.SettlmntTyp_swigregister(SettlmntTypPtr)

class FutSettDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FutSettDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FutSettDate, name)
    def __repr__(self):
        return "<C FIX::FutSettDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FutSettDate, 'this', _quickfix.new_FutSettDate(*args))
        _swig_setattr(self, FutSettDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FutSettDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class FutSettDatePtr(FutSettDate):
    def __init__(self, this):
        _swig_setattr(self, FutSettDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FutSettDate, 'thisown', 0)
        _swig_setattr(self, FutSettDate,self.__class__,FutSettDate)
_quickfix.FutSettDate_swigregister(FutSettDatePtr)

class AvgPrxPrecision(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPrxPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPrxPrecision, name)
    def __repr__(self):
        return "<C FIX::AvgPrxPrecision instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AvgPrxPrecision, 'this', _quickfix.new_AvgPrxPrecision(*args))
        _swig_setattr(self, AvgPrxPrecision, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AvgPrxPrecision):
        try:
            if self.thisown: destroy(self)
        except: pass

class AvgPrxPrecisionPtr(AvgPrxPrecision):
    def __init__(self, this):
        _swig_setattr(self, AvgPrxPrecision, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AvgPrxPrecision, 'thisown', 0)
        _swig_setattr(self, AvgPrxPrecision,self.__class__,AvgPrxPrecision)
_quickfix.AvgPrxPrecision_swigregister(AvgPrxPrecisionPtr)

class ExecBroker(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecBroker, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ExecBroker, name)
    def __repr__(self):
        return "<C FIX::ExecBroker instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ExecBroker, 'this', _quickfix.new_ExecBroker(*args))
        _swig_setattr(self, ExecBroker, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ExecBroker):
        try:
            if self.thisown: destroy(self)
        except: pass

class ExecBrokerPtr(ExecBroker):
    def __init__(self, this):
        _swig_setattr(self, ExecBroker, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ExecBroker, 'thisown', 0)
        _swig_setattr(self, ExecBroker,self.__class__,ExecBroker)
_quickfix.ExecBroker_swigregister(ExecBrokerPtr)

class OpenClose(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenClose, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OpenClose, name)
    def __repr__(self):
        return "<C FIX::OpenClose instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OpenClose, 'this', _quickfix.new_OpenClose(*args))
        _swig_setattr(self, OpenClose, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OpenClose):
        try:
            if self.thisown: destroy(self)
        except: pass

class OpenClosePtr(OpenClose):
    def __init__(self, this):
        _swig_setattr(self, OpenClose, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OpenClose, 'thisown', 0)
        _swig_setattr(self, OpenClose,self.__class__,OpenClose)
_quickfix.OpenClose_swigregister(OpenClosePtr)

class AllocShares(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocShares, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, AllocShares, name)
    def __repr__(self):
        return "<C FIX::AllocShares instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, AllocShares, 'this', _quickfix.new_AllocShares(*args))
        _swig_setattr(self, AllocShares, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_AllocShares):
        try:
            if self.thisown: destroy(self)
        except: pass

class AllocSharesPtr(AllocShares):
    def __init__(self, this):
        _swig_setattr(self, AllocShares, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, AllocShares, 'thisown', 0)
        _swig_setattr(self, AllocShares,self.__class__,AllocShares)
_quickfix.AllocShares_swigregister(AllocSharesPtr)

class DlvyInst(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DlvyInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DlvyInst, name)
    def __repr__(self):
        return "<C FIX::DlvyInst instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DlvyInst, 'this', _quickfix.new_DlvyInst(*args))
        _swig_setattr(self, DlvyInst, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DlvyInst):
        try:
            if self.thisown: destroy(self)
        except: pass

class DlvyInstPtr(DlvyInst):
    def __init__(self, this):
        _swig_setattr(self, DlvyInst, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DlvyInst, 'thisown', 0)
        _swig_setattr(self, DlvyInst,self.__class__,DlvyInst)
_quickfix.DlvyInst_swigregister(DlvyInstPtr)

class BrokerOfCredit(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrokerOfCredit, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, BrokerOfCredit, name)
    def __repr__(self):
        return "<C FIX::BrokerOfCredit instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, BrokerOfCredit, 'this', _quickfix.new_BrokerOfCredit(*args))
        _swig_setattr(self, BrokerOfCredit, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_BrokerOfCredit):
        try:
            if self.thisown: destroy(self)
        except: pass

class BrokerOfCreditPtr(BrokerOfCredit):
    def __init__(self, this):
        _swig_setattr(self, BrokerOfCredit, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, BrokerOfCredit, 'thisown', 0)
        _swig_setattr(self, BrokerOfCredit,self.__class__,BrokerOfCredit)
_quickfix.BrokerOfCredit_swigregister(BrokerOfCreditPtr)

class ClientID(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClientID, name)
    def __repr__(self):
        return "<C FIX::ClientID instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClientID, 'this', _quickfix.new_ClientID(*args))
        _swig_setattr(self, ClientID, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClientID):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClientIDPtr(ClientID):
    def __init__(self, this):
        _swig_setattr(self, ClientID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClientID, 'thisown', 0)
        _swig_setattr(self, ClientID,self.__class__,ClientID)
_quickfix.ClientID_swigregister(ClientIDPtr)

class CxlType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CxlType, name)
    def __repr__(self):
        return "<C FIX::CxlType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CxlType, 'this', _quickfix.new_CxlType(*args))
        _swig_setattr(self, CxlType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CxlType):
        try:
            if self.thisown: destroy(self)
        except: pass

class CxlTypePtr(CxlType):
    def __init__(self, this):
        _swig_setattr(self, CxlType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CxlType, 'thisown', 0)
        _swig_setattr(self, CxlType,self.__class__,CxlType)
_quickfix.CxlType_swigregister(CxlTypePtr)

class SettlLocation(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlLocation, name)
    def __repr__(self):
        return "<C FIX::SettlLocation instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlLocation, 'this', _quickfix.new_SettlLocation(*args))
        _swig_setattr(self, SettlLocation, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlLocation):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlLocationPtr(SettlLocation):
    def __init__(self, this):
        _swig_setattr(self, SettlLocation, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlLocation, 'thisown', 0)
        _swig_setattr(self, SettlLocation,self.__class__,SettlLocation)
_quickfix.SettlLocation_swigregister(SettlLocationPtr)

class SettlDepositoryCode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDepositoryCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDepositoryCode, name)
    def __repr__(self):
        return "<C FIX::SettlDepositoryCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlDepositoryCode, 'this', _quickfix.new_SettlDepositoryCode(*args))
        _swig_setattr(self, SettlDepositoryCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlDepositoryCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlDepositoryCodePtr(SettlDepositoryCode):
    def __init__(self, this):
        _swig_setattr(self, SettlDepositoryCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlDepositoryCode, 'thisown', 0)
        _swig_setattr(self, SettlDepositoryCode,self.__class__,SettlDepositoryCode)
_quickfix.SettlDepositoryCode_swigregister(SettlDepositoryCodePtr)

class SettlBrkrCode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlBrkrCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlBrkrCode, name)
    def __repr__(self):
        return "<C FIX::SettlBrkrCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlBrkrCode, 'this', _quickfix.new_SettlBrkrCode(*args))
        _swig_setattr(self, SettlBrkrCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlBrkrCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlBrkrCodePtr(SettlBrkrCode):
    def __init__(self, this):
        _swig_setattr(self, SettlBrkrCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlBrkrCode, 'thisown', 0)
        _swig_setattr(self, SettlBrkrCode,self.__class__,SettlBrkrCode)
_quickfix.SettlBrkrCode_swigregister(SettlBrkrCodePtr)

class SettlInstCode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstCode, name)
    def __repr__(self):
        return "<C FIX::SettlInstCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SettlInstCode, 'this', _quickfix.new_SettlInstCode(*args))
        _swig_setattr(self, SettlInstCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SettlInstCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class SettlInstCodePtr(SettlInstCode):
    def __init__(self, this):
        _swig_setattr(self, SettlInstCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SettlInstCode, 'thisown', 0)
        _swig_setattr(self, SettlInstCode,self.__class__,SettlInstCode)
_quickfix.SettlInstCode_swigregister(SettlInstCodePtr)

class SecuritySettlAgentName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentName, name)
    def __repr__(self):
        return "<C FIX::SecuritySettlAgentName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySettlAgentName, 'this', _quickfix.new_SecuritySettlAgentName(*args))
        _swig_setattr(self, SecuritySettlAgentName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySettlAgentName):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySettlAgentNamePtr(SecuritySettlAgentName):
    def __init__(self, this):
        _swig_setattr(self, SecuritySettlAgentName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySettlAgentName, 'thisown', 0)
        _swig_setattr(self, SecuritySettlAgentName,self.__class__,SecuritySettlAgentName)
_quickfix.SecuritySettlAgentName_swigregister(SecuritySettlAgentNamePtr)

class SecuritySettlAgentCode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentCode, name)
    def __repr__(self):
        return "<C FIX::SecuritySettlAgentCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySettlAgentCode, 'this', _quickfix.new_SecuritySettlAgentCode(*args))
        _swig_setattr(self, SecuritySettlAgentCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySettlAgentCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySettlAgentCodePtr(SecuritySettlAgentCode):
    def __init__(self, this):
        _swig_setattr(self, SecuritySettlAgentCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySettlAgentCode, 'thisown', 0)
        _swig_setattr(self, SecuritySettlAgentCode,self.__class__,SecuritySettlAgentCode)
_quickfix.SecuritySettlAgentCode_swigregister(SecuritySettlAgentCodePtr)

class SecuritySettlAgentAcctNum(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentAcctNum, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentAcctNum, name)
    def __repr__(self):
        return "<C FIX::SecuritySettlAgentAcctNum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySettlAgentAcctNum, 'this', _quickfix.new_SecuritySettlAgentAcctNum(*args))
        _swig_setattr(self, SecuritySettlAgentAcctNum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySettlAgentAcctNum):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySettlAgentAcctNumPtr(SecuritySettlAgentAcctNum):
    def __init__(self, this):
        _swig_setattr(self, SecuritySettlAgentAcctNum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySettlAgentAcctNum, 'thisown', 0)
        _swig_setattr(self, SecuritySettlAgentAcctNum,self.__class__,SecuritySettlAgentAcctNum)
_quickfix.SecuritySettlAgentAcctNum_swigregister(SecuritySettlAgentAcctNumPtr)

class SecuritySettlAgentAcctName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentAcctName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentAcctName, name)
    def __repr__(self):
        return "<C FIX::SecuritySettlAgentAcctName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySettlAgentAcctName, 'this', _quickfix.new_SecuritySettlAgentAcctName(*args))
        _swig_setattr(self, SecuritySettlAgentAcctName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySettlAgentAcctName):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySettlAgentAcctNamePtr(SecuritySettlAgentAcctName):
    def __init__(self, this):
        _swig_setattr(self, SecuritySettlAgentAcctName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySettlAgentAcctName, 'thisown', 0)
        _swig_setattr(self, SecuritySettlAgentAcctName,self.__class__,SecuritySettlAgentAcctName)
_quickfix.SecuritySettlAgentAcctName_swigregister(SecuritySettlAgentAcctNamePtr)

class SecuritySettlAgentContactName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentContactName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentContactName, name)
    def __repr__(self):
        return "<C FIX::SecuritySettlAgentContactName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySettlAgentContactName, 'this', _quickfix.new_SecuritySettlAgentContactName(*args))
        _swig_setattr(self, SecuritySettlAgentContactName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySettlAgentContactName):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySettlAgentContactNamePtr(SecuritySettlAgentContactName):
    def __init__(self, this):
        _swig_setattr(self, SecuritySettlAgentContactName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySettlAgentContactName, 'thisown', 0)
        _swig_setattr(self, SecuritySettlAgentContactName,self.__class__,SecuritySettlAgentContactName)
_quickfix.SecuritySettlAgentContactName_swigregister(SecuritySettlAgentContactNamePtr)

class SecuritySettlAgentContactPhone(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentContactPhone, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentContactPhone, name)
    def __repr__(self):
        return "<C FIX::SecuritySettlAgentContactPhone instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SecuritySettlAgentContactPhone, 'this', _quickfix.new_SecuritySettlAgentContactPhone(*args))
        _swig_setattr(self, SecuritySettlAgentContactPhone, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SecuritySettlAgentContactPhone):
        try:
            if self.thisown: destroy(self)
        except: pass

class SecuritySettlAgentContactPhonePtr(SecuritySettlAgentContactPhone):
    def __init__(self, this):
        _swig_setattr(self, SecuritySettlAgentContactPhone, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SecuritySettlAgentContactPhone, 'thisown', 0)
        _swig_setattr(self, SecuritySettlAgentContactPhone,self.__class__,SecuritySettlAgentContactPhone)
_quickfix.SecuritySettlAgentContactPhone_swigregister(SecuritySettlAgentContactPhonePtr)

class CashSettlAgentName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentName, name)
    def __repr__(self):
        return "<C FIX::CashSettlAgentName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashSettlAgentName, 'this', _quickfix.new_CashSettlAgentName(*args))
        _swig_setattr(self, CashSettlAgentName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashSettlAgentName):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashSettlAgentNamePtr(CashSettlAgentName):
    def __init__(self, this):
        _swig_setattr(self, CashSettlAgentName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashSettlAgentName, 'thisown', 0)
        _swig_setattr(self, CashSettlAgentName,self.__class__,CashSettlAgentName)
_quickfix.CashSettlAgentName_swigregister(CashSettlAgentNamePtr)

class CashSettlAgentCode(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentCode, name)
    def __repr__(self):
        return "<C FIX::CashSettlAgentCode instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashSettlAgentCode, 'this', _quickfix.new_CashSettlAgentCode(*args))
        _swig_setattr(self, CashSettlAgentCode, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashSettlAgentCode):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashSettlAgentCodePtr(CashSettlAgentCode):
    def __init__(self, this):
        _swig_setattr(self, CashSettlAgentCode, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashSettlAgentCode, 'thisown', 0)
        _swig_setattr(self, CashSettlAgentCode,self.__class__,CashSettlAgentCode)
_quickfix.CashSettlAgentCode_swigregister(CashSettlAgentCodePtr)

class CashSettlAgentAcctNum(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentAcctNum, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentAcctNum, name)
    def __repr__(self):
        return "<C FIX::CashSettlAgentAcctNum instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashSettlAgentAcctNum, 'this', _quickfix.new_CashSettlAgentAcctNum(*args))
        _swig_setattr(self, CashSettlAgentAcctNum, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashSettlAgentAcctNum):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashSettlAgentAcctNumPtr(CashSettlAgentAcctNum):
    def __init__(self, this):
        _swig_setattr(self, CashSettlAgentAcctNum, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashSettlAgentAcctNum, 'thisown', 0)
        _swig_setattr(self, CashSettlAgentAcctNum,self.__class__,CashSettlAgentAcctNum)
_quickfix.CashSettlAgentAcctNum_swigregister(CashSettlAgentAcctNumPtr)

class CashSettlAgentAcctName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentAcctName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentAcctName, name)
    def __repr__(self):
        return "<C FIX::CashSettlAgentAcctName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashSettlAgentAcctName, 'this', _quickfix.new_CashSettlAgentAcctName(*args))
        _swig_setattr(self, CashSettlAgentAcctName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashSettlAgentAcctName):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashSettlAgentAcctNamePtr(CashSettlAgentAcctName):
    def __init__(self, this):
        _swig_setattr(self, CashSettlAgentAcctName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashSettlAgentAcctName, 'thisown', 0)
        _swig_setattr(self, CashSettlAgentAcctName,self.__class__,CashSettlAgentAcctName)
_quickfix.CashSettlAgentAcctName_swigregister(CashSettlAgentAcctNamePtr)

class CashSettlAgentContactName(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentContactName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentContactName, name)
    def __repr__(self):
        return "<C FIX::CashSettlAgentContactName instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashSettlAgentContactName, 'this', _quickfix.new_CashSettlAgentContactName(*args))
        _swig_setattr(self, CashSettlAgentContactName, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashSettlAgentContactName):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashSettlAgentContactNamePtr(CashSettlAgentContactName):
    def __init__(self, this):
        _swig_setattr(self, CashSettlAgentContactName, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashSettlAgentContactName, 'thisown', 0)
        _swig_setattr(self, CashSettlAgentContactName,self.__class__,CashSettlAgentContactName)
_quickfix.CashSettlAgentContactName_swigregister(CashSettlAgentContactNamePtr)

class CashSettlAgentContactPhone(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentContactPhone, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentContactPhone, name)
    def __repr__(self):
        return "<C FIX::CashSettlAgentContactPhone instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CashSettlAgentContactPhone, 'this', _quickfix.new_CashSettlAgentContactPhone(*args))
        _swig_setattr(self, CashSettlAgentContactPhone, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CashSettlAgentContactPhone):
        try:
            if self.thisown: destroy(self)
        except: pass

class CashSettlAgentContactPhonePtr(CashSettlAgentContactPhone):
    def __init__(self, this):
        _swig_setattr(self, CashSettlAgentContactPhone, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CashSettlAgentContactPhone, 'thisown', 0)
        _swig_setattr(self, CashSettlAgentContactPhone,self.__class__,CashSettlAgentContactPhone)
_quickfix.CashSettlAgentContactPhone_swigregister(CashSettlAgentContactPhonePtr)

class FutSettDate2(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FutSettDate2, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FutSettDate2, name)
    def __repr__(self):
        return "<C FIX::FutSettDate2 instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FutSettDate2, 'this', _quickfix.new_FutSettDate2(*args))
        _swig_setattr(self, FutSettDate2, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FutSettDate2):
        try:
            if self.thisown: destroy(self)
        except: pass

class FutSettDate2Ptr(FutSettDate2):
    def __init__(self, this):
        _swig_setattr(self, FutSettDate2, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FutSettDate2, 'thisown', 0)
        _swig_setattr(self, FutSettDate2,self.__class__,FutSettDate2)
_quickfix.FutSettDate2_swigregister(FutSettDate2Ptr)

class PutOrCall(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PutOrCall, name)
    def __repr__(self):
        return "<C FIX::PutOrCall instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PutOrCall, 'this', _quickfix.new_PutOrCall(*args))
        _swig_setattr(self, PutOrCall, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PutOrCall):
        try:
            if self.thisown: destroy(self)
        except: pass

class PutOrCallPtr(PutOrCall):
    def __init__(self, this):
        _swig_setattr(self, PutOrCall, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PutOrCall, 'thisown', 0)
        _swig_setattr(self, PutOrCall,self.__class__,PutOrCall)
_quickfix.PutOrCall_swigregister(PutOrCallPtr)

class CustomerOrFirm(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomerOrFirm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CustomerOrFirm, name)
    def __repr__(self):
        return "<C FIX::CustomerOrFirm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CustomerOrFirm, 'this', _quickfix.new_CustomerOrFirm(*args))
        _swig_setattr(self, CustomerOrFirm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CustomerOrFirm):
        try:
            if self.thisown: destroy(self)
        except: pass

class CustomerOrFirmPtr(CustomerOrFirm):
    def __init__(self, this):
        _swig_setattr(self, CustomerOrFirm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CustomerOrFirm, 'thisown', 0)
        _swig_setattr(self, CustomerOrFirm,self.__class__,CustomerOrFirm)
_quickfix.CustomerOrFirm_swigregister(CustomerOrFirmPtr)

class MaturityDay(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityDay, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityDay, name)
    def __repr__(self):
        return "<C FIX::MaturityDay instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MaturityDay, 'this', _quickfix.new_MaturityDay(*args))
        _swig_setattr(self, MaturityDay, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MaturityDay):
        try:
            if self.thisown: destroy(self)
        except: pass

class MaturityDayPtr(MaturityDay):
    def __init__(self, this):
        _swig_setattr(self, MaturityDay, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MaturityDay, 'thisown', 0)
        _swig_setattr(self, MaturityDay,self.__class__,MaturityDay)
_quickfix.MaturityDay_swigregister(MaturityDayPtr)

class PegDifference(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegDifference, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, PegDifference, name)
    def __repr__(self):
        return "<C FIX::PegDifference instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, PegDifference, 'this', _quickfix.new_PegDifference(*args))
        _swig_setattr(self, PegDifference, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_PegDifference):
        try:
            if self.thisown: destroy(self)
        except: pass

class PegDifferencePtr(PegDifference):
    def __init__(self, this):
        _swig_setattr(self, PegDifference, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PegDifference, 'thisown', 0)
        _swig_setattr(self, PegDifference,self.__class__,PegDifference)
_quickfix.PegDifference_swigregister(PegDifferencePtr)

class SpreadToBenchmark(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadToBenchmark, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadToBenchmark, name)
    def __repr__(self):
        return "<C FIX::SpreadToBenchmark instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SpreadToBenchmark, 'this', _quickfix.new_SpreadToBenchmark(*args))
        _swig_setattr(self, SpreadToBenchmark, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SpreadToBenchmark):
        try:
            if self.thisown: destroy(self)
        except: pass

class SpreadToBenchmarkPtr(SpreadToBenchmark):
    def __init__(self, this):
        _swig_setattr(self, SpreadToBenchmark, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SpreadToBenchmark, 'thisown', 0)
        _swig_setattr(self, SpreadToBenchmark,self.__class__,SpreadToBenchmark)
_quickfix.SpreadToBenchmark_swigregister(SpreadToBenchmarkPtr)

class Benchmark(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, Benchmark, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, Benchmark, name)
    def __repr__(self):
        return "<C FIX::Benchmark instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Benchmark, 'this', _quickfix.new_Benchmark(*args))
        _swig_setattr(self, Benchmark, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Benchmark):
        try:
            if self.thisown: destroy(self)
        except: pass

class BenchmarkPtr(Benchmark):
    def __init__(self, this):
        _swig_setattr(self, Benchmark, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Benchmark, 'thisown', 0)
        _swig_setattr(self, Benchmark,self.__class__,Benchmark)
_quickfix.Benchmark_swigregister(BenchmarkPtr)

class OpenCloseSettleFlag(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCloseSettleFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCloseSettleFlag, name)
    def __repr__(self):
        return "<C FIX::OpenCloseSettleFlag instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OpenCloseSettleFlag, 'this', _quickfix.new_OpenCloseSettleFlag(*args))
        _swig_setattr(self, OpenCloseSettleFlag, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OpenCloseSettleFlag):
        try:
            if self.thisown: destroy(self)
        except: pass

class OpenCloseSettleFlagPtr(OpenCloseSettleFlag):
    def __init__(self, this):
        _swig_setattr(self, OpenCloseSettleFlag, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OpenCloseSettleFlag, 'thisown', 0)
        _swig_setattr(self, OpenCloseSettleFlag,self.__class__,OpenCloseSettleFlag)
_quickfix.OpenCloseSettleFlag_swigregister(OpenCloseSettleFlagPtr)

class UnderlyingIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIDSource, name)
    def __repr__(self):
        return "<C FIX::UnderlyingIDSource instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingIDSource, 'this', _quickfix.new_UnderlyingIDSource(*args))
        _swig_setattr(self, UnderlyingIDSource, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingIDSource):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingIDSourcePtr(UnderlyingIDSource):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingIDSource, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingIDSource, 'thisown', 0)
        _swig_setattr(self, UnderlyingIDSource,self.__class__,UnderlyingIDSource)
_quickfix.UnderlyingIDSource_swigregister(UnderlyingIDSourcePtr)

class QuoteAckStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteAckStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteAckStatus, name)
    def __repr__(self):
        return "<C FIX::QuoteAckStatus instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, QuoteAckStatus, 'this', _quickfix.new_QuoteAckStatus(*args))
        _swig_setattr(self, QuoteAckStatus, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_QuoteAckStatus):
        try:
            if self.thisown: destroy(self)
        except: pass

class QuoteAckStatusPtr(QuoteAckStatus):
    def __init__(self, this):
        _swig_setattr(self, QuoteAckStatus, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, QuoteAckStatus, 'thisown', 0)
        _swig_setattr(self, QuoteAckStatus,self.__class__,QuoteAckStatus)
_quickfix.QuoteAckStatus_swigregister(QuoteAckStatusPtr)

class TotQuoteEntries(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotQuoteEntries, name)
    def __repr__(self):
        return "<C FIX::TotQuoteEntries instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotQuoteEntries, 'this', _quickfix.new_TotQuoteEntries(*args))
        _swig_setattr(self, TotQuoteEntries, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotQuoteEntries):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotQuoteEntriesPtr(TotQuoteEntries):
    def __init__(self, this):
        _swig_setattr(self, TotQuoteEntries, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotQuoteEntries, 'thisown', 0)
        _swig_setattr(self, TotQuoteEntries,self.__class__,TotQuoteEntries)
_quickfix.TotQuoteEntries_swigregister(TotQuoteEntriesPtr)

class UnderlyingMaturityDay(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityDay, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityDay, name)
    def __repr__(self):
        return "<C FIX::UnderlyingMaturityDay instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingMaturityDay, 'this', _quickfix.new_UnderlyingMaturityDay(*args))
        _swig_setattr(self, UnderlyingMaturityDay, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingMaturityDay):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingMaturityDayPtr(UnderlyingMaturityDay):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingMaturityDay, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingMaturityDay, 'thisown', 0)
        _swig_setattr(self, UnderlyingMaturityDay,self.__class__,UnderlyingMaturityDay)
_quickfix.UnderlyingMaturityDay_swigregister(UnderlyingMaturityDayPtr)

class UnderlyingPutOrCall(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPutOrCall, name)
    def __repr__(self):
        return "<C FIX::UnderlyingPutOrCall instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, UnderlyingPutOrCall, 'this', _quickfix.new_UnderlyingPutOrCall(*args))
        _swig_setattr(self, UnderlyingPutOrCall, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_UnderlyingPutOrCall):
        try:
            if self.thisown: destroy(self)
        except: pass

class UnderlyingPutOrCallPtr(UnderlyingPutOrCall):
    def __init__(self, this):
        _swig_setattr(self, UnderlyingPutOrCall, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, UnderlyingPutOrCall, 'thisown', 0)
        _swig_setattr(self, UnderlyingPutOrCall,self.__class__,UnderlyingPutOrCall)
_quickfix.UnderlyingPutOrCall_swigregister(UnderlyingPutOrCallPtr)

class RatioQty(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RatioQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RatioQty, name)
    def __repr__(self):
        return "<C FIX::RatioQty instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RatioQty, 'this', _quickfix.new_RatioQty(*args))
        _swig_setattr(self, RatioQty, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RatioQty):
        try:
            if self.thisown: destroy(self)
        except: pass

class RatioQtyPtr(RatioQty):
    def __init__(self, this):
        _swig_setattr(self, RatioQty, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RatioQty, 'thisown', 0)
        _swig_setattr(self, RatioQty,self.__class__,RatioQty)
_quickfix.RatioQty_swigregister(RatioQtyPtr)

class OnBehalfOfSendingTime(UtcTimeStampField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfSendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfSendingTime, name)
    def __repr__(self):
        return "<C FIX::OnBehalfOfSendingTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, OnBehalfOfSendingTime, 'this', _quickfix.new_OnBehalfOfSendingTime(*args))
        _swig_setattr(self, OnBehalfOfSendingTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_OnBehalfOfSendingTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class OnBehalfOfSendingTimePtr(OnBehalfOfSendingTime):
    def __init__(self, this):
        _swig_setattr(self, OnBehalfOfSendingTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, OnBehalfOfSendingTime, 'thisown', 0)
        _swig_setattr(self, OnBehalfOfSendingTime,self.__class__,OnBehalfOfSendingTime)
_quickfix.OnBehalfOfSendingTime_swigregister(OnBehalfOfSendingTimePtr)

class DiscretionOffset(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffset, name)
    def __repr__(self):
        return "<C FIX::DiscretionOffset instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, DiscretionOffset, 'this', _quickfix.new_DiscretionOffset(*args))
        _swig_setattr(self, DiscretionOffset, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_DiscretionOffset):
        try:
            if self.thisown: destroy(self)
        except: pass

class DiscretionOffsetPtr(DiscretionOffset):
    def __init__(self, this):
        _swig_setattr(self, DiscretionOffset, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, DiscretionOffset, 'thisown', 0)
        _swig_setattr(self, DiscretionOffset,self.__class__,DiscretionOffset)
_quickfix.DiscretionOffset_swigregister(DiscretionOffsetPtr)

class TotalNumSecurities(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumSecurities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumSecurities, name)
    def __repr__(self):
        return "<C FIX::TotalNumSecurities instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalNumSecurities, 'this', _quickfix.new_TotalNumSecurities(*args))
        _swig_setattr(self, TotalNumSecurities, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalNumSecurities):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalNumSecuritiesPtr(TotalNumSecurities):
    def __init__(self, this):
        _swig_setattr(self, TotalNumSecurities, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalNumSecurities, 'thisown', 0)
        _swig_setattr(self, TotalNumSecurities,self.__class__,TotalNumSecurities)
_quickfix.TotalNumSecurities_swigregister(TotalNumSecuritiesPtr)

class TradeType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TradeType, name)
    def __repr__(self):
        return "<C FIX::TradeType instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TradeType, 'this', _quickfix.new_TradeType(*args))
        _swig_setattr(self, TradeType, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TradeType):
        try:
            if self.thisown: destroy(self)
        except: pass

class TradeTypePtr(TradeType):
    def __init__(self, this):
        _swig_setattr(self, TradeType, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TradeType, 'thisown', 0)
        _swig_setattr(self, TradeType,self.__class__,TradeType)
_quickfix.TradeType_swigregister(TradeTypePtr)

class ClearingFirm(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingFirm, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingFirm, name)
    def __repr__(self):
        return "<C FIX::ClearingFirm instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClearingFirm, 'this', _quickfix.new_ClearingFirm(*args))
        _swig_setattr(self, ClearingFirm, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClearingFirm):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClearingFirmPtr(ClearingFirm):
    def __init__(self, this):
        _swig_setattr(self, ClearingFirm, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClearingFirm, 'thisown', 0)
        _swig_setattr(self, ClearingFirm,self.__class__,ClearingFirm)
_quickfix.ClearingFirm_swigregister(ClearingFirmPtr)

class ClearingAccount(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingAccount, name)
    def __repr__(self):
        return "<C FIX::ClearingAccount instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ClearingAccount, 'this', _quickfix.new_ClearingAccount(*args))
        _swig_setattr(self, ClearingAccount, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_ClearingAccount):
        try:
            if self.thisown: destroy(self)
        except: pass

class ClearingAccountPtr(ClearingAccount):
    def __init__(self, this):
        _swig_setattr(self, ClearingAccount, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ClearingAccount, 'thisown', 0)
        _swig_setattr(self, ClearingAccount,self.__class__,ClearingAccount)
_quickfix.ClearingAccount_swigregister(ClearingAccountPtr)

class TotalVolumeTradedDate(UtcDateField):
    __swig_setmethods__ = {}
    for _s in [UtcDateField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalVolumeTradedDate, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcDateField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalVolumeTradedDate, name)
    def __repr__(self):
        return "<C FIX::TotalVolumeTradedDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalVolumeTradedDate, 'this', _quickfix.new_TotalVolumeTradedDate(*args))
        _swig_setattr(self, TotalVolumeTradedDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalVolumeTradedDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalVolumeTradedDatePtr(TotalVolumeTradedDate):
    def __init__(self, this):
        _swig_setattr(self, TotalVolumeTradedDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalVolumeTradedDate, 'thisown', 0)
        _swig_setattr(self, TotalVolumeTradedDate,self.__class__,TotalVolumeTradedDate)
_quickfix.TotalVolumeTradedDate_swigregister(TotalVolumeTradedDatePtr)

class TotalVolumeTradedTime(UtcTimeOnlyField):
    __swig_setmethods__ = {}
    for _s in [UtcTimeOnlyField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalVolumeTradedTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeOnlyField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalVolumeTradedTime, name)
    def __repr__(self):
        return "<C FIX::TotalVolumeTradedTime instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalVolumeTradedTime, 'this', _quickfix.new_TotalVolumeTradedTime(*args))
        _swig_setattr(self, TotalVolumeTradedTime, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalVolumeTradedTime):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalVolumeTradedTimePtr(TotalVolumeTradedTime):
    def __init__(self, this):
        _swig_setattr(self, TotalVolumeTradedTime, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalVolumeTradedTime, 'thisown', 0)
        _swig_setattr(self, TotalVolumeTradedTime,self.__class__,TotalVolumeTradedTime)
_quickfix.TotalVolumeTradedTime_swigregister(TotalVolumeTradedTimePtr)

class CardIssNo(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardIssNo, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, CardIssNo, name)
    def __repr__(self):
        return "<C FIX::CardIssNo instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, CardIssNo, 'this', _quickfix.new_CardIssNo(*args))
        _swig_setattr(self, CardIssNo, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_CardIssNo):
        try:
            if self.thisown: destroy(self)
        except: pass

class CardIssNoPtr(CardIssNo):
    def __init__(self, this):
        _swig_setattr(self, CardIssNo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, CardIssNo, 'thisown', 0)
        _swig_setattr(self, CardIssNo,self.__class__,CardIssNo)
_quickfix.CardIssNo_swigregister(CardIssNoPtr)

class RegistDetls(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistDetls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, RegistDetls, name)
    def __repr__(self):
        return "<C FIX::RegistDetls instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, RegistDetls, 'this', _quickfix.new_RegistDetls(*args))
        _swig_setattr(self, RegistDetls, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_RegistDetls):
        try:
            if self.thisown: destroy(self)
        except: pass

class RegistDetlsPtr(RegistDetls):
    def __init__(self, this):
        _swig_setattr(self, RegistDetls, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, RegistDetls, 'thisown', 0)
        _swig_setattr(self, RegistDetls,self.__class__,RegistDetls)
_quickfix.RegistDetls_swigregister(RegistDetlsPtr)

class TotalNumSecurityTypes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumSecurityTypes, name)
    def __repr__(self):
        return "<C FIX::TotalNumSecurityTypes instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, TotalNumSecurityTypes, 'this', _quickfix.new_TotalNumSecurityTypes(*args))
        _swig_setattr(self, TotalNumSecurityTypes, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_TotalNumSecurityTypes):
        try:
            if self.thisown: destroy(self)
        except: pass

class TotalNumSecurityTypesPtr(TotalNumSecurityTypes):
    def __init__(self, this):
        _swig_setattr(self, TotalNumSecurityTypes, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TotalNumSecurityTypes, 'thisown', 0)
        _swig_setattr(self, TotalNumSecurityTypes,self.__class__,TotalNumSecurityTypes)
_quickfix.TotalNumSecurityTypes_swigregister(TotalNumSecurityTypesPtr)

class LegSettlmntTyp(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlmntTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlmntTyp, name)
    def __repr__(self):
        return "<C FIX::LegSettlmntTyp instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegSettlmntTyp, 'this', _quickfix.new_LegSettlmntTyp(*args))
        _swig_setattr(self, LegSettlmntTyp, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegSettlmntTyp):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegSettlmntTypPtr(LegSettlmntTyp):
    def __init__(self, this):
        _swig_setattr(self, LegSettlmntTyp, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegSettlmntTyp, 'thisown', 0)
        _swig_setattr(self, LegSettlmntTyp,self.__class__,LegSettlmntTyp)
_quickfix.LegSettlmntTyp_swigregister(LegSettlmntTypPtr)

class LegFutSettDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegFutSettDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, LegFutSettDate, name)
    def __repr__(self):
        return "<C FIX::LegFutSettDate instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, LegFutSettDate, 'this', _quickfix.new_LegFutSettDate(*args))
        _swig_setattr(self, LegFutSettDate, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_LegFutSettDate):
        try:
            if self.thisown: destroy(self)
        except: pass

class LegFutSettDatePtr(LegFutSettDate):
    def __init__(self, this):
        _swig_setattr(self, LegFutSettDate, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LegFutSettDate, 'thisown', 0)
        _swig_setattr(self, LegFutSettDate,self.__class__,LegFutSettDate)
_quickfix.LegFutSettDate_swigregister(LegFutSettDatePtr)

class SessionID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionID, name)
    def __repr__(self):
        return "<C FIX::SessionID instance at %s>" % (self.this,)
    def __str__(*args): return _quickfix.SessionID___str__(*args)
    def __init__(self, *args):
        _swig_setattr(self, SessionID, 'this', _quickfix.new_SessionID(*args))
        _swig_setattr(self, SessionID, 'thisown', 1)
    def getBeginString(*args): return _quickfix.SessionID_getBeginString(*args)
    def getSenderCompID(*args): return _quickfix.SessionID_getSenderCompID(*args)
    def getTargetCompID(*args): return _quickfix.SessionID_getTargetCompID(*args)
    def fromString(*args): return _quickfix.SessionID_fromString(*args)
    def toString(*args): return _quickfix.SessionID_toString(*args)
    def __invert__(*args): return _quickfix.SessionID___invert__(*args)
    def __del__(self, destroy=_quickfix.delete_SessionID):
        try:
            if self.thisown: destroy(self)
        except: pass

class SessionIDPtr(SessionID):
    def __init__(self, this):
        _swig_setattr(self, SessionID, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SessionID, 'thisown', 0)
        _swig_setattr(self, SessionID,self.__class__,SessionID)
_quickfix.SessionID_swigregister(SessionIDPtr)
BeginString_FIX44 = cvar.BeginString_FIX44
BeginString_FIX43 = cvar.BeginString_FIX43
BeginString_FIX42 = cvar.BeginString_FIX42
BeginString_FIX41 = cvar.BeginString_FIX41
BeginString_FIX40 = cvar.BeginString_FIX40
MsgType_Heartbeat = cvar.MsgType_Heartbeat
MsgType_Logon = cvar.MsgType_Logon
MsgType_TestRequest = cvar.MsgType_TestRequest
MsgType_ResendRequest = cvar.MsgType_ResendRequest
MsgType_Reject = cvar.MsgType_Reject
MsgType_SequenceReset = cvar.MsgType_SequenceReset
MsgType_Logout = cvar.MsgType_Logout
MsgType_BusinessMessageReject = cvar.MsgType_BusinessMessageReject
MsgType_Advertisement = cvar.MsgType_Advertisement
MsgType_IndicationOfInterest = cvar.MsgType_IndicationOfInterest
MsgType_News = cvar.MsgType_News
MsgType_Email = cvar.MsgType_Email
MsgType_QuoteRequest = cvar.MsgType_QuoteRequest
MsgType_QuoteResponse = cvar.MsgType_QuoteResponse
MsgType_QuoteRequestReject = cvar.MsgType_QuoteRequestReject
MsgType_RFQRequest = cvar.MsgType_RFQRequest
MsgType_Quote = cvar.MsgType_Quote
MsgType_QuoteCancel = cvar.MsgType_QuoteCancel
MsgType_QuoteStatusRequest = cvar.MsgType_QuoteStatusRequest
MsgType_QuoteStatusReport = cvar.MsgType_QuoteStatusReport
MsgType_MassQuote = cvar.MsgType_MassQuote
MsgType_MassQuoteAcknowledgement = cvar.MsgType_MassQuoteAcknowledgement
MsgType_MarketDataRequest = cvar.MsgType_MarketDataRequest
MsgType_MarketDataSnapshotFullRefresh = cvar.MsgType_MarketDataSnapshotFullRefresh
MsgType_MarketDataIncrementalRefresh = cvar.MsgType_MarketDataIncrementalRefresh
MsgType_MarketDataRequestReject = cvar.MsgType_MarketDataRequestReject
MsgType_SecurityDefinitionRequest = cvar.MsgType_SecurityDefinitionRequest
MsgType_SecurityDefinition = cvar.MsgType_SecurityDefinition
MsgType_SecurityTypeRequest = cvar.MsgType_SecurityTypeRequest
MsgType_SecurityTypes = cvar.MsgType_SecurityTypes
MsgType_SecurityListRequest = cvar.MsgType_SecurityListRequest
MsgType_SecurityList = cvar.MsgType_SecurityList
MsgType_DerivativeSecurityListRequest = cvar.MsgType_DerivativeSecurityListRequest
MsgType_DerivativeSecurityList = cvar.MsgType_DerivativeSecurityList
MsgType_SecurityStatusRequest = cvar.MsgType_SecurityStatusRequest
MsgType_SecurityStatus = cvar.MsgType_SecurityStatus
MsgType_TradingSessionStatusRequest = cvar.MsgType_TradingSessionStatusRequest
MsgType_TradingSessionStatus = cvar.MsgType_TradingSessionStatus
MsgType_NewOrderSingle = cvar.MsgType_NewOrderSingle
MsgType_ExecutionReport = cvar.MsgType_ExecutionReport
MsgType_DontKnowTrade = cvar.MsgType_DontKnowTrade
MsgType_OrderCancelReplaceRequest = cvar.MsgType_OrderCancelReplaceRequest
MsgType_OrderCancelRequest = cvar.MsgType_OrderCancelRequest
MsgType_OrderCancelReject = cvar.MsgType_OrderCancelReject
MsgType_OrderStatusRequest = cvar.MsgType_OrderStatusRequest
MsgType_OrderMassCancelRequest = cvar.MsgType_OrderMassCancelRequest
MsgType_OrderMassCancelReport = cvar.MsgType_OrderMassCancelReport
MsgType_OrderMassStatusRequest = cvar.MsgType_OrderMassStatusRequest
MsgType_NewOrderCross = cvar.MsgType_NewOrderCross
MsgType_CrossOrderCancelReplaceRequest = cvar.MsgType_CrossOrderCancelReplaceRequest
MsgType_CrossOrderCancelRequest = cvar.MsgType_CrossOrderCancelRequest
MsgType_NewOrderMultileg = cvar.MsgType_NewOrderMultileg
MsgType_MultilegOrderCancelReplaceRequest = cvar.MsgType_MultilegOrderCancelReplaceRequest
MsgType_BidRequest = cvar.MsgType_BidRequest
MsgType_BidResponse = cvar.MsgType_BidResponse
MsgType_NewOrderList = cvar.MsgType_NewOrderList
MsgType_ListStrikePrice = cvar.MsgType_ListStrikePrice
MsgType_ListStatus = cvar.MsgType_ListStatus
MsgType_ListExecute = cvar.MsgType_ListExecute
MsgType_ListCancelRequest = cvar.MsgType_ListCancelRequest
MsgType_ListStatusRequest = cvar.MsgType_ListStatusRequest
MsgType_AllocationInstruction = cvar.MsgType_AllocationInstruction
MsgType_AllocationInstructionAck = cvar.MsgType_AllocationInstructionAck
MsgType_AllocationReport = cvar.MsgType_AllocationReport
MsgType_AllocationReportAck = cvar.MsgType_AllocationReportAck
MsgType_Confirmation = cvar.MsgType_Confirmation
MsgType_ConfirmationAck = cvar.MsgType_ConfirmationAck
MsgType_ConfirmationRequest = cvar.MsgType_ConfirmationRequest
MsgType_SettlementInstructions = cvar.MsgType_SettlementInstructions
MsgType_SettlementInstructionRequest = cvar.MsgType_SettlementInstructionRequest
MsgType_TradeCaptureReportRequest = cvar.MsgType_TradeCaptureReportRequest
MsgType_TradeCaptureReportRequestAck = cvar.MsgType_TradeCaptureReportRequestAck
MsgType_TradeCaptureReport = cvar.MsgType_TradeCaptureReport
MsgType_TradeCaptureReportAck = cvar.MsgType_TradeCaptureReportAck
MsgType_RegistrationInstructions = cvar.MsgType_RegistrationInstructions
MsgType_RegistrationInstructionsResponse = cvar.MsgType_RegistrationInstructionsResponse
MsgType_PositionMaintenanceRequest = cvar.MsgType_PositionMaintenanceRequest
MsgType_PositionMaintenanceReport = cvar.MsgType_PositionMaintenanceReport
MsgType_RequestForPositions = cvar.MsgType_RequestForPositions
MsgType_RequestForPositionsAck = cvar.MsgType_RequestForPositionsAck
MsgType_PositionReport = cvar.MsgType_PositionReport
MsgType_AssignmentReport = cvar.MsgType_AssignmentReport
MsgType_CollateralRequest = cvar.MsgType_CollateralRequest
MsgType_CollateralAssignment = cvar.MsgType_CollateralAssignment
MsgType_CollateralResponse = cvar.MsgType_CollateralResponse
MsgType_CollateralReport = cvar.MsgType_CollateralReport
MsgType_CollateralInquiry = cvar.MsgType_CollateralInquiry
MsgType_CollateralInquiryAck = cvar.MsgType_CollateralInquiryAck
AdvSide_BUY = cvar.AdvSide_BUY
AdvSide_SELL = cvar.AdvSide_SELL
AdvSide_CROSS = cvar.AdvSide_CROSS
AdvSide_TRADE = cvar.AdvSide_TRADE
AdvTransType_NEW = cvar.AdvTransType_NEW
AdvTransType_CANCEL = cvar.AdvTransType_CANCEL
AdvTransType_REPLACE = cvar.AdvTransType_REPLACE
CommType_PER_UNIT = cvar.CommType_PER_UNIT
CommType_PERCENTAGE = cvar.CommType_PERCENTAGE
CommType_ABSOLUTE = cvar.CommType_ABSOLUTE
CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT = cvar.CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT
CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS = cvar.CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS
CommType_POINTS_PER_BOND_OR_OR_CONTRACT = cvar.CommType_POINTS_PER_BOND_OR_OR_CONTRACT
ExecInst_NOT_HELD = cvar.ExecInst_NOT_HELD
ExecInst_WORK = cvar.ExecInst_WORK
ExecInst_GO_ALONG = cvar.ExecInst_GO_ALONG
ExecInst_OVER_THE_DAY = cvar.ExecInst_OVER_THE_DAY
ExecInst_HELD = cvar.ExecInst_HELD
ExecInst_PARTICIPATE_DONT_INITIATE = cvar.ExecInst_PARTICIPATE_DONT_INITIATE
ExecInst_STRICT_SCALE = cvar.ExecInst_STRICT_SCALE
ExecInst_TRY_TO_SCALE = cvar.ExecInst_TRY_TO_SCALE
ExecInst_STAY_ON_BIDSIDE = cvar.ExecInst_STAY_ON_BIDSIDE
ExecInst_STAY_ON_OFFERSIDE = cvar.ExecInst_STAY_ON_OFFERSIDE
ExecInst_NO_CROSS = cvar.ExecInst_NO_CROSS
ExecInst_OK_TO_CROSS = cvar.ExecInst_OK_TO_CROSS
ExecInst_CALL_FIRST = cvar.ExecInst_CALL_FIRST
ExecInst_PERCENT_OF_VOLUME = cvar.ExecInst_PERCENT_OF_VOLUME
ExecInst_DO_NOT_INCREASE = cvar.ExecInst_DO_NOT_INCREASE
ExecInst_DO_NOT_REDUCE = cvar.ExecInst_DO_NOT_REDUCE
ExecInst_ALL_OR_NONE = cvar.ExecInst_ALL_OR_NONE
ExecInst_REINSTATE_ON_SYSTEM_FAILURE = cvar.ExecInst_REINSTATE_ON_SYSTEM_FAILURE
ExecInst_INSTITUTIONS_ONLY = cvar.ExecInst_INSTITUTIONS_ONLY
ExecInst_REINSTATE_ON_TRADING_HALT = cvar.ExecInst_REINSTATE_ON_TRADING_HALT
ExecInst_CANCEL_ON_TRADING_HALT = cvar.ExecInst_CANCEL_ON_TRADING_HALT
ExecInst_LAST_PEG = cvar.ExecInst_LAST_PEG
ExecInst_MID_PRICE = cvar.ExecInst_MID_PRICE
ExecInst_NON_NEGOTIABLE = cvar.ExecInst_NON_NEGOTIABLE
ExecInst_OPENING_PEG = cvar.ExecInst_OPENING_PEG
ExecInst_MARKET_PEG = cvar.ExecInst_MARKET_PEG
ExecInst_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecInst_CANCEL_ON_SYSTEM_FAILURE
ExecInst_PRIMARY_PEG = cvar.ExecInst_PRIMARY_PEG
ExecInst_SUSPEND = cvar.ExecInst_SUSPEND
ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
ExecInst_CUSTOMER_DISPLAY_INSTRUCTION = cvar.ExecInst_CUSTOMER_DISPLAY_INSTRUCTION
ExecInst_NETTING = cvar.ExecInst_NETTING
ExecInst_PEG_TO_VWAP = cvar.ExecInst_PEG_TO_VWAP
ExecInst_TRADE_ALONG = cvar.ExecInst_TRADE_ALONG
ExecInst_TRY_TO_STOP = cvar.ExecInst_TRY_TO_STOP
ExecInst_CANCEL_IF_NOT_BEST = cvar.ExecInst_CANCEL_IF_NOT_BEST
ExecInst_TRAILING_STOP_PEG = cvar.ExecInst_TRAILING_STOP_PEG
ExecInst_STRICT_LIMIT = cvar.ExecInst_STRICT_LIMIT
ExecInst_IGNORE_PRICE_VALIDITY_CHECKS = cvar.ExecInst_IGNORE_PRICE_VALIDITY_CHECKS
ExecInst_PEG_TO_LIMIT_PRICE = cvar.ExecInst_PEG_TO_LIMIT_PRICE
ExecInst_WORK_TO_TARGET_STRATEGY = cvar.ExecInst_WORK_TO_TARGET_STRATEGY
HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE = cvar.HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE
HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC = cvar.HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC
HandlInst_MANUAL_ORDER = cvar.HandlInst_MANUAL_ORDER
SecurityIDSource_CUSIP = cvar.SecurityIDSource_CUSIP
SecurityIDSource_SEDOL = cvar.SecurityIDSource_SEDOL
SecurityIDSource_QUIK = cvar.SecurityIDSource_QUIK
SecurityIDSource_ISIN_NUMBER = cvar.SecurityIDSource_ISIN_NUMBER
SecurityIDSource_RIC_CODE = cvar.SecurityIDSource_RIC_CODE
SecurityIDSource_ISO_CURRENCY_CODE = cvar.SecurityIDSource_ISO_CURRENCY_CODE
SecurityIDSource_ISO_COUNTRY_CODE = cvar.SecurityIDSource_ISO_COUNTRY_CODE
SecurityIDSource_EXCHANGE_SYMBOL = cvar.SecurityIDSource_EXCHANGE_SYMBOL
SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION
SecurityIDSource_BLOOMBERG_SYMBOL = cvar.SecurityIDSource_BLOOMBERG_SYMBOL
SecurityIDSource_WERTPAPIER = cvar.SecurityIDSource_WERTPAPIER
SecurityIDSource_DUTCH = cvar.SecurityIDSource_DUTCH
SecurityIDSource_VALOREN = cvar.SecurityIDSource_VALOREN
SecurityIDSource_SICOVAM = cvar.SecurityIDSource_SICOVAM
SecurityIDSource_BELGIAN = cvar.SecurityIDSource_BELGIAN
SecurityIDSource_COMMON = cvar.SecurityIDSource_COMMON
SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION = cvar.SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION
SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION = cvar.SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION
SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY = cvar.SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY
IOIQltyInd_LOW = cvar.IOIQltyInd_LOW
IOIQltyInd_MEDIUM = cvar.IOIQltyInd_MEDIUM
IOIQltyInd_HIGH = cvar.IOIQltyInd_HIGH
IOITransType_NEW = cvar.IOITransType_NEW
IOITransType_CANCEL = cvar.IOITransType_CANCEL
IOITransType_REPLACE = cvar.IOITransType_REPLACE
LastCapacity_AGENT = cvar.LastCapacity_AGENT
LastCapacity_CROSS_AS_AGENT = cvar.LastCapacity_CROSS_AS_AGENT
LastCapacity_CROSS_AS_PRINCIPAL = cvar.LastCapacity_CROSS_AS_PRINCIPAL
LastCapacity_PRINCIPAL = cvar.LastCapacity_PRINCIPAL
MsgType_HEARTBEAT = cvar.MsgType_HEARTBEAT
MsgType_TEST_REQUEST = cvar.MsgType_TEST_REQUEST
MsgType_RESEND_REQUEST = cvar.MsgType_RESEND_REQUEST
MsgType_REJECT = cvar.MsgType_REJECT
MsgType_SEQUENCE_RESET = cvar.MsgType_SEQUENCE_RESET
MsgType_LOGOUT = cvar.MsgType_LOGOUT
MsgType_INDICATION_OF_INTEREST = cvar.MsgType_INDICATION_OF_INTEREST
MsgType_ADVERTISEMENT = cvar.MsgType_ADVERTISEMENT
MsgType_EXECUTION_REPORT = cvar.MsgType_EXECUTION_REPORT
MsgType_ORDER_CANCEL_REJECT = cvar.MsgType_ORDER_CANCEL_REJECT
MsgType_LOGON = cvar.MsgType_LOGON
MsgType_NEWS = cvar.MsgType_NEWS
MsgType_EMAIL = cvar.MsgType_EMAIL
MsgType_ORDER_SINGLE = cvar.MsgType_ORDER_SINGLE
MsgType_ORDER_LIST = cvar.MsgType_ORDER_LIST
MsgType_ORDER_CANCEL_REQUEST = cvar.MsgType_ORDER_CANCEL_REQUEST
MsgType_ORDER_CANCEL_REPLACE_REQUEST = cvar.MsgType_ORDER_CANCEL_REPLACE_REQUEST
MsgType_ORDER_STATUS_REQUEST = cvar.MsgType_ORDER_STATUS_REQUEST
MsgType_ALLOCATION_INSTRUCTION = cvar.MsgType_ALLOCATION_INSTRUCTION
MsgType_LIST_CANCEL_REQUEST = cvar.MsgType_LIST_CANCEL_REQUEST
MsgType_LIST_EXECUTE = cvar.MsgType_LIST_EXECUTE
MsgType_LIST_STATUS_REQUEST = cvar.MsgType_LIST_STATUS_REQUEST
MsgType_LIST_STATUS = cvar.MsgType_LIST_STATUS
MsgType_ALLOCATION_INSTRUCTION_ACK = cvar.MsgType_ALLOCATION_INSTRUCTION_ACK
MsgType_DONT_KNOW_TRADE_ = cvar.MsgType_DONT_KNOW_TRADE_
MsgType_QUOTE_REQUEST = cvar.MsgType_QUOTE_REQUEST
MsgType_QUOTE = cvar.MsgType_QUOTE
MsgType_SETTLEMENT_INSTRUCTIONS = cvar.MsgType_SETTLEMENT_INSTRUCTIONS
MsgType_MARKET_DATA_REQUEST = cvar.MsgType_MARKET_DATA_REQUEST
MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH = cvar.MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH
MsgType_MARKET_DATA_INCREMENTAL_REFRESH = cvar.MsgType_MARKET_DATA_INCREMENTAL_REFRESH
MsgType_MARKET_DATA_REQUEST_REJECT = cvar.MsgType_MARKET_DATA_REQUEST_REJECT
MsgType_QUOTE_CANCEL = cvar.MsgType_QUOTE_CANCEL
MsgType_QUOTE_STATUS_REQUEST = cvar.MsgType_QUOTE_STATUS_REQUEST
MsgType_MASS_QUOTE_ACKNOWLEDGEMENT = cvar.MsgType_MASS_QUOTE_ACKNOWLEDGEMENT
MsgType_SECURITY_DEFINITION_REQUEST = cvar.MsgType_SECURITY_DEFINITION_REQUEST
MsgType_SECURITY_DEFINITION = cvar.MsgType_SECURITY_DEFINITION
MsgType_SECURITY_STATUS_REQUEST = cvar.MsgType_SECURITY_STATUS_REQUEST
MsgType_SECURITY_STATUS = cvar.MsgType_SECURITY_STATUS
MsgType_TRADING_SESSION_STATUS_REQUEST = cvar.MsgType_TRADING_SESSION_STATUS_REQUEST
MsgType_TRADING_SESSION_STATUS = cvar.MsgType_TRADING_SESSION_STATUS
MsgType_MASS_QUOTE = cvar.MsgType_MASS_QUOTE
MsgType_BUSINESS_MESSAGE_REJECT = cvar.MsgType_BUSINESS_MESSAGE_REJECT
MsgType_BID_REQUEST = cvar.MsgType_BID_REQUEST
MsgType_BID_RESPONSE = cvar.MsgType_BID_RESPONSE
MsgType_LIST_STRIKE_PRICE = cvar.MsgType_LIST_STRIKE_PRICE
MsgType_XML_MESSAGE = cvar.MsgType_XML_MESSAGE
MsgType_REGISTRATION_INSTRUCTIONS = cvar.MsgType_REGISTRATION_INSTRUCTIONS
MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE = cvar.MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE
MsgType_ORDER_MASS_CANCEL_REQUEST = cvar.MsgType_ORDER_MASS_CANCEL_REQUEST
MsgType_ORDER_MASS_CANCEL_REPORT = cvar.MsgType_ORDER_MASS_CANCEL_REPORT
MsgType_NEW_ORDER_CROSS = cvar.MsgType_NEW_ORDER_CROSS
MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST = cvar.MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST
MsgType_CROSS_ORDER_CANCEL_REQUEST = cvar.MsgType_CROSS_ORDER_CANCEL_REQUEST
MsgType_SECURITY_TYPE_REQUEST = cvar.MsgType_SECURITY_TYPE_REQUEST
MsgType_SECURITY_TYPES = cvar.MsgType_SECURITY_TYPES
MsgType_SECURITY_LIST_REQUEST = cvar.MsgType_SECURITY_LIST_REQUEST
MsgType_SECURITY_LIST = cvar.MsgType_SECURITY_LIST
MsgType_DERIVATIVE_SECURITY_LIST_REQUEST = cvar.MsgType_DERIVATIVE_SECURITY_LIST_REQUEST
MsgType_DERIVATIVE_SECURITY_LIST = cvar.MsgType_DERIVATIVE_SECURITY_LIST
MsgType_NEW_ORDER_MULTILEG = cvar.MsgType_NEW_ORDER_MULTILEG
MsgType_MULTILEG_ORDER_CANCEL_REPLACE = cvar.MsgType_MULTILEG_ORDER_CANCEL_REPLACE
MsgType_TRADE_CAPTURE_REPORT_REQUEST = cvar.MsgType_TRADE_CAPTURE_REPORT_REQUEST
MsgType_TRADE_CAPTURE_REPORT = cvar.MsgType_TRADE_CAPTURE_REPORT
MsgType_ORDER_MASS_STATUS_REQUEST = cvar.MsgType_ORDER_MASS_STATUS_REQUEST
MsgType_QUOTE_REQUEST_REJECT = cvar.MsgType_QUOTE_REQUEST_REJECT
MsgType_RFQ_REQUEST = cvar.MsgType_RFQ_REQUEST
MsgType_QUOTE_STATUS_REPORT = cvar.MsgType_QUOTE_STATUS_REPORT
MsgType_QUOTE_RESPONSE = cvar.MsgType_QUOTE_RESPONSE
MsgType_CONFIRMATION = cvar.MsgType_CONFIRMATION
MsgType_POSITION_MAINTENANCE_REQUEST = cvar.MsgType_POSITION_MAINTENANCE_REQUEST
MsgType_POSITION_MAINTENANCE_REPORT = cvar.MsgType_POSITION_MAINTENANCE_REPORT
MsgType_REQUEST_FOR_POSITIONS = cvar.MsgType_REQUEST_FOR_POSITIONS
MsgType_REQUEST_FOR_POSITIONS_ACK = cvar.MsgType_REQUEST_FOR_POSITIONS_ACK
MsgType_POSITION_REPORT = cvar.MsgType_POSITION_REPORT
MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK = cvar.MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK
MsgType_TRADE_CAPTURE_REPORT_ACK = cvar.MsgType_TRADE_CAPTURE_REPORT_ACK
MsgType_ALLOCATION_REPORT = cvar.MsgType_ALLOCATION_REPORT
MsgType_ALLOCATION_REPORT_ACK = cvar.MsgType_ALLOCATION_REPORT_ACK
MsgType_CONFIRMATION_ACK = cvar.MsgType_CONFIRMATION_ACK
MsgType_SETTLEMENT_INSTRUCTION_REQUEST = cvar.MsgType_SETTLEMENT_INSTRUCTION_REQUEST
MsgType_ASSIGNMENT_REPORT = cvar.MsgType_ASSIGNMENT_REPORT
MsgType_COLLATERAL_REQUEST = cvar.MsgType_COLLATERAL_REQUEST
MsgType_COLLATERAL_ASSIGNMENT = cvar.MsgType_COLLATERAL_ASSIGNMENT
MsgType_COLLATERAL_RESPONSE = cvar.MsgType_COLLATERAL_RESPONSE
MsgType_COLLATERAL_REPORT = cvar.MsgType_COLLATERAL_REPORT
MsgType_COLLATERAL_INQUIRY = cvar.MsgType_COLLATERAL_INQUIRY
MsgType_NETWORK_STATUS_REQUEST = cvar.MsgType_NETWORK_STATUS_REQUEST
MsgType_NETWORK_STATUS_RESPONSE = cvar.MsgType_NETWORK_STATUS_RESPONSE
MsgType_USER_REQUEST = cvar.MsgType_USER_REQUEST
MsgType_USER_RESPONSE = cvar.MsgType_USER_RESPONSE
MsgType_COLLATERAL_INQUIRY_ACK = cvar.MsgType_COLLATERAL_INQUIRY_ACK
MsgType_CONFIRMATION_REQUEST = cvar.MsgType_CONFIRMATION_REQUEST
OrdStatus_NEW = cvar.OrdStatus_NEW
OrdStatus_PARTIALLY_FILLED = cvar.OrdStatus_PARTIALLY_FILLED
OrdStatus_FILLED = cvar.OrdStatus_FILLED
OrdStatus_DONE_FOR_DAY = cvar.OrdStatus_DONE_FOR_DAY
OrdStatus_CANCELED = cvar.OrdStatus_CANCELED
OrdStatus_REPLACED = cvar.OrdStatus_REPLACED
OrdStatus_PENDING_CANCEL = cvar.OrdStatus_PENDING_CANCEL
OrdStatus_STOPPED = cvar.OrdStatus_STOPPED
OrdStatus_REJECTED = cvar.OrdStatus_REJECTED
OrdStatus_SUSPENDED = cvar.OrdStatus_SUSPENDED
OrdStatus_PENDING_NEW = cvar.OrdStatus_PENDING_NEW
OrdStatus_CALCULATED = cvar.OrdStatus_CALCULATED
OrdStatus_EXPIRED = cvar.OrdStatus_EXPIRED
OrdStatus_ACCEPTED_FOR_BIDDING = cvar.OrdStatus_ACCEPTED_FOR_BIDDING
OrdStatus_PENDING_REPLACE = cvar.OrdStatus_PENDING_REPLACE
OrdType_MARKET = cvar.OrdType_MARKET
OrdType_LIMIT = cvar.OrdType_LIMIT
OrdType_STOP = cvar.OrdType_STOP
OrdType_STOP_LIMIT = cvar.OrdType_STOP_LIMIT
OrdType_WITH_OR_WITHOUT = cvar.OrdType_WITH_OR_WITHOUT
OrdType_LIMIT_OR_BETTER = cvar.OrdType_LIMIT_OR_BETTER
OrdType_LIMIT_WITH_OR_WITHOUT = cvar.OrdType_LIMIT_WITH_OR_WITHOUT
OrdType_ON_BASIS = cvar.OrdType_ON_BASIS
OrdType_PREVIOUSLY_QUOTED = cvar.OrdType_PREVIOUSLY_QUOTED
OrdType_PREVIOUSLY_INDICATED = cvar.OrdType_PREVIOUSLY_INDICATED
OrdType_FOREX_SWAP = cvar.OrdType_FOREX_SWAP
OrdType_FUNARI = cvar.OrdType_FUNARI
OrdType_MARKET_IF_TOUCHED = cvar.OrdType_MARKET_IF_TOUCHED
OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT = cvar.OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT
OrdType_PREVIOUS_FUND_VALUATION_POINT = cvar.OrdType_PREVIOUS_FUND_VALUATION_POINT
OrdType_NEXT_FUND_VALUATION_POINT = cvar.OrdType_NEXT_FUND_VALUATION_POINT
OrdType_PEGGED = cvar.OrdType_PEGGED
Side_BUY = cvar.Side_BUY
Side_SELL = cvar.Side_SELL
Side_BUY_MINUS = cvar.Side_BUY_MINUS
Side_SELL_PLUS = cvar.Side_SELL_PLUS
Side_SELL_SHORT = cvar.Side_SELL_SHORT
Side_SELL_SHORT_EXEMPT = cvar.Side_SELL_SHORT_EXEMPT
Side_UNDISCLOSED = cvar.Side_UNDISCLOSED
Side_CROSS = cvar.Side_CROSS
Side_CROSS_SHORT = cvar.Side_CROSS_SHORT
Side_CROSS_SHORT_EXEMPT = cvar.Side_CROSS_SHORT_EXEMPT
Side_AS_DEFINED = cvar.Side_AS_DEFINED
Side_OPPOSITE = cvar.Side_OPPOSITE
Side_SUBSCRIBE = cvar.Side_SUBSCRIBE
Side_REDEEM = cvar.Side_REDEEM
Side_LEND = cvar.Side_LEND
Side_BORROW = cvar.Side_BORROW
TimeInForce_DAY = cvar.TimeInForce_DAY
TimeInForce_GOOD_TILL_CANCEL = cvar.TimeInForce_GOOD_TILL_CANCEL
TimeInForce_AT_THE_OPENING = cvar.TimeInForce_AT_THE_OPENING
TimeInForce_IMMEDIATE_OR_CANCEL = cvar.TimeInForce_IMMEDIATE_OR_CANCEL
TimeInForce_FILL_OR_KILL = cvar.TimeInForce_FILL_OR_KILL
TimeInForce_GOOD_TILL_CROSSING = cvar.TimeInForce_GOOD_TILL_CROSSING
TimeInForce_GOOD_TILL_DATE = cvar.TimeInForce_GOOD_TILL_DATE
TimeInForce_AT_THE_CLOSE = cvar.TimeInForce_AT_THE_CLOSE
Urgency_NORMAL = cvar.Urgency_NORMAL
Urgency_FLASH = cvar.Urgency_FLASH
Urgency_BACKGROUND = cvar.Urgency_BACKGROUND
SettlType_REGULAR = cvar.SettlType_REGULAR
SettlType_CASH = cvar.SettlType_CASH
SettlType_NEXT_DAY = cvar.SettlType_NEXT_DAY
SettlType_T_PLUS_2 = cvar.SettlType_T_PLUS_2
SettlType_T_PLUS_3 = cvar.SettlType_T_PLUS_3
SettlType_T_PLUS_4 = cvar.SettlType_T_PLUS_4
SettlType_FUTURE = cvar.SettlType_FUTURE
SettlType_WHEN_AND_IF_ISSUED = cvar.SettlType_WHEN_AND_IF_ISSUED
SettlType_SELLERS_OPTION = cvar.SettlType_SELLERS_OPTION
SettlType_T_PLUS_5 = cvar.SettlType_T_PLUS_5
SymbolSfx_WHEN_ISSUED = cvar.SymbolSfx_WHEN_ISSUED
SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST = cvar.SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST
AllocTransType_NEW = cvar.AllocTransType_NEW
AllocTransType_REPLACE = cvar.AllocTransType_REPLACE
AllocTransType_CANCEL = cvar.AllocTransType_CANCEL
PositionEffect_OPEN = cvar.PositionEffect_OPEN
PositionEffect_CLOSE = cvar.PositionEffect_CLOSE
PositionEffect_ROLLED = cvar.PositionEffect_ROLLED
PositionEffect_FIFO = cvar.PositionEffect_FIFO
ProcessCode_REGULAR = cvar.ProcessCode_REGULAR
ProcessCode_SOFT_DOLLAR = cvar.ProcessCode_SOFT_DOLLAR
ProcessCode_STEP_IN = cvar.ProcessCode_STEP_IN
ProcessCode_STEP_OUT = cvar.ProcessCode_STEP_OUT
ProcessCode_SOFT_DOLLAR_STEP_IN = cvar.ProcessCode_SOFT_DOLLAR_STEP_IN
ProcessCode_SOFT_DOLLAR_STEP_OUT = cvar.ProcessCode_SOFT_DOLLAR_STEP_OUT
ProcessCode_PLAN_SPONSOR = cvar.ProcessCode_PLAN_SPONSOR
AllocStatus_ACCEPTED = cvar.AllocStatus_ACCEPTED
AllocStatus_BLOCK_LEVEL_REJECT = cvar.AllocStatus_BLOCK_LEVEL_REJECT
AllocStatus_ACCOUNT_LEVEL_REJECT = cvar.AllocStatus_ACCOUNT_LEVEL_REJECT
AllocStatus_RECEIVED = cvar.AllocStatus_RECEIVED
AllocStatus_INCOMPLETE = cvar.AllocStatus_INCOMPLETE
AllocStatus_REJECTED_BY_INTERMEDIARY = cvar.AllocStatus_REJECTED_BY_INTERMEDIARY
AllocRejCode_UNKNOWN_ACCOUNT = cvar.AllocRejCode_UNKNOWN_ACCOUNT
AllocRejCode_INCORRECT_QUANTITY = cvar.AllocRejCode_INCORRECT_QUANTITY
AllocRejCode_INCORRECT_AVERAGE_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGE_PRICE
AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC = cvar.AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC
AllocRejCode_COMMISSION_DIFFERENCE = cvar.AllocRejCode_COMMISSION_DIFFERENCE
AllocRejCode_UNKNOWN_ORDERID = cvar.AllocRejCode_UNKNOWN_ORDERID
AllocRejCode_UNKNOWN_LISTID = cvar.AllocRejCode_UNKNOWN_LISTID
AllocRejCode_OTHER = cvar.AllocRejCode_OTHER
AllocRejCode_INCORRECT_ALLOCATED_QUANTITY = cvar.AllocRejCode_INCORRECT_ALLOCATED_QUANTITY
AllocRejCode_CALCULATION_DIFFERENCE = cvar.AllocRejCode_CALCULATION_DIFFERENCE
EmailType_NEW = cvar.EmailType_NEW
EmailType_REPLY = cvar.EmailType_REPLY
EmailType_ADMIN_REPLY = cvar.EmailType_ADMIN_REPLY
EncryptMethod_NONE_OTHER = cvar.EncryptMethod_NONE_OTHER
EncryptMethod_PKCS = cvar.EncryptMethod_PKCS
EncryptMethod_DES = cvar.EncryptMethod_DES
EncryptMethod_PKCS_DES = cvar.EncryptMethod_PKCS_DES
EncryptMethod_PGP_DES = cvar.EncryptMethod_PGP_DES
EncryptMethod_PGP_DES_MD5 = cvar.EncryptMethod_PGP_DES_MD5
EncryptMethod_PEM_DES_MD5 = cvar.EncryptMethod_PEM_DES_MD5
CxlRejReason_TOO_LATE_TO_CANCEL = cvar.CxlRejReason_TOO_LATE_TO_CANCEL
CxlRejReason_UNKNOWN_ORDER = cvar.CxlRejReason_UNKNOWN_ORDER
CxlRejReason_BROKER_EXCHANGE_OPTION = cvar.CxlRejReason_BROKER_EXCHANGE_OPTION
CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS = cvar.CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS
CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = cvar.CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST
CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER = cvar.CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER
CxlRejReason_DUPLICATE_CLORDID_RECEIVED = cvar.CxlRejReason_DUPLICATE_CLORDID_RECEIVED
OrdRejReason_BROKER_EXCHANGE_OPTION = cvar.OrdRejReason_BROKER_EXCHANGE_OPTION
OrdRejReason_UNKNOWN_SYMBOL = cvar.OrdRejReason_UNKNOWN_SYMBOL
OrdRejReason_EXCHANGE_CLOSED = cvar.OrdRejReason_EXCHANGE_CLOSED
OrdRejReason_ORDER_EXCEEDS_LIMIT = cvar.OrdRejReason_ORDER_EXCEEDS_LIMIT
OrdRejReason_TOO_LATE_TO_ENTER = cvar.OrdRejReason_TOO_LATE_TO_ENTER
OrdRejReason_UNKNOWN_ORDER = cvar.OrdRejReason_UNKNOWN_ORDER
OrdRejReason_DUPLICATE_ORDER = cvar.OrdRejReason_DUPLICATE_ORDER
OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = cvar.OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER
OrdRejReason_STALE_ORDER = cvar.OrdRejReason_STALE_ORDER
OrdRejReason_TRADE_ALONG_REQUIRED = cvar.OrdRejReason_TRADE_ALONG_REQUIRED
IOIQualifier_ALL_OR_NONE = cvar.IOIQualifier_ALL_OR_NONE
IOIQualifier_MARKET_ON_CLOSE = cvar.IOIQualifier_MARKET_ON_CLOSE
IOIQualifier_AT_THE_CLOSE = cvar.IOIQualifier_AT_THE_CLOSE
IOIQualifier_VWAP = cvar.IOIQualifier_VWAP
IOIQualifier_IN_TOUCH_WITH = cvar.IOIQualifier_IN_TOUCH_WITH
IOIQualifier_LIMIT = cvar.IOIQualifier_LIMIT
IOIQualifier_MORE_BEHIND = cvar.IOIQualifier_MORE_BEHIND
IOIQualifier_AT_THE_OPEN = cvar.IOIQualifier_AT_THE_OPEN
IOIQualifier_TAKING_A_POSITION = cvar.IOIQualifier_TAKING_A_POSITION
IOIQualifier_AT_THE_MARKET = cvar.IOIQualifier_AT_THE_MARKET
IOIQualifier_READY_TO_TRADE = cvar.IOIQualifier_READY_TO_TRADE
IOIQualifier_PORTFOLIO_SHOWN = cvar.IOIQualifier_PORTFOLIO_SHOWN
IOIQualifier_THROUGH_THE_DAY = cvar.IOIQualifier_THROUGH_THE_DAY
IOIQualifier_VERSUS = cvar.IOIQualifier_VERSUS
IOIQualifier_INDICATION_WORKING_AWAY = cvar.IOIQualifier_INDICATION_WORKING_AWAY
IOIQualifier_CROSSING_OPPORTUNITY = cvar.IOIQualifier_CROSSING_OPPORTUNITY
IOIQualifier_AT_THE_MIDPOINT = cvar.IOIQualifier_AT_THE_MIDPOINT
IOIQualifier_PRE_OPEN = cvar.IOIQualifier_PRE_OPEN
DKReason_UNKNOWN_SYMBOL = cvar.DKReason_UNKNOWN_SYMBOL
DKReason_WRONG_SIDE = cvar.DKReason_WRONG_SIDE
DKReason_QUANTITY_EXCEEDS_ORDER = cvar.DKReason_QUANTITY_EXCEEDS_ORDER
DKReason_NO_MATCHING_ORDER = cvar.DKReason_NO_MATCHING_ORDER
DKReason_PRICE_EXCEEDS_LIMIT = cvar.DKReason_PRICE_EXCEEDS_LIMIT
DKReason_CALCULATION_DIFFERENCE = cvar.DKReason_CALCULATION_DIFFERENCE
DKReason_OTHER = cvar.DKReason_OTHER
MiscFeeType_REGULATORY = cvar.MiscFeeType_REGULATORY
MiscFeeType_TAX = cvar.MiscFeeType_TAX
MiscFeeType_LOCAL_COMMISSION = cvar.MiscFeeType_LOCAL_COMMISSION
MiscFeeType_EXCHANGE_FEES = cvar.MiscFeeType_EXCHANGE_FEES
MiscFeeType_STAMP = cvar.MiscFeeType_STAMP
MiscFeeType_LEVY = cvar.MiscFeeType_LEVY
MiscFeeType_OTHER = cvar.MiscFeeType_OTHER
MiscFeeType_MARKUP = cvar.MiscFeeType_MARKUP
MiscFeeType_CONSUMPTION_TAX = cvar.MiscFeeType_CONSUMPTION_TAX
ExecType_NEW = cvar.ExecType_NEW
ExecType_PARTIAL_FILL = cvar.ExecType_PARTIAL_FILL
ExecType_FILL = cvar.ExecType_FILL
ExecType_DONE_FOR_DAY = cvar.ExecType_DONE_FOR_DAY
ExecType_CANCELED = cvar.ExecType_CANCELED
ExecType_REPLACE = cvar.ExecType_REPLACE
ExecType_PENDING_CANCEL = cvar.ExecType_PENDING_CANCEL
ExecType_STOPPED = cvar.ExecType_STOPPED
ExecType_REJECTED = cvar.ExecType_REJECTED
ExecType_SUSPENDED = cvar.ExecType_SUSPENDED
ExecType_PENDING_NEW = cvar.ExecType_PENDING_NEW
ExecType_CALCULATED = cvar.ExecType_CALCULATED
ExecType_EXPIRED = cvar.ExecType_EXPIRED
ExecType_RESTATED = cvar.ExecType_RESTATED
ExecType_PENDING_REPLACE = cvar.ExecType_PENDING_REPLACE
ExecType_TRADE = cvar.ExecType_TRADE
ExecType_TRADE_CORRECT = cvar.ExecType_TRADE_CORRECT
ExecType_TRADE_CANCEL = cvar.ExecType_TRADE_CANCEL
ExecType_ORDER_STATUS = cvar.ExecType_ORDER_STATUS
SettlCurrFxRateCalc_MULTIPLY = cvar.SettlCurrFxRateCalc_MULTIPLY
SettlCurrFxRateCalc_DIVIDE = cvar.SettlCurrFxRateCalc_DIVIDE
SettlInstMode_DEFAULT = cvar.SettlInstMode_DEFAULT
SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED = cvar.SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED
SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT = cvar.SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT
SettlInstMode_REQUEST_REJECT = cvar.SettlInstMode_REQUEST_REJECT
SettlInstTransType_NEW = cvar.SettlInstTransType_NEW
SettlInstTransType_CANCEL = cvar.SettlInstTransType_CANCEL
SettlInstTransType_REPLACE = cvar.SettlInstTransType_REPLACE
SettlInstTransType_RESTATE = cvar.SettlInstTransType_RESTATE
SettlInstSource_BROKERS_INSTRUCTIONS = cvar.SettlInstSource_BROKERS_INSTRUCTIONS
SettlInstSource_INSTITUTIONS_INSTRUCTIONS = cvar.SettlInstSource_INSTITUTIONS_INSTRUCTIONS
SettlInstSource_INVESTOR = cvar.SettlInstSource_INVESTOR
SecurityType_EURO_SUPRANATIONAL_COUPONS = cvar.SecurityType_EURO_SUPRANATIONAL_COUPONS
SecurityType_FEDERAL_AGENCY_COUPON = cvar.SecurityType_FEDERAL_AGENCY_COUPON
SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE = cvar.SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE
SecurityType_PRIVATE_EXPORT_FUNDING = cvar.SecurityType_PRIVATE_EXPORT_FUNDING
SecurityType_USD_SUPRANATIONAL_COUPONS = cvar.SecurityType_USD_SUPRANATIONAL_COUPONS
SecurityType_FUTURE = cvar.SecurityType_FUTURE
SecurityType_OPTION = cvar.SecurityType_OPTION
SecurityType_CORPORATE_BOND = cvar.SecurityType_CORPORATE_BOND
SecurityType_CORPORATE_PRIVATE_PLACEMENT = cvar.SecurityType_CORPORATE_PRIVATE_PLACEMENT
SecurityType_CONVERTIBLE_BOND = cvar.SecurityType_CONVERTIBLE_BOND
SecurityType_DUAL_CURRENCY = cvar.SecurityType_DUAL_CURRENCY
SecurityType_EURO_CORPORATE_BOND = cvar.SecurityType_EURO_CORPORATE_BOND
SecurityType_INDEXED_LINKED = cvar.SecurityType_INDEXED_LINKED
SecurityType_STRUCTURED_NOTES = cvar.SecurityType_STRUCTURED_NOTES
SecurityType_YANKEE_CORPORATE_BOND = cvar.SecurityType_YANKEE_CORPORATE_BOND
SecurityType_FOREIGN_EXCHANGE_CONTRACT = cvar.SecurityType_FOREIGN_EXCHANGE_CONTRACT
SecurityType_COMMON_STOCK = cvar.SecurityType_COMMON_STOCK
SecurityType_PREFERRED_STOCK = cvar.SecurityType_PREFERRED_STOCK
SecurityType_BRADY_BOND = cvar.SecurityType_BRADY_BOND
SecurityType_EURO_SOVEREIGNS = cvar.SecurityType_EURO_SOVEREIGNS
SecurityType_US_TREASURY_BOND = cvar.SecurityType_US_TREASURY_BOND
SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = cvar.SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE
SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES = cvar.SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES
SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE
SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE
SecurityType_US_TREASURY_NOTE = cvar.SecurityType_US_TREASURY_NOTE
SecurityType_US_TREASURY_BILL = cvar.SecurityType_US_TREASURY_BILL
SecurityType_REPURCHASE = cvar.SecurityType_REPURCHASE
SecurityType_FORWARD = cvar.SecurityType_FORWARD
SecurityType_BUY_SELLBACK = cvar.SecurityType_BUY_SELLBACK
SecurityType_SECURITIES_LOAN = cvar.SecurityType_SECURITIES_LOAN
SecurityType_SECURITIES_PLEDGE = cvar.SecurityType_SECURITIES_PLEDGE
SecurityType_TERM_LOAN = cvar.SecurityType_TERM_LOAN
SecurityType_REVOLVER_LOAN = cvar.SecurityType_REVOLVER_LOAN
SecurityType_REVOLVER_TERM_LOAN = cvar.SecurityType_REVOLVER_TERM_LOAN
SecurityType_BRIDGE_LOAN = cvar.SecurityType_BRIDGE_LOAN
SecurityType_LETTER_OF_CREDIT = cvar.SecurityType_LETTER_OF_CREDIT
SecurityType_SWING_LINE_FACILITY = cvar.SecurityType_SWING_LINE_FACILITY
SecurityType_DEBTOR_IN_POSSESSION = cvar.SecurityType_DEBTOR_IN_POSSESSION
SecurityType_DEFAULTED = cvar.SecurityType_DEFAULTED
SecurityType_WITHDRAWN = cvar.SecurityType_WITHDRAWN
SecurityType_REPLACED = cvar.SecurityType_REPLACED
SecurityType_MATURED = cvar.SecurityType_MATURED
SecurityType_AMENDED_AND_RESTATED = cvar.SecurityType_AMENDED_AND_RESTATED
SecurityType_RETIRED = cvar.SecurityType_RETIRED
SecurityType_BANKERS_ACCEPTANCE = cvar.SecurityType_BANKERS_ACCEPTANCE
SecurityType_BANK_NOTES = cvar.SecurityType_BANK_NOTES
SecurityType_BILL_OF_EXCHANGES = cvar.SecurityType_BILL_OF_EXCHANGES
SecurityType_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_CERTIFICATE_OF_DEPOSIT
SecurityType_CALL_LOANS = cvar.SecurityType_CALL_LOANS
SecurityType_COMMERCIAL_PAPER = cvar.SecurityType_COMMERCIAL_PAPER
SecurityType_DEPOSIT_NOTES = cvar.SecurityType_DEPOSIT_NOTES
SecurityType_EURO_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_EURO_CERTIFICATE_OF_DEPOSIT
SecurityType_EURO_COMMERCIAL_PAPER = cvar.SecurityType_EURO_COMMERCIAL_PAPER
SecurityType_LIQUIDITY_NOTE = cvar.SecurityType_LIQUIDITY_NOTE
SecurityType_MEDIUM_TERM_NOTES = cvar.SecurityType_MEDIUM_TERM_NOTES
SecurityType_OVERNIGHT = cvar.SecurityType_OVERNIGHT
SecurityType_PROMISSORY_NOTE = cvar.SecurityType_PROMISSORY_NOTE
SecurityType_PLAZOS_FIJOS = cvar.SecurityType_PLAZOS_FIJOS
SecurityType_SHORT_TERM_LOAN_NOTE = cvar.SecurityType_SHORT_TERM_LOAN_NOTE
SecurityType_TIME_DEPOSIT = cvar.SecurityType_TIME_DEPOSIT
SecurityType_EXTENDED_COMM_NOTE = cvar.SecurityType_EXTENDED_COMM_NOTE
SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT
SecurityType_ASSET_BACKED_SECURITIES = cvar.SecurityType_ASSET_BACKED_SECURITIES
SecurityType_CORP_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_CORP_MORTGAGE_BACKED_SECURITIES
SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION = cvar.SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION
SecurityType_IOETTE_MORTGAGE = cvar.SecurityType_IOETTE_MORTGAGE
SecurityType_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_MORTGAGE_BACKED_SECURITIES
SecurityType_MORTGAGE_INTEREST_ONLY = cvar.SecurityType_MORTGAGE_INTEREST_ONLY
SecurityType_MORTGAGE_PRINCIPAL_ONLY = cvar.SecurityType_MORTGAGE_PRINCIPAL_ONLY
SecurityType_MORTGAGE_PRIVATE_PLACEMENT = cvar.SecurityType_MORTGAGE_PRIVATE_PLACEMENT
SecurityType_MISCELLANEOUS_PASS_THROUGH = cvar.SecurityType_MISCELLANEOUS_PASS_THROUGH
SecurityType_PFANDBRIEFE = cvar.SecurityType_PFANDBRIEFE
SecurityType_TO_BE_ANNOUNCED = cvar.SecurityType_TO_BE_ANNOUNCED
SecurityType_OTHER_ANTICIPATION_NOTES = cvar.SecurityType_OTHER_ANTICIPATION_NOTES
SecurityType_CERTIFICATE_OF_OBLIGATION = cvar.SecurityType_CERTIFICATE_OF_OBLIGATION
SecurityType_CERTIFICATE_OF_PARTICIPATION = cvar.SecurityType_CERTIFICATE_OF_PARTICIPATION
SecurityType_GENERAL_OBLIGATION_BONDS = cvar.SecurityType_GENERAL_OBLIGATION_BONDS
SecurityType_MANDATORY_TENDER = cvar.SecurityType_MANDATORY_TENDER
SecurityType_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_REVENUE_ANTICIPATION_NOTE
SecurityType_REVENUE_BONDS = cvar.SecurityType_REVENUE_BONDS
SecurityType_SPECIAL_ASSESSMENT = cvar.SecurityType_SPECIAL_ASSESSMENT
SecurityType_SPECIAL_OBLIGATION = cvar.SecurityType_SPECIAL_OBLIGATION
SecurityType_SPECIAL_TAX = cvar.SecurityType_SPECIAL_TAX
SecurityType_TAX_ANTICIPATION_NOTE = cvar.SecurityType_TAX_ANTICIPATION_NOTE
SecurityType_TAX_ALLOCATION = cvar.SecurityType_TAX_ALLOCATION
SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER = cvar.SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER
SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE
SecurityType_VARIABLE_RATE_DEMAND_NOTE = cvar.SecurityType_VARIABLE_RATE_DEMAND_NOTE
SecurityType_WARRANT = cvar.SecurityType_WARRANT
SecurityType_MUTUAL_FUND = cvar.SecurityType_MUTUAL_FUND
SecurityType_MULTI_LEG_INSTRUMENT = cvar.SecurityType_MULTI_LEG_INSTRUMENT
SecurityType_NO_SECURITY_TYPE = cvar.SecurityType_NO_SECURITY_TYPE
SecurityType_WILDCARD = cvar.SecurityType_WILDCARD
StandInstDbType_OTHER = cvar.StandInstDbType_OTHER
StandInstDbType_DTC_SID = cvar.StandInstDbType_DTC_SID
StandInstDbType_THOMSON_ALERT = cvar.StandInstDbType_THOMSON_ALERT
StandInstDbType_A_GLOBAL_CUSTODIAN = cvar.StandInstDbType_A_GLOBAL_CUSTODIAN
StandInstDbType_ACCOUNTNET = cvar.StandInstDbType_ACCOUNTNET
SettlDeliveryType_VERSUS_PAYMENT = cvar.SettlDeliveryType_VERSUS_PAYMENT
SettlDeliveryType_FREE = cvar.SettlDeliveryType_FREE
SettlDeliveryType_TRI_PARTY = cvar.SettlDeliveryType_TRI_PARTY
SettlDeliveryType_HOLD_IN_CUSTODY = cvar.SettlDeliveryType_HOLD_IN_CUSTODY
AllocLinkType_F_X_NETTING = cvar.AllocLinkType_F_X_NETTING
AllocLinkType_F_X_SWAP = cvar.AllocLinkType_F_X_SWAP
CoveredOrUncovered_COVERED = cvar.CoveredOrUncovered_COVERED
CoveredOrUncovered_UNCOVERED = cvar.CoveredOrUncovered_UNCOVERED
AllocHandlInst_MATCH = cvar.AllocHandlInst_MATCH
AllocHandlInst_FORWARD = cvar.AllocHandlInst_FORWARD
AllocHandlInst_FORWARD_AND_MATCH = cvar.AllocHandlInst_FORWARD_AND_MATCH
RoutingType_TARGET_FIRM = cvar.RoutingType_TARGET_FIRM
RoutingType_TARGET_LIST = cvar.RoutingType_TARGET_LIST
RoutingType_BLOCK_FIRM = cvar.RoutingType_BLOCK_FIRM
RoutingType_BLOCK_LIST = cvar.RoutingType_BLOCK_LIST
BenchmarkCurveName_MUNIAAA = cvar.BenchmarkCurveName_MUNIAAA
BenchmarkCurveName_FUTURESWAP = cvar.BenchmarkCurveName_FUTURESWAP
BenchmarkCurveName_LIBID = cvar.BenchmarkCurveName_LIBID
BenchmarkCurveName_LIBOR = cvar.BenchmarkCurveName_LIBOR
BenchmarkCurveName_OTHER = cvar.BenchmarkCurveName_OTHER
BenchmarkCurveName_SWAP = cvar.BenchmarkCurveName_SWAP
BenchmarkCurveName_TREASURY = cvar.BenchmarkCurveName_TREASURY
BenchmarkCurveName_EURIBOR = cvar.BenchmarkCurveName_EURIBOR
BenchmarkCurveName_PFANDBRIEFE = cvar.BenchmarkCurveName_PFANDBRIEFE
BenchmarkCurveName_EONIA = cvar.BenchmarkCurveName_EONIA
BenchmarkCurveName_SONIA = cvar.BenchmarkCurveName_SONIA
BenchmarkCurveName_EUREPO = cvar.BenchmarkCurveName_EUREPO
StipulationType_AMT = cvar.StipulationType_AMT
StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER = cvar.StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER
StipulationType_BANK_QUALIFIED = cvar.StipulationType_BANK_QUALIFIED
StipulationType_BARGAIN_CONDITIONS = cvar.StipulationType_BARGAIN_CONDITIONS
StipulationType_COUPON_RANGE = cvar.StipulationType_COUPON_RANGE
StipulationType_ISO_CURRENCY_CODE = cvar.StipulationType_ISO_CURRENCY_CODE
StipulationType_CUSTOM_START_END_DATE = cvar.StipulationType_CUSTOM_START_END_DATE
StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE = cvar.StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE
StipulationType_VALUATION_DISCOUNT = cvar.StipulationType_VALUATION_DISCOUNT
StipulationType_INSURED = cvar.StipulationType_INSURED
StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE = cvar.StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE
StipulationType_ISSUERS_TICKER = cvar.StipulationType_ISSUERS_TICKER
StipulationType_ISSUE_SIZE_RANGE = cvar.StipulationType_ISSUE_SIZE_RANGE
StipulationType_LOOKBACK_DAYS = cvar.StipulationType_LOOKBACK_DAYS
StipulationType_EXPLICIT_LOT_IDENTIFIER = cvar.StipulationType_EXPLICIT_LOT_IDENTIFIER
StipulationType_LOT_VARIANCE = cvar.StipulationType_LOT_VARIANCE
StipulationType_MATURITY_YEAR_AND_MONTH = cvar.StipulationType_MATURITY_YEAR_AND_MONTH
StipulationType_MATURITY_RANGE = cvar.StipulationType_MATURITY_RANGE
StipulationType_MAXIMUM_SUBSTITUTIONS = cvar.StipulationType_MAXIMUM_SUBSTITUTIONS
StipulationType_MINIMUM_QUANTITY = cvar.StipulationType_MINIMUM_QUANTITY
StipulationType_MINIMUM_INCREMENT = cvar.StipulationType_MINIMUM_INCREMENT
StipulationType_MINIMUM_DENOMINATION = cvar.StipulationType_MINIMUM_DENOMINATION
StipulationType_PAYMENT_FREQUENCY_CALENDAR = cvar.StipulationType_PAYMENT_FREQUENCY_CALENDAR
StipulationType_NUMBER_OF_PIECES = cvar.StipulationType_NUMBER_OF_PIECES
StipulationType_POOLS_MAXIMUM = cvar.StipulationType_POOLS_MAXIMUM
StipulationType_POOLS_PER_MILLION = cvar.StipulationType_POOLS_PER_MILLION
StipulationType_POOLS_PER_LOT = cvar.StipulationType_POOLS_PER_LOT
StipulationType_POOLS_PER_TRADE = cvar.StipulationType_POOLS_PER_TRADE
StipulationType_PRICE_RANGE = cvar.StipulationType_PRICE_RANGE
StipulationType_PRICING_FREQUENCY = cvar.StipulationType_PRICING_FREQUENCY
StipulationType_PRODUCTION_YEAR = cvar.StipulationType_PRODUCTION_YEAR
StipulationType_CALL_PROTECTION = cvar.StipulationType_CALL_PROTECTION
StipulationType_PURPOSE = cvar.StipulationType_PURPOSE
StipulationType_BENCHMARK_PRICE_SOURCE = cvar.StipulationType_BENCHMARK_PRICE_SOURCE
StipulationType_RATING_SOURCE_AND_RANGE = cvar.StipulationType_RATING_SOURCE_AND_RANGE
StipulationType_RESTRICTED = cvar.StipulationType_RESTRICTED
StipulationType_MARKET_SECTOR = cvar.StipulationType_MARKET_SECTOR
StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED = cvar.StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED
StipulationType_STRUCTURE = cvar.StipulationType_STRUCTURE
StipulationType_SUBSTITUTIONS_FREQUENCY = cvar.StipulationType_SUBSTITUTIONS_FREQUENCY
StipulationType_SUBSTITUTIONS_LEFT = cvar.StipulationType_SUBSTITUTIONS_LEFT
StipulationType_FREEFORM_TEXT = cvar.StipulationType_FREEFORM_TEXT
StipulationType_TRADE_VARIANCE = cvar.StipulationType_TRADE_VARIANCE
StipulationType_WEIGHTED_AVERAGE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_COUPON
StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON
StipulationType_WEIGHTED_AVERAGE_LOAN_AGE = cvar.StipulationType_WEIGHTED_AVERAGE_LOAN_AGE
StipulationType_WEIGHTED_AVERAGE_MATURITY = cvar.StipulationType_WEIGHTED_AVERAGE_MATURITY
StipulationType_WHOLE_POOL = cvar.StipulationType_WHOLE_POOL
StipulationType_YIELD_RANGE = cvar.StipulationType_YIELD_RANGE
StipulationType_SINGLE_MONTHLY_MORTALITY = cvar.StipulationType_SINGLE_MONTHLY_MORTALITY
StipulationType_CONSTANT_PREPAYMENT_RATE = cvar.StipulationType_CONSTANT_PREPAYMENT_RATE
StipulationType_CONSTANT_PREPAYMENT_YIELD = cvar.StipulationType_CONSTANT_PREPAYMENT_YIELD
StipulationType_CONSTANT_PREPAYMENT_PENALTY = cvar.StipulationType_CONSTANT_PREPAYMENT_PENALTY
StipulationType_ABSOLUTE_PREPAYMENT_SPEED = cvar.StipulationType_ABSOLUTE_PREPAYMENT_SPEED
StipulationType_MONTHLY_PREPAYMENT_RATE = cvar.StipulationType_MONTHLY_PREPAYMENT_RATE
StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE
StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE = cvar.StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE
StipulationValue_SPECIAL_CUM_DIVIDEND = cvar.StipulationValue_SPECIAL_CUM_DIVIDEND
StipulationValue_SPECIAL_EX_DIVIDEND = cvar.StipulationValue_SPECIAL_EX_DIVIDEND
StipulationValue_SPECIAL_CUM_COUPON = cvar.StipulationValue_SPECIAL_CUM_COUPON
StipulationValue_SPECIAL_EX_COUPON = cvar.StipulationValue_SPECIAL_EX_COUPON
StipulationValue_SPECIAL_CUM_BONUS = cvar.StipulationValue_SPECIAL_CUM_BONUS
StipulationValue_SPECIAL_EX_BONUS = cvar.StipulationValue_SPECIAL_EX_BONUS
StipulationValue_SPECIAL_CUM_RIGHTS = cvar.StipulationValue_SPECIAL_CUM_RIGHTS
StipulationValue_SPECIAL_EX_RIGHTS = cvar.StipulationValue_SPECIAL_EX_RIGHTS
StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS = cvar.StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS
StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS = cvar.StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS
StipulationValue_CASH_SETTLEMENT = cvar.StipulationValue_CASH_SETTLEMENT
StipulationValue_SPECIAL_PRICE = cvar.StipulationValue_SPECIAL_PRICE
StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES = cvar.StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES
StipulationValue_GUARANTEED_DELIVERY = cvar.StipulationValue_GUARANTEED_DELIVERY
YieldType_AFTER_TAX_YIELD = cvar.YieldType_AFTER_TAX_YIELD
YieldType_ANNUAL_YIELD = cvar.YieldType_ANNUAL_YIELD
YieldType_YIELD_AT_ISSUE = cvar.YieldType_YIELD_AT_ISSUE
YieldType_YIELD_TO_AVERAGE_MATURITY = cvar.YieldType_YIELD_TO_AVERAGE_MATURITY
YieldType_BOOK_YIELD = cvar.YieldType_BOOK_YIELD
YieldType_YIELD_TO_NEXT_CALL = cvar.YieldType_YIELD_TO_NEXT_CALL
YieldType_YIELD_CHANGE_SINCE_CLOSE = cvar.YieldType_YIELD_CHANGE_SINCE_CLOSE
YieldType_CLOSING_YIELD = cvar.YieldType_CLOSING_YIELD
YieldType_COMPOUND_YIELD = cvar.YieldType_COMPOUND_YIELD
YieldType_CURRENT_YIELD = cvar.YieldType_CURRENT_YIELD
YieldType_TRUE_GROSS_YIELD = cvar.YieldType_TRUE_GROSS_YIELD
YieldType_GOVERNMENT_EQUIVALENT_YIELD = cvar.YieldType_GOVERNMENT_EQUIVALENT_YIELD
YieldType_YIELD_WITH_INFLATION_ASSUMPTION = cvar.YieldType_YIELD_WITH_INFLATION_ASSUMPTION
YieldType_INVERSE_FLOATER_BOND_YIELD = cvar.YieldType_INVERSE_FLOATER_BOND_YIELD
YieldType_MOST_RECENT_CLOSING_YIELD = cvar.YieldType_MOST_RECENT_CLOSING_YIELD
YieldType_CLOSING_YIELD_MOST_RECENT_MONTH = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_MONTH
YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER
YieldType_CLOSING_YIELD_MOST_RECENT_YEAR = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_YEAR
YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE
YieldType_MARK_TO_MARKET_YIELD = cvar.YieldType_MARK_TO_MARKET_YIELD
YieldType_YIELD_TO_MATURITY = cvar.YieldType_YIELD_TO_MATURITY
YieldType_YIELD_TO_NEXT_REFUND = cvar.YieldType_YIELD_TO_NEXT_REFUND
YieldType_OPEN_AVERAGE_YIELD = cvar.YieldType_OPEN_AVERAGE_YIELD
YieldType_YIELD_TO_NEXT_PUT = cvar.YieldType_YIELD_TO_NEXT_PUT
YieldType_PREVIOUS_CLOSE_YIELD = cvar.YieldType_PREVIOUS_CLOSE_YIELD
YieldType_PROCEEDS_YIELD = cvar.YieldType_PROCEEDS_YIELD
YieldType_SEMI_ANNUAL_YIELD = cvar.YieldType_SEMI_ANNUAL_YIELD
YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE
YieldType_SIMPLE_YIELD = cvar.YieldType_SIMPLE_YIELD
YieldType_TAX_EQUIVALENT_YIELD = cvar.YieldType_TAX_EQUIVALENT_YIELD
YieldType_YIELD_TO_TENDER_DATE = cvar.YieldType_YIELD_TO_TENDER_DATE
YieldType_TRUE_YIELD = cvar.YieldType_TRUE_YIELD
YieldType_YIELD_VALUE_OF_1_32 = cvar.YieldType_YIELD_VALUE_OF_1_32
YieldType_YIELD_TO_WORST = cvar.YieldType_YIELD_TO_WORST
SubscriptionRequestType_SNAPSHOT = cvar.SubscriptionRequestType_SNAPSHOT
SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES = cvar.SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES
SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST = cvar.SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST
MDUpdateType_FULL_REFRESH = cvar.MDUpdateType_FULL_REFRESH
MDUpdateType_INCREMENTAL_REFRESH = cvar.MDUpdateType_INCREMENTAL_REFRESH
MDEntryType_BID = cvar.MDEntryType_BID
MDEntryType_OFFER = cvar.MDEntryType_OFFER
MDEntryType_TRADE = cvar.MDEntryType_TRADE
MDEntryType_INDEX_VALUE = cvar.MDEntryType_INDEX_VALUE
MDEntryType_OPENING_PRICE = cvar.MDEntryType_OPENING_PRICE
MDEntryType_CLOSING_PRICE = cvar.MDEntryType_CLOSING_PRICE
MDEntryType_SETTLEMENT_PRICE = cvar.MDEntryType_SETTLEMENT_PRICE
MDEntryType_TRADING_SESSION_HIGH_PRICE = cvar.MDEntryType_TRADING_SESSION_HIGH_PRICE
MDEntryType_TRADING_SESSION_LOW_PRICE = cvar.MDEntryType_TRADING_SESSION_LOW_PRICE
MDEntryType_TRADING_SESSION_VWAP_PRICE = cvar.MDEntryType_TRADING_SESSION_VWAP_PRICE
MDEntryType_IMBALANCE = cvar.MDEntryType_IMBALANCE
MDEntryType_TRADE_VOLUME = cvar.MDEntryType_TRADE_VOLUME
MDEntryType_OPEN_INTEREST = cvar.MDEntryType_OPEN_INTEREST
TickDirection_PLUS_TICK = cvar.TickDirection_PLUS_TICK
TickDirection_ZERO_PLUS_TICK = cvar.TickDirection_ZERO_PLUS_TICK
TickDirection_MINUS_TICK = cvar.TickDirection_MINUS_TICK
TickDirection_ZERO_MINUS_TICK = cvar.TickDirection_ZERO_MINUS_TICK
QuoteCondition_OPEN_ACTIVE = cvar.QuoteCondition_OPEN_ACTIVE
QuoteCondition_CLOSED_INACTIVE = cvar.QuoteCondition_CLOSED_INACTIVE
QuoteCondition_EXCHANGE_BEST = cvar.QuoteCondition_EXCHANGE_BEST
QuoteCondition_CONSOLIDATED_BEST = cvar.QuoteCondition_CONSOLIDATED_BEST
QuoteCondition_LOCKED = cvar.QuoteCondition_LOCKED
QuoteCondition_CROSSED = cvar.QuoteCondition_CROSSED
QuoteCondition_DEPTH = cvar.QuoteCondition_DEPTH
QuoteCondition_FAST_TRADING = cvar.QuoteCondition_FAST_TRADING
QuoteCondition_NON_FIRM = cvar.QuoteCondition_NON_FIRM
TradeCondition_CASH_MARKET = cvar.TradeCondition_CASH_MARKET
TradeCondition_AVERAGE_PRICE_TRADE = cvar.TradeCondition_AVERAGE_PRICE_TRADE
TradeCondition_CASH_TRADE = cvar.TradeCondition_CASH_TRADE
TradeCondition_NEXT_DAY_MARKET = cvar.TradeCondition_NEXT_DAY_MARKET
TradeCondition_OPENING_REOPENING_TRADE_DETAIL = cvar.TradeCondition_OPENING_REOPENING_TRADE_DETAIL
TradeCondition_INTRADAY_TRADE_DETAIL = cvar.TradeCondition_INTRADAY_TRADE_DETAIL
TradeCondition_RULE127 = cvar.TradeCondition_RULE127
TradeCondition_RULE155 = cvar.TradeCondition_RULE155
TradeCondition_SOLD_LAST = cvar.TradeCondition_SOLD_LAST
TradeCondition_NEXT_DAY_TRADE = cvar.TradeCondition_NEXT_DAY_TRADE
TradeCondition_OPENED = cvar.TradeCondition_OPENED
TradeCondition_SELLER = cvar.TradeCondition_SELLER
TradeCondition_SOLD = cvar.TradeCondition_SOLD
TradeCondition_STOPPED_STOCK = cvar.TradeCondition_STOPPED_STOCK
TradeCondition_IMBALANCE_MORE_BUYERS = cvar.TradeCondition_IMBALANCE_MORE_BUYERS
TradeCondition_IMBALANCE_MORE_SELLERS = cvar.TradeCondition_IMBALANCE_MORE_SELLERS
TradeCondition_OPENING_PRICE = cvar.TradeCondition_OPENING_PRICE
MDUpdateAction_NEW = cvar.MDUpdateAction_NEW
MDUpdateAction_CHANGE = cvar.MDUpdateAction_CHANGE
MDUpdateAction_DELETE = cvar.MDUpdateAction_DELETE
MDReqRejReason_UNKNOWN_SYMBOL = cvar.MDReqRejReason_UNKNOWN_SYMBOL
MDReqRejReason_DUPLICATE_MDREQID = cvar.MDReqRejReason_DUPLICATE_MDREQID
MDReqRejReason_INSUFFICIENT_BANDWIDTH = cvar.MDReqRejReason_INSUFFICIENT_BANDWIDTH
MDReqRejReason_INSUFFICIENT_PERMISSIONS = cvar.MDReqRejReason_INSUFFICIENT_PERMISSIONS
MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE = cvar.MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE
MDReqRejReason_UNSUPPORTED_MARKETDEPTH = cvar.MDReqRejReason_UNSUPPORTED_MARKETDEPTH
MDReqRejReason_UNSUPPORTED_MDUPDATETYPE = cvar.MDReqRejReason_UNSUPPORTED_MDUPDATETYPE
MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK = cvar.MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK
MDReqRejReason_UNSUPPORTED_MDENTRYTYPE = cvar.MDReqRejReason_UNSUPPORTED_MDENTRYTYPE
MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID = cvar.MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID
MDReqRejReason_UNSUPPORTED_SCOPE = cvar.MDReqRejReason_UNSUPPORTED_SCOPE
MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG = cvar.MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG
MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE = cvar.MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE
DeleteReason_CANCELATION_TRADE_BUST = cvar.DeleteReason_CANCELATION_TRADE_BUST
DeleteReason_ERROR = cvar.DeleteReason_ERROR
OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY = cvar.OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY
OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY = cvar.OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY
OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY = cvar.OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY
OpenCloseSettlFlag_EXPECTED_ENTRY = cvar.OpenCloseSettlFlag_EXPECTED_ENTRY
OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE = cvar.OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE
FinancialStatus_BANKRUPT = cvar.FinancialStatus_BANKRUPT
FinancialStatus_PENDING_DELISTING = cvar.FinancialStatus_PENDING_DELISTING
CorporateAction_EX_DIVIDEND = cvar.CorporateAction_EX_DIVIDEND
CorporateAction_EX_DISTRIBUTION = cvar.CorporateAction_EX_DISTRIBUTION
CorporateAction_EX_RIGHTS = cvar.CorporateAction_EX_RIGHTS
CorporateAction_NEW = cvar.CorporateAction_NEW
CorporateAction_EX_INTEREST = cvar.CorporateAction_EX_INTEREST
QuoteStatus_ACCEPTED = cvar.QuoteStatus_ACCEPTED
QuoteStatus_CANCELED_FOR_SYMBOL = cvar.QuoteStatus_CANCELED_FOR_SYMBOL
QuoteStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteStatus_CANCELED_FOR_SECURITY_TYPE
QuoteStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteStatus_CANCELED_FOR_UNDERLYING
QuoteStatus_CANCELED_ALL = cvar.QuoteStatus_CANCELED_ALL
QuoteStatus_REJECTED = cvar.QuoteStatus_REJECTED
QuoteStatus_REMOVED_FROM_MARKET = cvar.QuoteStatus_REMOVED_FROM_MARKET
QuoteStatus_EXPIRED = cvar.QuoteStatus_EXPIRED
QuoteStatus_QUERY = cvar.QuoteStatus_QUERY
QuoteStatus_QUOTE_NOT_FOUND = cvar.QuoteStatus_QUOTE_NOT_FOUND
QuoteCancelType_CANCEL_FOR_SYMBOL = cvar.QuoteCancelType_CANCEL_FOR_SYMBOL
QuoteCancelType_CANCEL_FOR_SECURITY_TYPE = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_TYPE
QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL = cvar.QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL
QuoteCancelType_CANCEL_ALL_QUOTES = cvar.QuoteCancelType_CANCEL_ALL_QUOTES
QuoteRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRejectReason_UNKNOWN_SYMBOL
QuoteRejectReason_EXCHANGE_CLOSED = cvar.QuoteRejectReason_EXCHANGE_CLOSED
QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRejectReason_TOO_LATE_TO_ENTER
QuoteRejectReason_UNKNOWN_QUOTE = cvar.QuoteRejectReason_UNKNOWN_QUOTE
QuoteRejectReason_DUPLICATE_QUOTE = cvar.QuoteRejectReason_DUPLICATE_QUOTE
QuoteRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteRejectReason_INVALID_BID_ASK_SPREAD
QuoteRejectReason_INVALID_PRICE = cvar.QuoteRejectReason_INVALID_PRICE
QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
QuoteResponseLevel_NO_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_NO_ACKNOWLEDGEMENT
QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = cvar.QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES
QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES = cvar.QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES
QuoteRequestType_MANUAL = cvar.QuoteRequestType_MANUAL
QuoteRequestType_AUTOMATIC = cvar.QuoteRequestType_AUTOMATIC
SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS
SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED
SecurityRequestType_REQUEST_LIST_SECURITY_TYPES = cvar.SecurityRequestType_REQUEST_LIST_SECURITY_TYPES
SecurityRequestType_REQUEST_LIST_SECURITIES = cvar.SecurityRequestType_REQUEST_LIST_SECURITIES
SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS = cvar.SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS
SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE = cvar.SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE
SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST
SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST
SecurityResponseType_REJECT_SECURITY_PROPOSAL = cvar.SecurityResponseType_REJECT_SECURITY_PROPOSAL
SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA = cvar.SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA
SecurityTradingStatus_OPENING_DELAY = cvar.SecurityTradingStatus_OPENING_DELAY
SecurityTradingStatus_TRADING_HALT = cvar.SecurityTradingStatus_TRADING_HALT
SecurityTradingStatus_RESUME = cvar.SecurityTradingStatus_RESUME
SecurityTradingStatus_NO_OPEN_NO_RESUME = cvar.SecurityTradingStatus_NO_OPEN_NO_RESUME
SecurityTradingStatus_PRICE_INDICATION = cvar.SecurityTradingStatus_PRICE_INDICATION
SecurityTradingStatus_TRADING_RANGE_INDICATION = cvar.SecurityTradingStatus_TRADING_RANGE_INDICATION
SecurityTradingStatus_MARKET_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_IMBALANCE_BUY
SecurityTradingStatus_MARKET_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_IMBALANCE_SELL
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY
HaltReason_ORDER_IMBALANCE = cvar.HaltReason_ORDER_IMBALANCE
HaltReason_EQUIPMENT_CHANGEOVER = cvar.HaltReason_EQUIPMENT_CHANGEOVER
HaltReason_NEWS_PENDING = cvar.HaltReason_NEWS_PENDING
HaltReason_NEWS_DISSEMINATION = cvar.HaltReason_NEWS_DISSEMINATION
HaltReason_ORDER_INFLUX = cvar.HaltReason_ORDER_INFLUX
HaltReason_ADDITIONAL_INFORMATION = cvar.HaltReason_ADDITIONAL_INFORMATION
Adjustment_CANCEL = cvar.Adjustment_CANCEL
Adjustment_ERROR = cvar.Adjustment_ERROR
Adjustment_CORRECTION = cvar.Adjustment_CORRECTION
TradSesMethod_ELECTRONIC = cvar.TradSesMethod_ELECTRONIC
TradSesMethod_OPEN_OUTCRY = cvar.TradSesMethod_OPEN_OUTCRY
TradSesMethod_TWO_PARTY = cvar.TradSesMethod_TWO_PARTY
TradSesMode_TESTING = cvar.TradSesMode_TESTING
TradSesMode_SIMULATED = cvar.TradSesMode_SIMULATED
TradSesMode_PRODUCTION = cvar.TradSesMode_PRODUCTION
TradSesStatus_UNKNOWN = cvar.TradSesStatus_UNKNOWN
TradSesStatus_HALTED = cvar.TradSesStatus_HALTED
TradSesStatus_OPEN = cvar.TradSesStatus_OPEN
TradSesStatus_CLOSED = cvar.TradSesStatus_CLOSED
TradSesStatus_PRE_OPEN = cvar.TradSesStatus_PRE_OPEN
TradSesStatus_PRE_CLOSE = cvar.TradSesStatus_PRE_CLOSE
TradSesStatus_REQUEST_REJECTED = cvar.TradSesStatus_REQUEST_REJECTED
MessageEncoding_ISO_2022_JP = cvar.MessageEncoding_ISO_2022_JP
MessageEncoding_EUC_JP = cvar.MessageEncoding_EUC_JP
MessageEncoding_SHIFT_JIS = cvar.MessageEncoding_SHIFT_JIS
MessageEncoding_UTF_8 = cvar.MessageEncoding_UTF_8
QuoteEntryRejectReason_UNKNOWN_SYMBOL = cvar.QuoteEntryRejectReason_UNKNOWN_SYMBOL
QuoteEntryRejectReason_EXCHANGE_CLOSED = cvar.QuoteEntryRejectReason_EXCHANGE_CLOSED
QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT = cvar.QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT
QuoteEntryRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteEntryRejectReason_TOO_LATE_TO_ENTER
QuoteEntryRejectReason_UNKNOWN_QUOTE = cvar.QuoteEntryRejectReason_UNKNOWN_QUOTE
QuoteEntryRejectReason_DUPLICATE_QUOTE = cvar.QuoteEntryRejectReason_DUPLICATE_QUOTE
QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD
QuoteEntryRejectReason_INVALID_PRICE = cvar.QuoteEntryRejectReason_INVALID_PRICE
QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
SessionRejectReason_INVALID_TAG_NUMBER = cvar.SessionRejectReason_INVALID_TAG_NUMBER
SessionRejectReason_REQUIRED_TAG_MISSING = cvar.SessionRejectReason_REQUIRED_TAG_MISSING
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE
SessionRejectReason_UNDEFINED_TAG = cvar.SessionRejectReason_UNDEFINED_TAG
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE
SessionRejectReason_VALUE_IS_INCORRECT = cvar.SessionRejectReason_VALUE_IS_INCORRECT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE
SessionRejectReason_DECRYPTION_PROBLEM = cvar.SessionRejectReason_DECRYPTION_PROBLEM
SessionRejectReason_SIGNATURE_PROBLEM = cvar.SessionRejectReason_SIGNATURE_PROBLEM
SessionRejectReason_COMPID_PROBLEM = cvar.SessionRejectReason_COMPID_PROBLEM
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM
SessionRejectReason_INVALID_MSGTYPE = cvar.SessionRejectReason_INVALID_MSGTYPE
SessionRejectReason_XML_VALIDATION_ERROR = cvar.SessionRejectReason_XML_VALIDATION_ERROR
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER
SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER = cvar.SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP
SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER = cvar.SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER
SessionRejectReason_OTHER = cvar.SessionRejectReason_OTHER
BidRequestTransType_NEW = cvar.BidRequestTransType_NEW
BidRequestTransType_CANCEL = cvar.BidRequestTransType_CANCEL
ExecRestatementReason_GT_CORPORATE_ACTION = cvar.ExecRestatementReason_GT_CORPORATE_ACTION
ExecRestatementReason_GT_RENEWAL_RESTATEMENT = cvar.ExecRestatementReason_GT_RENEWAL_RESTATEMENT
ExecRestatementReason_VERBAL_CHANGE = cvar.ExecRestatementReason_VERBAL_CHANGE
ExecRestatementReason_REPRICING_OF_ORDER = cvar.ExecRestatementReason_REPRICING_OF_ORDER
ExecRestatementReason_BROKER_OPTION = cvar.ExecRestatementReason_BROKER_OPTION
ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY = cvar.ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY
ExecRestatementReason_CANCEL_ON_TRADING_HALT = cvar.ExecRestatementReason_CANCEL_ON_TRADING_HALT
ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE
ExecRestatementReason_MARKET_OPTION = cvar.ExecRestatementReason_MARKET_OPTION
ExecRestatementReason_CANCELED_NOT_BEST = cvar.ExecRestatementReason_CANCELED_NOT_BEST
BusinessRejectReason_OTHER = cvar.BusinessRejectReason_OTHER
BusinessRejectReason_UNKOWN_ID = cvar.BusinessRejectReason_UNKOWN_ID
BusinessRejectReason_UNKNOWN_SECURITY = cvar.BusinessRejectReason_UNKNOWN_SECURITY
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE
BusinessRejectReason_APPLICATION_NOT_AVAILABLE = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING
BusinessRejectReason_NOT_AUTHORIZED = cvar.BusinessRejectReason_NOT_AUTHORIZED
BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = cvar.BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME
MsgDirection_SEND = cvar.MsgDirection_SEND
MsgDirection_RECEIVE = cvar.MsgDirection_RECEIVE
DiscretionInst_RELATED_TO_DISPLAYED_PRICE = cvar.DiscretionInst_RELATED_TO_DISPLAYED_PRICE
DiscretionInst_RELATED_TO_MARKET_PRICE = cvar.DiscretionInst_RELATED_TO_MARKET_PRICE
DiscretionInst_RELATED_TO_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_PRIMARY_PRICE
DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE
DiscretionInst_RELATED_TO_MIDPOINT_PRICE = cvar.DiscretionInst_RELATED_TO_MIDPOINT_PRICE
DiscretionInst_RELATED_TO_LAST_TRADE_PRICE = cvar.DiscretionInst_RELATED_TO_LAST_TRADE_PRICE
DiscretionInst_RELATED_TO_VWAP = cvar.DiscretionInst_RELATED_TO_VWAP
BidType_NON_DISCLOSED = cvar.BidType_NON_DISCLOSED
BidType_DISCLOSED_STYLE = cvar.BidType_DISCLOSED_STYLE
BidType_NO_BIDDING_PROCESS = cvar.BidType_NO_BIDDING_PROCESS
BidDescriptorType_SECTOR = cvar.BidDescriptorType_SECTOR
BidDescriptorType_COUNTRY = cvar.BidDescriptorType_COUNTRY
BidDescriptorType_INDEX = cvar.BidDescriptorType_INDEX
SideValueInd_SIDEVALUE1 = cvar.SideValueInd_SIDEVALUE1
SideValueInd_SIDEVALUE2 = cvar.SideValueInd_SIDEVALUE2
LiquidityIndType_FIVEDAY_MOVING_AVERAGE = cvar.LiquidityIndType_FIVEDAY_MOVING_AVERAGE
LiquidityIndType_TWENTYDAY_MOVING_AVERAGE = cvar.LiquidityIndType_TWENTYDAY_MOVING_AVERAGE
LiquidityIndType_NORMAL_MARKET_SIZE = cvar.LiquidityIndType_NORMAL_MARKET_SIZE
LiquidityIndType_OTHER = cvar.LiquidityIndType_OTHER
ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST = cvar.ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST
ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS = cvar.ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS
ProgRptReqs_REAL_TIME_EXECUTION_REPORTS = cvar.ProgRptReqs_REAL_TIME_EXECUTION_REPORTS
IncTaxInd_NET = cvar.IncTaxInd_NET
IncTaxInd_GROSS = cvar.IncTaxInd_GROSS
BidTradeType_RISK_TRADE = cvar.BidTradeType_RISK_TRADE
BidTradeType_VWAP_GUARANTEE = cvar.BidTradeType_VWAP_GUARANTEE
BidTradeType_AGENCY = cvar.BidTradeType_AGENCY
BidTradeType_GUARANTEED_CLOSE = cvar.BidTradeType_GUARANTEED_CLOSE
BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION = cvar.BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION
BasisPxType_CLOSING_PRICE = cvar.BasisPxType_CLOSING_PRICE
BasisPxType_CURRENT_PRICE = cvar.BasisPxType_CURRENT_PRICE
BasisPxType_SQ = cvar.BasisPxType_SQ
BasisPxType_VWAP_THROUGH_A_DAY = cvar.BasisPxType_VWAP_THROUGH_A_DAY
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION
BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI
BasisPxType_STRIKE = cvar.BasisPxType_STRIKE
BasisPxType_OPEN = cvar.BasisPxType_OPEN
BasisPxType_OTHERS = cvar.BasisPxType_OTHERS
PriceType_PERCENTAGE = cvar.PriceType_PERCENTAGE
PriceType_PER_UNIT = cvar.PriceType_PER_UNIT
PriceType_FIXED_AMOUNT = cvar.PriceType_FIXED_AMOUNT
PriceType_DISCOUNT = cvar.PriceType_DISCOUNT
PriceType_PREMIUM = cvar.PriceType_PREMIUM
PriceType_SPREAD = cvar.PriceType_SPREAD
PriceType_TED_PRICE = cvar.PriceType_TED_PRICE
PriceType_TED_YIELD = cvar.PriceType_TED_YIELD
PriceType_YIELD = cvar.PriceType_YIELD
GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = cvar.GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION
GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES = cvar.GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES
GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE = cvar.GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE
ListStatusType_ACK = cvar.ListStatusType_ACK
ListStatusType_RESPONSE = cvar.ListStatusType_RESPONSE
ListStatusType_TIMED = cvar.ListStatusType_TIMED
ListStatusType_EXECSTARTED = cvar.ListStatusType_EXECSTARTED
ListStatusType_ALLDONE = cvar.ListStatusType_ALLDONE
ListStatusType_ALERT = cvar.ListStatusType_ALERT
NetGrossInd_NET = cvar.NetGrossInd_NET
NetGrossInd_GROSS = cvar.NetGrossInd_GROSS
ListOrderStatus_INBIDDINGPROCESS = cvar.ListOrderStatus_INBIDDINGPROCESS
ListOrderStatus_RECEIVEDFOREXECUTION = cvar.ListOrderStatus_RECEIVEDFOREXECUTION
ListOrderStatus_EXECUTING = cvar.ListOrderStatus_EXECUTING
ListOrderStatus_CANCELING = cvar.ListOrderStatus_CANCELING
ListOrderStatus_ALERT = cvar.ListOrderStatus_ALERT
ListOrderStatus_ALL_DONE = cvar.ListOrderStatus_ALL_DONE
ListOrderStatus_REJECT = cvar.ListOrderStatus_REJECT
ListExecInstType_IMMEDIATE = cvar.ListExecInstType_IMMEDIATE
ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION = cvar.ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW
CxlRejResponseTo_ORDER_CANCEL_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REQUEST
CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST
MultiLegReportingType_SINGLE_SECURITY = cvar.MultiLegReportingType_SINGLE_SECURITY
MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
MultiLegReportingType_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_MULTI_LEG_SECURITY
PartyIDSource_BIC = cvar.PartyIDSource_BIC
PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = cvar.PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER
PartyIDSource_PROPRIETARY_CUSTOM_CODE = cvar.PartyIDSource_PROPRIETARY_CUSTOM_CODE
PartyIDSource_ISO_COUNTRY_CODE = cvar.PartyIDSource_ISO_COUNTRY_CODE
PartyIDSource_SETTLEMENT_ENTITY_LOCATION = cvar.PartyIDSource_SETTLEMENT_ENTITY_LOCATION
PartyIDSource_MIC = cvar.PartyIDSource_MIC
PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE = cvar.PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE
PartyIDSource_KOREAN_INVESTOR_ID = cvar.PartyIDSource_KOREAN_INVESTOR_ID
PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID = cvar.PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID
PartyIDSource_TAIWANESE_TRADING_ACCOUNT = cvar.PartyIDSource_TAIWANESE_TRADING_ACCOUNT
PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER = cvar.PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER
PartyIDSource_CHINESE_B_SHARE = cvar.PartyIDSource_CHINESE_B_SHARE
PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = cvar.PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER
PartyIDSource_US_SOCIAL_SECURITY_NUMBER = cvar.PartyIDSource_US_SOCIAL_SECURITY_NUMBER
PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER = cvar.PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER
PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER = cvar.PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER
PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER = cvar.PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER
PartyIDSource_DIRECTED_BROKER = cvar.PartyIDSource_DIRECTED_BROKER
PartyRole_EXECUTING_FIRM = cvar.PartyRole_EXECUTING_FIRM
PartyRole_BROKER_OF_CREDIT = cvar.PartyRole_BROKER_OF_CREDIT
PartyRole_CLIENT_ID = cvar.PartyRole_CLIENT_ID
PartyRole_CLEARING_FIRM = cvar.PartyRole_CLEARING_FIRM
PartyRole_INVESTOR_ID = cvar.PartyRole_INVESTOR_ID
PartyRole_INTRODUCING_FIRM = cvar.PartyRole_INTRODUCING_FIRM
PartyRole_ENTERING_FIRM = cvar.PartyRole_ENTERING_FIRM
PartyRole_LOCATE_LENDING_FIRM = cvar.PartyRole_LOCATE_LENDING_FIRM
PartyRole_FUND_MANAGER_CLIENT_ID = cvar.PartyRole_FUND_MANAGER_CLIENT_ID
Product_AGENCY = cvar.Product_AGENCY
Product_COMMODITY = cvar.Product_COMMODITY
Product_CORPORATE = cvar.Product_CORPORATE
Product_CURRENCY = cvar.Product_CURRENCY
Product_EQUITY = cvar.Product_EQUITY
Product_GOVERNMENT = cvar.Product_GOVERNMENT
Product_INDEX = cvar.Product_INDEX
Product_LOAN = cvar.Product_LOAN
Product_MONEYMARKET = cvar.Product_MONEYMARKET
QuantityType_SHARES = cvar.QuantityType_SHARES
QuantityType_BONDS = cvar.QuantityType_BONDS
QuantityType_CURRENTFACE = cvar.QuantityType_CURRENTFACE
QuantityType_ORIGINALFACE = cvar.QuantityType_ORIGINALFACE
QuantityType_CURRENCY = cvar.QuantityType_CURRENCY
QuantityType_CONTRACTS = cvar.QuantityType_CONTRACTS
QuantityType_OTHER = cvar.QuantityType_OTHER
QuantityType_PAR = cvar.QuantityType_PAR
RoundingDirection_ROUND_TO_NEAREST = cvar.RoundingDirection_ROUND_TO_NEAREST
RoundingDirection_ROUND_DOWN = cvar.RoundingDirection_ROUND_DOWN
RoundingDirection_ROUND_UP = cvar.RoundingDirection_ROUND_UP
DistribPaymentMethod_CREST = cvar.DistribPaymentMethod_CREST
DistribPaymentMethod_NSCC = cvar.DistribPaymentMethod_NSCC
DistribPaymentMethod_EUROCLEAR = cvar.DistribPaymentMethod_EUROCLEAR
DistribPaymentMethod_CLEARSTREAM = cvar.DistribPaymentMethod_CLEARSTREAM
DistribPaymentMethod_CHEQUE = cvar.DistribPaymentMethod_CHEQUE
DistribPaymentMethod_TELEGRAPHIC_TRANSFER = cvar.DistribPaymentMethod_TELEGRAPHIC_TRANSFER
DistribPaymentMethod_FEDWIRE = cvar.DistribPaymentMethod_FEDWIRE
DistribPaymentMethod_DIRECT_CREDIT = cvar.DistribPaymentMethod_DIRECT_CREDIT
DistribPaymentMethod_ACH_CREDIT = cvar.DistribPaymentMethod_ACH_CREDIT
CancellationRights_NO_EXECUTION_ONLY = cvar.CancellationRights_NO_EXECUTION_ONLY
CancellationRights_NO_WAIVER_AGREEMENT = cvar.CancellationRights_NO_WAIVER_AGREEMENT
CancellationRights_NO_INSTITUTIONAL = cvar.CancellationRights_NO_INSTITUTIONAL
MoneyLaunderingStatus_PASSED = cvar.MoneyLaunderingStatus_PASSED
MoneyLaunderingStatus_NOT_CHECKED = cvar.MoneyLaunderingStatus_NOT_CHECKED
MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT = cvar.MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT
MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION = cvar.MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION
MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION = cvar.MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION
ExecPriceType_BID_PRICE = cvar.ExecPriceType_BID_PRICE
ExecPriceType_CREATION_PRICE = cvar.ExecPriceType_CREATION_PRICE
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT
ExecPriceType_OFFER_PRICE = cvar.ExecPriceType_OFFER_PRICE
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT
ExecPriceType_SINGLE_PRICE = cvar.ExecPriceType_SINGLE_PRICE
TradeReportTransType_NEW = cvar.TradeReportTransType_NEW
TradeReportTransType_CANCEL = cvar.TradeReportTransType_CANCEL
TradeReportTransType_REPLACE = cvar.TradeReportTransType_REPLACE
TradeReportTransType_RELEASE = cvar.TradeReportTransType_RELEASE
TradeReportTransType_REVERSE = cvar.TradeReportTransType_REVERSE
PaymentMethod_CREST = cvar.PaymentMethod_CREST
PaymentMethod_NSCC = cvar.PaymentMethod_NSCC
PaymentMethod_EUROCLEAR = cvar.PaymentMethod_EUROCLEAR
PaymentMethod_CLEARSTREAM = cvar.PaymentMethod_CLEARSTREAM
PaymentMethod_CHEQUE = cvar.PaymentMethod_CHEQUE
PaymentMethod_TELEGRAPHIC_TRANSFER = cvar.PaymentMethod_TELEGRAPHIC_TRANSFER
PaymentMethod_FEDWIRE = cvar.PaymentMethod_FEDWIRE
PaymentMethod_DEBIT_CARD = cvar.PaymentMethod_DEBIT_CARD
PaymentMethod_DIRECT_DEBIT = cvar.PaymentMethod_DIRECT_DEBIT
TaxAdvantageType_NONE = cvar.TaxAdvantageType_NONE
TaxAdvantageType_MAXI_ISA = cvar.TaxAdvantageType_MAXI_ISA
TaxAdvantageType_TESSA = cvar.TaxAdvantageType_TESSA
TaxAdvantageType_MINI_CASH_ISA = cvar.TaxAdvantageType_MINI_CASH_ISA
TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA = cvar.TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA
TaxAdvantageType_MINI_INSURANCE_ISA = cvar.TaxAdvantageType_MINI_INSURANCE_ISA
TaxAdvantageType_CURRENT_YEAR_PAYMENT = cvar.TaxAdvantageType_CURRENT_YEAR_PAYMENT
TaxAdvantageType_PRIOR_YEAR_PAYMENT = cvar.TaxAdvantageType_PRIOR_YEAR_PAYMENT
TaxAdvantageType_ASSET_TRANSFER = cvar.TaxAdvantageType_ASSET_TRANSFER
TaxAdvantageType_EMPLOYEE_PRIOR_YEAR = cvar.TaxAdvantageType_EMPLOYEE_PRIOR_YEAR
TaxAdvantageType_OTHER = cvar.TaxAdvantageType_OTHER
FundRenewWaiv_YES = cvar.FundRenewWaiv_YES
FundRenewWaiv_NO = cvar.FundRenewWaiv_NO
RegistStatus_ACCEPTED = cvar.RegistStatus_ACCEPTED
RegistStatus_REJECTED = cvar.RegistStatus_REJECTED
RegistStatus_HELD = cvar.RegistStatus_HELD
RegistStatus_REMINDER = cvar.RegistStatus_REMINDER
RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS
RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE
RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM
RegistRejReasonCode_OTHER = cvar.RegistRejReasonCode_OTHER
RegistTransType_NEW = cvar.RegistTransType_NEW
RegistTransType_REPLACE = cvar.RegistTransType_REPLACE
RegistTransType_CANCEL = cvar.RegistTransType_CANCEL
OwnershipType_JOINT_INVESTORS = cvar.OwnershipType_JOINT_INVESTORS
OwnershipType_TENANTS_IN_COMMON = cvar.OwnershipType_TENANTS_IN_COMMON
OwnershipType_JOINT_TRUSTEES = cvar.OwnershipType_JOINT_TRUSTEES
ContAmtType_COMMISSION_AMOUNT = cvar.ContAmtType_COMMISSION_AMOUNT
ContAmtType_COMMISSION_PERCENT = cvar.ContAmtType_COMMISSION_PERCENT
ContAmtType_INITIAL_CHARGE_AMOUNT = cvar.ContAmtType_INITIAL_CHARGE_AMOUNT
ContAmtType_INITIAL_CHARGE_PERCENT = cvar.ContAmtType_INITIAL_CHARGE_PERCENT
ContAmtType_DISCOUNT_AMOUNT = cvar.ContAmtType_DISCOUNT_AMOUNT
ContAmtType_DISCOUNT_PERCENT = cvar.ContAmtType_DISCOUNT_PERCENT
ContAmtType_DILUTION_LEVY_AMOUNT = cvar.ContAmtType_DILUTION_LEVY_AMOUNT
ContAmtType_DILUTION_LEVY_PERCENT = cvar.ContAmtType_DILUTION_LEVY_PERCENT
ContAmtType_EXIT_CHARGE_AMOUNT = cvar.ContAmtType_EXIT_CHARGE_AMOUNT
OwnerType_INDIVIDUAL_INVESTOR = cvar.OwnerType_INDIVIDUAL_INVESTOR
OwnerType_PUBLIC_COMPANY = cvar.OwnerType_PUBLIC_COMPANY
OwnerType_PRIVATE_COMPANY = cvar.OwnerType_PRIVATE_COMPANY
OwnerType_INDIVIDUAL_TRUSTEE = cvar.OwnerType_INDIVIDUAL_TRUSTEE
OwnerType_COMPANY_TRUSTEE = cvar.OwnerType_COMPANY_TRUSTEE
OwnerType_PENSION_PLAN = cvar.OwnerType_PENSION_PLAN
OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = cvar.OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT
OwnerType_TRUSTS = cvar.OwnerType_TRUSTS
OwnerType_FIDUCIARIES = cvar.OwnerType_FIDUCIARIES
OrderCapacity_AGENCY = cvar.OrderCapacity_AGENCY
OrderCapacity_PROPRIETARY = cvar.OrderCapacity_PROPRIETARY
OrderCapacity_INDIVIDUAL = cvar.OrderCapacity_INDIVIDUAL
OrderCapacity_PRINCIPAL = cvar.OrderCapacity_PRINCIPAL
OrderCapacity_RISKLESS_PRINCIPAL = cvar.OrderCapacity_RISKLESS_PRINCIPAL
OrderCapacity_AGENT_FOR_OTHER_MEMBER = cvar.OrderCapacity_AGENT_FOR_OTHER_MEMBER
OrderRestrictions_PROGRAM_TRADE = cvar.OrderRestrictions_PROGRAM_TRADE
OrderRestrictions_INDEX_ARBITRAGE = cvar.OrderRestrictions_INDEX_ARBITRAGE
OrderRestrictions_NON_INDEX_ARBITRAGE = cvar.OrderRestrictions_NON_INDEX_ARBITRAGE
OrderRestrictions_COMPETING_MARKET_MAKER = cvar.OrderRestrictions_COMPETING_MARKET_MAKER
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY
OrderRestrictions_FOREIGN_ENTITY = cvar.OrderRestrictions_FOREIGN_ENTITY
OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT = cvar.OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT
OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE = cvar.OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE
OrderRestrictions_RISKLESS_ARBITRAGE = cvar.OrderRestrictions_RISKLESS_ARBITRAGE
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE
MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelRequestType_CANCEL_ALL_ORDERS = cvar.MassCancelRequestType_CANCEL_ALL_ORDERS
MassCancelResponse_CANCEL_REQUEST_REJECTED = cvar.MassCancelResponse_CANCEL_REQUEST_REJECTED
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE
MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelResponse_CANCEL_ALL_ORDERS = cvar.MassCancelResponse_CANCEL_ALL_ORDERS
MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED = cvar.MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING
MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
QuoteType_INDICATIVE = cvar.QuoteType_INDICATIVE
QuoteType_TRADEABLE = cvar.QuoteType_TRADEABLE
QuoteType_RESTRICTED_TRADEABLE = cvar.QuoteType_RESTRICTED_TRADEABLE
QuoteType_COUNTER = cvar.QuoteType_COUNTER
CashMargin_CASH = cvar.CashMargin_CASH
CashMargin_MARGIN_OPEN = cvar.CashMargin_MARGIN_OPEN
CashMargin_MARGIN_CLOSE = cvar.CashMargin_MARGIN_CLOSE
Scope_LOCAL = cvar.Scope_LOCAL
Scope_NATIONAL = cvar.Scope_NATIONAL
Scope_GLOBAL = cvar.Scope_GLOBAL
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED
CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE = cvar.CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE
CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE = cvar.CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE
CrossPrioritization_NONE = cvar.CrossPrioritization_NONE
CrossPrioritization_BUY_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_BUY_SIDE_IS_PRIORITIZED
CrossPrioritization_SELL_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_SELL_SIDE_IS_PRIORITIZED
NoSides_ONE_SIDE = cvar.NoSides_ONE_SIDE
NoSides_BOTH_SIDES = cvar.NoSides_BOTH_SIDES
SecurityListRequestType_SYMBOL = cvar.SecurityListRequestType_SYMBOL
SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE = cvar.SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE
SecurityListRequestType_PRODUCT = cvar.SecurityListRequestType_PRODUCT
SecurityListRequestType_TRADINGSESSIONID = cvar.SecurityListRequestType_TRADINGSESSIONID
SecurityListRequestType_ALL_SECURITIES = cvar.SecurityListRequestType_ALL_SECURITIES
SecurityRequestResult_VALID_REQUEST = cvar.SecurityRequestResult_VALID_REQUEST
SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST
SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA = cvar.SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA
SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = cvar.SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA
SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = cvar.SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE
SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = cvar.SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED
MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY = cvar.MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY
MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY
TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID = cvar.TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID
TradeRequestType_ALL_TRADES = cvar.TradeRequestType_ALL_TRADES
TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST = cvar.TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST
TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA
MatchStatus_COMPARED_MATCHED_OR_AFFIRMED = cvar.MatchStatus_COMPARED_MATCHED_OR_AFFIRMED
MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED = cvar.MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED
MatchStatus_ADVISORY_OR_ALERT = cvar.MatchStatus_ADVISORY_OR_ALERT
ClearingInstruction_PROCESS_NORMALLY = cvar.ClearingInstruction_PROCESS_NORMALLY
ClearingInstruction_EXCLUDE_FROM_ALL_NETTING = cvar.ClearingInstruction_EXCLUDE_FROM_ALL_NETTING
ClearingInstruction_BILATERAL_NETTING_ONLY = cvar.ClearingInstruction_BILATERAL_NETTING_ONLY
ClearingInstruction_EX_CLEARING = cvar.ClearingInstruction_EX_CLEARING
ClearingInstruction_SPECIAL_TRADE = cvar.ClearingInstruction_SPECIAL_TRADE
ClearingInstruction_MULTILATERAL_NETTING = cvar.ClearingInstruction_MULTILATERAL_NETTING
ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY
ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY
ClearingInstruction_MANUAL_MODE = cvar.ClearingInstruction_MANUAL_MODE
ClearingInstruction_AUTOMATIC_POSTING_MODE = cvar.ClearingInstruction_AUTOMATIC_POSTING_MODE
AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS
AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS
AccountType_HOUSE_TRADER = cvar.AccountType_HOUSE_TRADER
AccountType_FLOOR_TRADER = cvar.AccountType_FLOOR_TRADER
AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED
AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = cvar.AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED
AccountType_JOINT_BACKOFFICE_ACCOUNT = cvar.AccountType_JOINT_BACKOFFICE_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
CustOrderCapacity_ALL_OTHER = cvar.CustOrderCapacity_ALL_OTHER
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION
MassStatusReqType_STATUS_FOR_ALL_ORDERS = cvar.MassStatusReqType_STATUS_FOR_ALL_ORDERS
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID
DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR = cvar.DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR
DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING = cvar.DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING
DayBookingInst_ACCUMULATE = cvar.DayBookingInst_ACCUMULATE
BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = cvar.BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT
BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER = cvar.BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER
BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE = cvar.BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE
PreallocMethod_PRO_RATA = cvar.PreallocMethod_PRO_RATA
PreallocMethod_DO_NOT_PRO_RATA = cvar.PreallocMethod_DO_NOT_PRO_RATA
AllocType_CALCULATED = cvar.AllocType_CALCULATED
AllocType_PRELIMINARY = cvar.AllocType_PRELIMINARY
AllocType_READY_TO_BOOK_SINGLE_ORDER = cvar.AllocType_READY_TO_BOOK_SINGLE_ORDER
AllocType_WAREHOUSE_INSTRUCTION = cvar.AllocType_WAREHOUSE_INSTRUCTION
AllocType_REQUEST_TO_INTERMEDIARY = cvar.AllocType_REQUEST_TO_INTERMEDIARY
ClearingFeeIndicator_CBOE_MEMBER = cvar.ClearingFeeIndicator_CBOE_MEMBER
ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER = cvar.ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER
ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER = cvar.ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER
ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS = cvar.ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS
ClearingFeeIndicator_FIRMS_106H_AND_106J = cvar.ClearingFeeIndicator_FIRMS_106H_AND_106J
ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS = cvar.ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS
ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES = cvar.ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES
ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES = cvar.ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES
PriorityIndicator_PRIORITY_UNCHANGED = cvar.PriorityIndicator_PRIORITY_UNCHANGED
PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = cvar.PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE
QuoteRequestRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRequestRejectReason_UNKNOWN_SYMBOL
QuoteRequestRejectReason_EXCHANGE_CLOSED = cvar.QuoteRequestRejectReason_EXCHANGE_CLOSED
QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRequestRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRequestRejectReason_TOO_LATE_TO_ENTER
QuoteRequestRejectReason_INVALID_PRICE = cvar.QuoteRequestRejectReason_INVALID_PRICE
QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE = cvar.QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE
QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY = cvar.QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY
QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT = cvar.QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT
QuoteRequestRejectReason_NO_INVENTORY = cvar.QuoteRequestRejectReason_NO_INVENTORY
AcctIDSource_BIC = cvar.AcctIDSource_BIC
AcctIDSource_SID_CODE = cvar.AcctIDSource_SID_CODE
AcctIDSource_TFM = cvar.AcctIDSource_TFM
AcctIDSource_OMGEO = cvar.AcctIDSource_OMGEO
AcctIDSource_DTCC_CODE = cvar.AcctIDSource_DTCC_CODE
ConfirmStatus_RECEIVED = cvar.ConfirmStatus_RECEIVED
ConfirmStatus_MISMATCHED_ACCOUNT = cvar.ConfirmStatus_MISMATCHED_ACCOUNT
ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmStatus_CONFIRMED = cvar.ConfirmStatus_CONFIRMED
ConfirmStatus_REQUEST_REJECTED = cvar.ConfirmStatus_REQUEST_REJECTED
ConfirmTransType_NEW = cvar.ConfirmTransType_NEW
ConfirmTransType_REPLACE = cvar.ConfirmTransType_REPLACE
ConfirmTransType_CANCEL = cvar.ConfirmTransType_CANCEL
DeliveryForm_BOOKENTRY = cvar.DeliveryForm_BOOKENTRY
DeliveryForm_BEARER = cvar.DeliveryForm_BEARER
LegSwapType_PAR_FOR_PAR = cvar.LegSwapType_PAR_FOR_PAR
LegSwapType_MODIFIED_DURATION = cvar.LegSwapType_MODIFIED_DURATION
LegSwapType_RISK = cvar.LegSwapType_RISK
LegSwapType_PROCEEDS = cvar.LegSwapType_PROCEEDS
QuotePriceType_PERCENT = cvar.QuotePriceType_PERCENT
QuotePriceType_PER_SHARE = cvar.QuotePriceType_PER_SHARE
QuotePriceType_FIXED_AMOUNT = cvar.QuotePriceType_FIXED_AMOUNT
QuotePriceType_DISCOUNT = cvar.QuotePriceType_DISCOUNT
QuotePriceType_PREMIUM = cvar.QuotePriceType_PREMIUM
QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK = cvar.QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK
QuotePriceType_TED_PRICE = cvar.QuotePriceType_TED_PRICE
QuotePriceType_TED_YIELD = cvar.QuotePriceType_TED_YIELD
QuotePriceType_YIELD_SPREAD = cvar.QuotePriceType_YIELD_SPREAD
QuoteRespType_HIT_LIFT = cvar.QuoteRespType_HIT_LIFT
QuoteRespType_COUNTER = cvar.QuoteRespType_COUNTER
QuoteRespType_EXPIRED = cvar.QuoteRespType_EXPIRED
QuoteRespType_COVER = cvar.QuoteRespType_COVER
QuoteRespType_DONE_AWAY = cvar.QuoteRespType_DONE_AWAY
QuoteRespType_PASS = cvar.QuoteRespType_PASS
PosType_TRANSACTION_QUANTITY = cvar.PosType_TRANSACTION_QUANTITY
PosType_INTRA_SPREAD_QTY = cvar.PosType_INTRA_SPREAD_QTY
PosType_INTER_SPREAD_QTY = cvar.PosType_INTER_SPREAD_QTY
PosType_END_OF_DAY_QTY = cvar.PosType_END_OF_DAY_QTY
PosType_START_OF_DAY_QTY = cvar.PosType_START_OF_DAY_QTY
PosType_OPTION_EXERCISE_QTY = cvar.PosType_OPTION_EXERCISE_QTY
PosType_OPTION_ASSIGNMENT = cvar.PosType_OPTION_ASSIGNMENT
PosType_TRANSACTION_FROM_EXERCISE = cvar.PosType_TRANSACTION_FROM_EXERCISE
PosType_TRANSACTION_FROM_ASSIGNMENT = cvar.PosType_TRANSACTION_FROM_ASSIGNMENT
PosType_PIT_TRADE_QTY = cvar.PosType_PIT_TRADE_QTY
PosType_TRANSFER_TRADE_QTY = cvar.PosType_TRANSFER_TRADE_QTY
PosType_ELECTRONIC_TRADE_QTY = cvar.PosType_ELECTRONIC_TRADE_QTY
PosType_ALLOCATION_TRADE_QTY = cvar.PosType_ALLOCATION_TRADE_QTY
PosType_ADJUSTMENT_QTY = cvar.PosType_ADJUSTMENT_QTY
PosType_AS_OF_TRADE_QTY = cvar.PosType_AS_OF_TRADE_QTY
PosType_DELIVERY_QTY = cvar.PosType_DELIVERY_QTY
PosType_TOTAL_TRANSACTION_QTY = cvar.PosType_TOTAL_TRANSACTION_QTY
PosType_CROSS_MARGIN_QTY = cvar.PosType_CROSS_MARGIN_QTY
PosType_INTEGRAL_SPLIT = cvar.PosType_INTEGRAL_SPLIT
PosQtyStatus_SUBMITTED = cvar.PosQtyStatus_SUBMITTED
PosQtyStatus_ACCEPTED = cvar.PosQtyStatus_ACCEPTED
PosQtyStatus_REJECTED = cvar.PosQtyStatus_REJECTED
PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT
PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT
PosAmtType_TRADE_VARIATION_AMOUNT = cvar.PosAmtType_TRADE_VARIATION_AMOUNT
PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT
PosAmtType_PREMIUM_AMOUNT = cvar.PosAmtType_PREMIUM_AMOUNT
PosAmtType_CASH_RESIDUAL_AMOUNT = cvar.PosAmtType_CASH_RESIDUAL_AMOUNT
PosAmtType_CASH_AMOUNT = cvar.PosAmtType_CASH_AMOUNT
PosAmtType_VALUE_ADJUSTED_AMOUNT = cvar.PosAmtType_VALUE_ADJUSTED_AMOUNT
PosTransType_EXERCISE = cvar.PosTransType_EXERCISE
PosTransType_DO_NOT_EXERCISE = cvar.PosTransType_DO_NOT_EXERCISE
PosTransType_POSITION_ADJUSTMENT = cvar.PosTransType_POSITION_ADJUSTMENT
PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION = cvar.PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION
PosTransType_PLEDGE = cvar.PosTransType_PLEDGE
PosMaintAction_NEW = cvar.PosMaintAction_NEW
PosMaintAction_REPLACE = cvar.PosMaintAction_REPLACE
PosMaintAction_CANCEL = cvar.PosMaintAction_CANCEL
AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION = cvar.AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION
AdjustmentType_DELTA_PLUS = cvar.AdjustmentType_DELTA_PLUS
AdjustmentType_DELTA_MINUS = cvar.AdjustmentType_DELTA_MINUS
AdjustmentType_FINAL = cvar.AdjustmentType_FINAL
PosMaintStatus_ACCEPTED = cvar.PosMaintStatus_ACCEPTED
PosMaintStatus_ACCEPTED_WITH_WARNINGS = cvar.PosMaintStatus_ACCEPTED_WITH_WARNINGS
PosMaintStatus_REJECTED = cvar.PosMaintStatus_REJECTED
PosMaintStatus_COMPLETED = cvar.PosMaintStatus_COMPLETED
PosMaintStatus_COMPLETED_WITH_WARNINGS = cvar.PosMaintStatus_COMPLETED_WITH_WARNINGS
PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS = cvar.PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS
PosMaintResult_REJECTED = cvar.PosMaintResult_REJECTED
PosReqType_POSITIONS = cvar.PosReqType_POSITIONS
PosReqType_TRADES = cvar.PosReqType_TRADES
PosReqType_EXERCISES = cvar.PosReqType_EXERCISES
PosReqType_ASSIGNMENTS = cvar.PosReqType_ASSIGNMENTS
ResponseTransportType_INBAND = cvar.ResponseTransportType_INBAND
ResponseTransportType_OUT_OF_BAND = cvar.ResponseTransportType_OUT_OF_BAND
PosReqResult_VALID_REQUEST = cvar.PosReqResult_VALID_REQUEST
PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST
PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = cvar.PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA
PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS = cvar.PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS
PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED = cvar.PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED
PosReqStatus_COMPLETED = cvar.PosReqStatus_COMPLETED
PosReqStatus_COMPLETED_WITH_WARNINGS = cvar.PosReqStatus_COMPLETED_WITH_WARNINGS
PosReqStatus_REJECTED = cvar.PosReqStatus_REJECTED
SettlPriceType_FINAL = cvar.SettlPriceType_FINAL
SettlPriceType_THEORETICAL = cvar.SettlPriceType_THEORETICAL
AssignmentMethod_RANDOM = cvar.AssignmentMethod_RANDOM
AssignmentMethod_PRORATA = cvar.AssignmentMethod_PRORATA
ExerciseMethod_AUTOMATIC = cvar.ExerciseMethod_AUTOMATIC
ExerciseMethod_MANUAL = cvar.ExerciseMethod_MANUAL
TradeRequestResult_SUCCESSFUL = cvar.TradeRequestResult_SUCCESSFUL
TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT
TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED = cvar.TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED
TradeRequestResult_INVALID_PARTIES = cvar.TradeRequestResult_INVALID_PARTIES
TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED
TradeRequestResult_INVALID_DESTINATION_REQUESTED = cvar.TradeRequestResult_INVALID_DESTINATION_REQUESTED
TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED = cvar.TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED
TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST = cvar.TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST
TradeRequestStatus_ACCEPTED = cvar.TradeRequestStatus_ACCEPTED
TradeRequestStatus_COMPLETED = cvar.TradeRequestStatus_COMPLETED
TradeRequestStatus_REJECTED = cvar.TradeRequestStatus_REJECTED
TradeReportRejectReason_SUCCESSFUL = cvar.TradeReportRejectReason_SUCCESSFUL
TradeReportRejectReason_INVALID_PARTY_INFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_INFORMATION
TradeReportRejectReason_UNKNOWN_INSTRUMENT = cvar.TradeReportRejectReason_UNKNOWN_INSTRUMENT
TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES = cvar.TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES
TradeReportRejectReason_INVALID_TRADE_TYPE = cvar.TradeReportRejectReason_INVALID_TRADE_TYPE
SideMultiLegReportingType_SINGLE_SECURITY = cvar.SideMultiLegReportingType_SINGLE_SECURITY
SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
SideMultiLegReportingType_MULTI_LEG_SECURITY = cvar.SideMultiLegReportingType_MULTI_LEG_SECURITY
TrdRegTimestampType_EXECUTION_TIME = cvar.TrdRegTimestampType_EXECUTION_TIME
TrdRegTimestampType_TIME_IN = cvar.TrdRegTimestampType_TIME_IN
TrdRegTimestampType_TIME_OUT = cvar.TrdRegTimestampType_TIME_OUT
TrdRegTimestampType_BROKER_RECEIPT = cvar.TrdRegTimestampType_BROKER_RECEIPT
TrdRegTimestampType_BROKER_EXECUTION = cvar.TrdRegTimestampType_BROKER_EXECUTION
ConfirmType_STATUS = cvar.ConfirmType_STATUS
ConfirmType_CONFIRMATION = cvar.ConfirmType_CONFIRMATION
ConfirmType_CONFIRMATION_REQUEST_REJECTED = cvar.ConfirmType_CONFIRMATION_REQUEST_REJECTED
ConfirmRejReason_MISMATCHED_ACCOUNT = cvar.ConfirmRejReason_MISMATCHED_ACCOUNT
ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS
BookingType_REGULAR_BOOKING = cvar.BookingType_REGULAR_BOOKING
BookingType_CFD = cvar.BookingType_CFD
BookingType_TOTAL_RETURN_SWAP = cvar.BookingType_TOTAL_RETURN_SWAP
AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS = cvar.AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS
AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED = cvar.AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED
AllocSettlInstType_FULL_DETAILS_PROVIDED = cvar.AllocSettlInstType_FULL_DETAILS_PROVIDED
AllocSettlInstType_SSI_DB_IDS_PROVIDED = cvar.AllocSettlInstType_SSI_DB_IDS_PROVIDED
AllocSettlInstType_PHONE_FOR_INSTRUCTIONS = cvar.AllocSettlInstType_PHONE_FOR_INSTRUCTIONS
DlvyInstType_SECURITIES = cvar.DlvyInstType_SECURITIES
DlvyInstType_CASH = cvar.DlvyInstType_CASH
TerminationType_OVERNIGHT = cvar.TerminationType_OVERNIGHT
TerminationType_TERM = cvar.TerminationType_TERM
TerminationType_FLEXIBLE = cvar.TerminationType_FLEXIBLE
TerminationType_OPEN = cvar.TerminationType_OPEN
SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST = cvar.SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST
SettlInstReqRejCode_UNKNOWN_ACCOUNT = cvar.SettlInstReqRejCode_UNKNOWN_ACCOUNT
SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = cvar.SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND
AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocReportType_WAREHOUSE_RECAP = cvar.AllocReportType_WAREHOUSE_RECAP
AllocReportType_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_REQUEST_TO_INTERMEDIARY
AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT = cvar.AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT
AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS = cvar.AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS
AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_HOUSE_TRADER = cvar.AllocAccountType_HOUSE_TRADER
AllocAccountType_FLOOR_TRADER = cvar.AllocAccountType_FLOOR_TRADER
AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED
AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = cvar.AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED
AllocAccountType_JOINT_BACKOFFICE_ACCOUNT = cvar.AllocAccountType_JOINT_BACKOFFICE_ACCOUNT
AllocIntermedReqType_PENDING_ACCEPT = cvar.AllocIntermedReqType_PENDING_ACCEPT
AllocIntermedReqType_PENDING_RELEASE = cvar.AllocIntermedReqType_PENDING_RELEASE
AllocIntermedReqType_PENDING_REVERSAL = cvar.AllocIntermedReqType_PENDING_REVERSAL
AllocIntermedReqType_ACCEPT = cvar.AllocIntermedReqType_ACCEPT
AllocIntermedReqType_BLOCK_LEVEL_REJECT = cvar.AllocIntermedReqType_BLOCK_LEVEL_REJECT
AllocIntermedReqType_ACCOUNT_LEVEL_REJECT = cvar.AllocIntermedReqType_ACCOUNT_LEVEL_REJECT
ApplQueueResolution_NO_ACTION_TAKEN = cvar.ApplQueueResolution_NO_ACTION_TAKEN
ApplQueueResolution_QUEUE_FLUSHED = cvar.ApplQueueResolution_QUEUE_FLUSHED
ApplQueueResolution_OVERLAY_LAST = cvar.ApplQueueResolution_OVERLAY_LAST
ApplQueueResolution_END_SESSION = cvar.ApplQueueResolution_END_SESSION
ApplQueueAction_NO_ACTION_TAKEN = cvar.ApplQueueAction_NO_ACTION_TAKEN
ApplQueueAction_QUEUE_FLUSHED = cvar.ApplQueueAction_QUEUE_FLUSHED
ApplQueueAction_OVERLAY_LAST = cvar.ApplQueueAction_OVERLAY_LAST
ApplQueueAction_END_SESSION = cvar.ApplQueueAction_END_SESSION
AvgPxIndicator_NO_AVERAGE_PRICING = cvar.AvgPxIndicator_NO_AVERAGE_PRICING
AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
TradeAllocIndicator_ALLOCATION_NOT_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_NOT_REQUIRED
TradeAllocIndicator_ALLOCATION_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_REQUIRED
TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = cvar.TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN
TrdType_REGULAR_TRADE = cvar.TrdType_REGULAR_TRADE
TrdType_BLOCK_TRADE = cvar.TrdType_BLOCK_TRADE
TrdType_EFP = cvar.TrdType_EFP
TrdType_TRANSFER = cvar.TrdType_TRANSFER
TrdType_LATE_TRADE = cvar.TrdType_LATE_TRADE
TrdType_T_TRADE = cvar.TrdType_T_TRADE
TrdType_WEIGHTED_AVERAGE_PRICE_TRADE = cvar.TrdType_WEIGHTED_AVERAGE_PRICE_TRADE
TrdType_BUNCHED_TRADE = cvar.TrdType_BUNCHED_TRADE
TrdType_LATE_BUNCHED_TRADE = cvar.TrdType_LATE_BUNCHED_TRADE
TrdType_PRIOR_REFERENCE_PRICE_TRADE = cvar.TrdType_PRIOR_REFERENCE_PRICE_TRADE
PegMoveType_FLOATING = cvar.PegMoveType_FLOATING
PegMoveType_FIXED = cvar.PegMoveType_FIXED
PegOffsetType_PRICE = cvar.PegOffsetType_PRICE
PegOffsetType_BASIS_POINTS = cvar.PegOffsetType_BASIS_POINTS
PegOffsetType_TICKS = cvar.PegOffsetType_TICKS
PegOffsetType_PRICE_TIER_LEVEL = cvar.PegOffsetType_PRICE_TIER_LEVEL
PegLimitType_OR_BETTER = cvar.PegLimitType_OR_BETTER
PegLimitType_STRICT = cvar.PegLimitType_STRICT
PegLimitType_OR_WORSE = cvar.PegLimitType_OR_WORSE
PegRoundDirection_MORE_AGGRESSIVE = cvar.PegRoundDirection_MORE_AGGRESSIVE
PegRoundDirection_MORE_PASSIVE = cvar.PegRoundDirection_MORE_PASSIVE
PegScope_LOCAL = cvar.PegScope_LOCAL
PegScope_NATIONAL = cvar.PegScope_NATIONAL
PegScope_GLOBAL = cvar.PegScope_GLOBAL
PegScope_NATIONAL_EXCLUDING_LOCAL = cvar.PegScope_NATIONAL_EXCLUDING_LOCAL
DiscretionMoveType_FLOATING = cvar.DiscretionMoveType_FLOATING
DiscretionMoveType_FIXED = cvar.DiscretionMoveType_FIXED
DiscretionOffsetType_PRICE = cvar.DiscretionOffsetType_PRICE
DiscretionOffsetType_BASIS_POINTS = cvar.DiscretionOffsetType_BASIS_POINTS
DiscretionOffsetType_TICKS = cvar.DiscretionOffsetType_TICKS
DiscretionOffsetType_PRICE_TIER_LEVEL = cvar.DiscretionOffsetType_PRICE_TIER_LEVEL
DiscretionLimitType_OR_BETTER = cvar.DiscretionLimitType_OR_BETTER
DiscretionLimitType_STRICT = cvar.DiscretionLimitType_STRICT
DiscretionLimitType_OR_WORSE = cvar.DiscretionLimitType_OR_WORSE
DiscretionRoundDirection_MORE_AGGRESSIVE = cvar.DiscretionRoundDirection_MORE_AGGRESSIVE
DiscretionRoundDirection_MORE_PASSIVE = cvar.DiscretionRoundDirection_MORE_PASSIVE
DiscretionScope_LOCAL = cvar.DiscretionScope_LOCAL
DiscretionScope_NATIONAL = cvar.DiscretionScope_NATIONAL
DiscretionScope_GLOBAL = cvar.DiscretionScope_GLOBAL
DiscretionScope_NATIONAL_EXCLUDING_LOCAL = cvar.DiscretionScope_NATIONAL_EXCLUDING_LOCAL
LastLiquidityInd_ADDED_LIQUIDITY = cvar.LastLiquidityInd_ADDED_LIQUIDITY
LastLiquidityInd_REMOVED_LIQUIDITY = cvar.LastLiquidityInd_REMOVED_LIQUIDITY
LastLiquidityInd_LIQUIDITY_ROUTED_OUT = cvar.LastLiquidityInd_LIQUIDITY_ROUTED_OUT
ShortSaleReason_DEALER_SOLD_SHORT = cvar.ShortSaleReason_DEALER_SOLD_SHORT
ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT
ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT = cvar.ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT
ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT
QtyType_UNITS = cvar.QtyType_UNITS
QtyType_CONTRACTS = cvar.QtyType_CONTRACTS
TradeReportType_SUBMIT = cvar.TradeReportType_SUBMIT
TradeReportType_ALLEGED = cvar.TradeReportType_ALLEGED
TradeReportType_ACCEPT = cvar.TradeReportType_ACCEPT
TradeReportType_DECLINE = cvar.TradeReportType_DECLINE
TradeReportType_ADDENDUM = cvar.TradeReportType_ADDENDUM
TradeReportType_NO_WAS = cvar.TradeReportType_NO_WAS
TradeReportType_TRADE_REPORT_CANCEL = cvar.TradeReportType_TRADE_REPORT_CANCEL
TradeReportType_LOCKED_IN_TRADE_BREAK = cvar.TradeReportType_LOCKED_IN_TRADE_BREAK
AllocNoOrdersType_NOT_SPECIFIED = cvar.AllocNoOrdersType_NOT_SPECIFIED
AllocNoOrdersType_EXPLICIT_LIST_PROVIDED = cvar.AllocNoOrdersType_EXPLICIT_LIST_PROVIDED
EventType_PUT = cvar.EventType_PUT
EventType_CALL = cvar.EventType_CALL
EventType_TENDER = cvar.EventType_TENDER
EventType_SINKING_FUND_CALL = cvar.EventType_SINKING_FUND_CALL
InstrAttribType_FLAT = cvar.InstrAttribType_FLAT
InstrAttribType_ZERO_COUPON = cvar.InstrAttribType_ZERO_COUPON
InstrAttribType_INTEREST_BEARING = cvar.InstrAttribType_INTEREST_BEARING
InstrAttribType_NO_PERIODIC_PAYMENTS = cvar.InstrAttribType_NO_PERIODIC_PAYMENTS
InstrAttribType_VARIABLE_RATE = cvar.InstrAttribType_VARIABLE_RATE
InstrAttribType_LESS_FEE_FOR_PUT = cvar.InstrAttribType_LESS_FEE_FOR_PUT
InstrAttribType_STEPPED_COUPON = cvar.InstrAttribType_STEPPED_COUPON
InstrAttribType_COUPON_PERIOD = cvar.InstrAttribType_COUPON_PERIOD
InstrAttribType_WHEN_AND_IF_ISSUED = cvar.InstrAttribType_WHEN_AND_IF_ISSUED
MiscFeeBasis_ABSOLUTE = cvar.MiscFeeBasis_ABSOLUTE
MiscFeeBasis_PER_UNIT = cvar.MiscFeeBasis_PER_UNIT
MiscFeeBasis_PERCENTAGE = cvar.MiscFeeBasis_PERCENTAGE
CollAsgnReason_INITIAL = cvar.CollAsgnReason_INITIAL
CollAsgnReason_SCHEDULED = cvar.CollAsgnReason_SCHEDULED
CollAsgnReason_TIME_WARNING = cvar.CollAsgnReason_TIME_WARNING
CollAsgnReason_MARGIN_DEFICIENCY = cvar.CollAsgnReason_MARGIN_DEFICIENCY
CollAsgnReason_MARGIN_EXCESS = cvar.CollAsgnReason_MARGIN_EXCESS
CollAsgnReason_FORWARD_COLLATERAL_DEMAND = cvar.CollAsgnReason_FORWARD_COLLATERAL_DEMAND
CollAsgnReason_EVENT_OF_DEFAULT = cvar.CollAsgnReason_EVENT_OF_DEFAULT
CollAsgnReason_ADVERSE_TAX_EVENT = cvar.CollAsgnReason_ADVERSE_TAX_EVENT
CollInquiryQualifier_TRADEDATE = cvar.CollInquiryQualifier_TRADEDATE
CollInquiryQualifier_GC_INSTRUMENT = cvar.CollInquiryQualifier_GC_INSTRUMENT
CollInquiryQualifier_COLLATERALINSTRUMENT = cvar.CollInquiryQualifier_COLLATERALINSTRUMENT
CollInquiryQualifier_SUBSTITUTION_ELIGIBLE = cvar.CollInquiryQualifier_SUBSTITUTION_ELIGIBLE
CollInquiryQualifier_NOT_ASSIGNED = cvar.CollInquiryQualifier_NOT_ASSIGNED
CollInquiryQualifier_PARTIALLY_ASSIGNED = cvar.CollInquiryQualifier_PARTIALLY_ASSIGNED
CollInquiryQualifier_FULLY_ASSIGNED = cvar.CollInquiryQualifier_FULLY_ASSIGNED
CollInquiryQualifier_OUTSTANDING_TRADES = cvar.CollInquiryQualifier_OUTSTANDING_TRADES
CollAsgnTransType_NEW = cvar.CollAsgnTransType_NEW
CollAsgnTransType_REPLACE = cvar.CollAsgnTransType_REPLACE
CollAsgnTransType_CANCEL = cvar.CollAsgnTransType_CANCEL
CollAsgnTransType_RELEASE = cvar.CollAsgnTransType_RELEASE
CollAsgnTransType_REVERSE = cvar.CollAsgnTransType_REVERSE
CollAsgnRespType_RECEIVED = cvar.CollAsgnRespType_RECEIVED
CollAsgnRespType_ACCEPTED = cvar.CollAsgnRespType_ACCEPTED
CollAsgnRespType_DECLINED = cvar.CollAsgnRespType_DECLINED
CollAsgnRespType_REJECTED = cvar.CollAsgnRespType_REJECTED
CollAsgnRejectReason_UNKNOWN_DEAL = cvar.CollAsgnRejectReason_UNKNOWN_DEAL
CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT = cvar.CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT
CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION = cvar.CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION
CollAsgnRejectReason_INSUFFICIENT_COLLATERAL = cvar.CollAsgnRejectReason_INSUFFICIENT_COLLATERAL
CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL = cvar.CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL
CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION = cvar.CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION
CollStatus_UNASSIGNED = cvar.CollStatus_UNASSIGNED
CollStatus_PARTIALLY_ASSIGNED = cvar.CollStatus_PARTIALLY_ASSIGNED
CollStatus_ASSIGNMENT_PROPOSED = cvar.CollStatus_ASSIGNMENT_PROPOSED
CollStatus_ASSIGNED = cvar.CollStatus_ASSIGNED
CollStatus_CHALLENGED = cvar.CollStatus_CHALLENGED
DeliveryType_VERSUS_PAYMENT = cvar.DeliveryType_VERSUS_PAYMENT
DeliveryType_FREE = cvar.DeliveryType_FREE
DeliveryType_TRI_PARTY = cvar.DeliveryType_TRI_PARTY
DeliveryType_HOLD_IN_CUSTODY = cvar.DeliveryType_HOLD_IN_CUSTODY
UserRequestType_LOGONUSER = cvar.UserRequestType_LOGONUSER
UserRequestType_LOGOFFUSER = cvar.UserRequestType_LOGOFFUSER
UserRequestType_CHANGEPASSWORDFORUSER = cvar.UserRequestType_CHANGEPASSWORDFORUSER
UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS = cvar.UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS
UserStatus_LOGGED_IN = cvar.UserStatus_LOGGED_IN
UserStatus_NOT_LOGGED_IN = cvar.UserStatus_NOT_LOGGED_IN
UserStatus_USER_NOT_RECOGNISED = cvar.UserStatus_USER_NOT_RECOGNISED
UserStatus_PASSWORD_INCORRECT = cvar.UserStatus_PASSWORD_INCORRECT
UserStatus_PASSWORD_CHANGED = cvar.UserStatus_PASSWORD_CHANGED
UserStatus_OTHER = cvar.UserStatus_OTHER
StatusValue_CONNECTED = cvar.StatusValue_CONNECTED
StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP = cvar.StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP
StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN = cvar.StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN
StatusValue_IN_PROCESS = cvar.StatusValue_IN_PROCESS
NetworkRequestType_SNAPSHOT = cvar.NetworkRequestType_SNAPSHOT
NetworkRequestType_SUBSCRIBE = cvar.NetworkRequestType_SUBSCRIBE
NetworkRequestType_STOP_SUBSCRIBING = cvar.NetworkRequestType_STOP_SUBSCRIBING
NetworkRequestType_LEVEL_OF_DETAIL = cvar.NetworkRequestType_LEVEL_OF_DETAIL
NetworkStatusResponseType_FULL = cvar.NetworkStatusResponseType_FULL
NetworkStatusResponseType_INCREMENTAL_UPDATE = cvar.NetworkStatusResponseType_INCREMENTAL_UPDATE
TrdRptStatus_ACCEPTED = cvar.TrdRptStatus_ACCEPTED
TrdRptStatus_REJECTED = cvar.TrdRptStatus_REJECTED
AffirmStatus_RECEIVED = cvar.AffirmStatus_RECEIVED
AffirmStatus_CONFIRM_REJECTED = cvar.AffirmStatus_CONFIRM_REJECTED
AffirmStatus_AFFIRMED = cvar.AffirmStatus_AFFIRMED
CollAction_RETAIN = cvar.CollAction_RETAIN
CollAction_ADD = cvar.CollAction_ADD
CollAction_REMOVE = cvar.CollAction_REMOVE
CollInquiryStatus_ACCEPTED = cvar.CollInquiryStatus_ACCEPTED
CollInquiryStatus_ACCEPTED_WITH_WARNINGS = cvar.CollInquiryStatus_ACCEPTED_WITH_WARNINGS
CollInquiryStatus_COMPLETED = cvar.CollInquiryStatus_COMPLETED
CollInquiryStatus_COMPLETED_WITH_WARNINGS = cvar.CollInquiryStatus_COMPLETED_WITH_WARNINGS
CollInquiryStatus_REJECTED = cvar.CollInquiryStatus_REJECTED
CollInquiryResult_SUCCESSFUL = cvar.CollInquiryResult_SUCCESSFUL
CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT
CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE
CollInquiryResult_INVALID_PARTIES = cvar.CollInquiryResult_INVALID_PARTIES
CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED
CollInquiryResult_INVALID_DESTINATION_REQUESTED = cvar.CollInquiryResult_INVALID_DESTINATION_REQUESTED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED
CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = cvar.CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED
CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = cvar.CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY
SessionRejectReason_INVALID_TAG_NUMBER_TEXT = cvar.SessionRejectReason_INVALID_TAG_NUMBER_TEXT
SessionRejectReason_REQUIRED_TAG_MISSING_TEXT = cvar.SessionRejectReason_REQUIRED_TAG_MISSING_TEXT
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT
SessionRejectReason_UNDEFINED_TAG_TEXT = cvar.SessionRejectReason_UNDEFINED_TAG_TEXT
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT
SessionRejectReason_VALUE_IS_INCORRECT_TEXT = cvar.SessionRejectReason_VALUE_IS_INCORRECT_TEXT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT
SessionRejectReason_DECRYPTION_PROBLEM_TEXT = cvar.SessionRejectReason_DECRYPTION_PROBLEM_TEXT
SessionRejectReason_SIGNATURE_PROBLEM_TEXT = cvar.SessionRejectReason_SIGNATURE_PROBLEM_TEXT
SessionRejectReason_COMPID_PROBLEM_TEXT = cvar.SessionRejectReason_COMPID_PROBLEM_TEXT
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT
SessionRejectReason_INVALID_MSGTYPE_TEXT = cvar.SessionRejectReason_INVALID_MSGTYPE_TEXT
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT
ExecTransType_NEW = cvar.ExecTransType_NEW
ExecTransType_CANCEL = cvar.ExecTransType_CANCEL
ExecTransType_CORRECT = cvar.ExecTransType_CORRECT
ExecTransType_STATUS = cvar.ExecTransType_STATUS
IDSource_CUSIP = cvar.IDSource_CUSIP
IDSource_SEDOL = cvar.IDSource_SEDOL
IDSource_QUIK = cvar.IDSource_QUIK
IDSource_ISIN_NUMBER = cvar.IDSource_ISIN_NUMBER
IDSource_RIC_CODE = cvar.IDSource_RIC_CODE
IDSource_ISO_CURRENCY_CODE = cvar.IDSource_ISO_CURRENCY_CODE
IDSource_ISO_COUNTRY_CODE = cvar.IDSource_ISO_COUNTRY_CODE
IDSource_EXCHANGE_SYMBOL = cvar.IDSource_EXCHANGE_SYMBOL
IDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.IDSource_CONSOLIDATED_TAPE_ASSOCIATION
IOIShares_SMALL = cvar.IOIShares_SMALL
IOIShares_MEDIUM = cvar.IOIShares_MEDIUM
IOIShares_LARGE = cvar.IOIShares_LARGE
Rule80A_AGENCY_SINGLE_ORDER = cvar.Rule80A_AGENCY_SINGLE_ORDER
Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL
Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE
Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE
Rule80A_INDIVIDUAL_INVESTOR = cvar.Rule80A_INDIVIDUAL_INVESTOR
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_SHORT_EXEMPT_AFFILIATED = cvar.Rule80A_SHORT_EXEMPT_AFFILIATED
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROPRIETARY_AFFILIATED = cvar.Rule80A_PROPRIETARY_AFFILIATED
Rule80A_PRINCIPAL = cvar.Rule80A_PRINCIPAL
Rule80A_TRANSACTIONS_NON_MEMBER = cvar.Rule80A_TRANSACTIONS_NON_MEMBER
Rule80A_SPECIALIST_TRADES = cvar.Rule80A_SPECIALIST_TRADES
Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER = cvar.Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER = cvar.Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER
Rule80A_SHORT_EXEMPT_NOT_AFFILIATED = cvar.Rule80A_SHORT_EXEMPT_NOT_AFFILIATED
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_SHORT_EXEMPT_NONMEMBER = cvar.Rule80A_SHORT_EXEMPT_NONMEMBER
SettlmntTyp_REGULAR = cvar.SettlmntTyp_REGULAR
SettlmntTyp_CASH = cvar.SettlmntTyp_CASH
SettlmntTyp_NEXT_DAY = cvar.SettlmntTyp_NEXT_DAY
SettlmntTyp_T_PLUS_2 = cvar.SettlmntTyp_T_PLUS_2
SettlmntTyp_T_PLUS_3 = cvar.SettlmntTyp_T_PLUS_3
SettlmntTyp_T_PLUS_4 = cvar.SettlmntTyp_T_PLUS_4
SettlmntTyp_FUTURE = cvar.SettlmntTyp_FUTURE
SettlmntTyp_WHEN_AND_IF_ISSUED = cvar.SettlmntTyp_WHEN_AND_IF_ISSUED
SettlmntTyp_SELLERS_OPTION = cvar.SettlmntTyp_SELLERS_OPTION
SettlmntTyp_T_PLUS_5 = cvar.SettlmntTyp_T_PLUS_5
SettlmntTyp_T_PLUS_1 = cvar.SettlmntTyp_T_PLUS_1
OpenClose_OPEN = cvar.OpenClose_OPEN
OpenClose_CLOSE = cvar.OpenClose_CLOSE
CxlType_PARTIAL_CANCEL = cvar.CxlType_PARTIAL_CANCEL
CxlType_FULL_REMAINING_QUANTITY = cvar.CxlType_FULL_REMAINING_QUANTITY
SettlLocation_CEDEL = cvar.SettlLocation_CEDEL
SettlLocation_DEPOSITORY_TRUST_COMPANY = cvar.SettlLocation_DEPOSITORY_TRUST_COMPANY
SettlLocation_EUROCLEAR = cvar.SettlLocation_EUROCLEAR
SettlLocation_FEDERAL_BOOK_ENTRY = cvar.SettlLocation_FEDERAL_BOOK_ENTRY
SettlLocation_PHYSICAL = cvar.SettlLocation_PHYSICAL
SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY = cvar.SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY
PutOrCall_PUT = cvar.PutOrCall_PUT
PutOrCall_CALL = cvar.PutOrCall_CALL
CustomerOrFirm_CUSTOMER = cvar.CustomerOrFirm_CUSTOMER
CustomerOrFirm_FIRM = cvar.CustomerOrFirm_FIRM
Benchmark_CURVE = cvar.Benchmark_CURVE
Benchmark_FIVEYR = cvar.Benchmark_FIVEYR
Benchmark_OLD5 = cvar.Benchmark_OLD5
Benchmark_TENYR = cvar.Benchmark_TENYR
Benchmark_OLD10 = cvar.Benchmark_OLD10
Benchmark_THIRTYYR = cvar.Benchmark_THIRTYYR
Benchmark_OLD30 = cvar.Benchmark_OLD30
Benchmark_THREEMOLIBOR = cvar.Benchmark_THREEMOLIBOR
Benchmark_SIXMOLIBOR = cvar.Benchmark_SIXMOLIBOR
OpenCloseSettleFlag_DAILY_OPEN = cvar.OpenCloseSettleFlag_DAILY_OPEN
OpenCloseSettleFlag_SESSION_OPEN = cvar.OpenCloseSettleFlag_SESSION_OPEN
OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE = cvar.OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE
OpenCloseSettleFlag_EXPECTED_PRICE = cvar.OpenCloseSettleFlag_EXPECTED_PRICE
OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY

class SessionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionSettings, name)
    def __repr__(self):
        return "<C FIX::SessionSettings instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SessionSettings, 'this', _quickfix.new_SessionSettings(*args))
        _swig_setattr(self, SessionSettings, 'thisown', 1)
    def get(*args): return _quickfix.SessionSettings_get(*args)
    def set(*args): return _quickfix.SessionSettings_set(*args)
    def size(*args): return _quickfix.SessionSettings_size(*args)
    def getSessions(*args): return _quickfix.SessionSettings_getSessions(*args)
    def __del__(self, destroy=_quickfix.delete_SessionSettings):
        try:
            if self.thisown: destroy(self)
        except: pass

class SessionSettingsPtr(SessionSettings):
    def __init__(self, this):
        _swig_setattr(self, SessionSettings, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SessionSettings, 'thisown', 0)
        _swig_setattr(self, SessionSettings,self.__class__,SessionSettings)
_quickfix.SessionSettings_swigregister(SessionSettingsPtr)

__lt__ = _quickfix.__lt__

__eq__ = _quickfix.__eq__

__ne__ = _quickfix.__ne__

__lshift__ = _quickfix.__lshift__
CONNECTION_TYPE = cvar.CONNECTION_TYPE
USE_DATA_DICTIONARY = cvar.USE_DATA_DICTIONARY
DATA_DICTIONARY = cvar.DATA_DICTIONARY
START_TIME = cvar.START_TIME
END_TIME = cvar.END_TIME
CHECK_LATENCY = cvar.CHECK_LATENCY
MAX_LATENCY = cvar.MAX_LATENCY
HEARTBTINT = cvar.HEARTBTINT
SOCKET_ACCEPT_PORT = cvar.SOCKET_ACCEPT_PORT
SOCKET_REUSE_ADDRESS = cvar.SOCKET_REUSE_ADDRESS
SOCKET_CONNECT_HOST = cvar.SOCKET_CONNECT_HOST
SOCKET_CONNECT_PORT = cvar.SOCKET_CONNECT_PORT
RECONNECT_INTERVAL = cvar.RECONNECT_INTERVAL
VALIDATE_FIELDS_OUT_OF_ORDER = cvar.VALIDATE_FIELDS_OUT_OF_ORDER
VALIDATE_FIELDS_HAVE_VALUES = cvar.VALIDATE_FIELDS_HAVE_VALUES
LOGON_TIMEOUT = cvar.LOGON_TIMEOUT
FILE_STORE_PATH = cvar.FILE_STORE_PATH
MYSQL_STORE_DATABASE = cvar.MYSQL_STORE_DATABASE
MYSQL_STORE_USER = cvar.MYSQL_STORE_USER
MYSQL_STORE_PASSWORD = cvar.MYSQL_STORE_PASSWORD
MYSQL_STORE_HOST = cvar.MYSQL_STORE_HOST
MYSQL_STORE_PORT = cvar.MYSQL_STORE_PORT
FILE_LOG_PATH = cvar.FILE_LOG_PATH
RESET_ON_LOGOUT = cvar.RESET_ON_LOGOUT
RESET_ON_DISCONNECT = cvar.RESET_ON_DISCONNECT
MILLISECONDS_IN_TIMESTAMP = cvar.MILLISECONDS_IN_TIMESTAMP

class Session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    def __repr__(self):
        return "<C FIX::Session instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Session, 'this', _quickfix.new_Session(*args))
        _swig_setattr(self, Session, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_Session):
        try:
            if self.thisown: destroy(self)
        except: pass
    def logon(*args): return _quickfix.Session_logon(*args)
    def logout(*args): return _quickfix.Session_logout(*args)
    def isEnabled(*args): return _quickfix.Session_isEnabled(*args)
    def sentLogon(*args): return _quickfix.Session_sentLogon(*args)
    def sentLogout(*args): return _quickfix.Session_sentLogout(*args)
    def receivedLogon(*args): return _quickfix.Session_receivedLogon(*args)
    def isLoggedOn(*args): return _quickfix.Session_isLoggedOn(*args)
    def reset(*args): return _quickfix.Session_reset(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.Session_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.Session_setNextTargetMsgSeqNum(*args)
    def getSessionID(*args): return _quickfix.Session_getSessionID(*args)
    def getDataDictionary(*args): return _quickfix.Session_getDataDictionary(*args)
    __swig_getmethods__["sendToTarget"] = lambda x: _quickfix.Session_sendToTarget
    if _newclass:sendToTarget = staticmethod(_quickfix.Session_sendToTarget)
    __swig_getmethods__["sendToTarget"] = lambda x: _quickfix.Session_sendToTarget
    if _newclass:sendToTarget = staticmethod(_quickfix.Session_sendToTarget)
    __swig_getmethods__["sendToTarget"] = lambda x: _quickfix.Session_sendToTarget
    if _newclass:sendToTarget = staticmethod(_quickfix.Session_sendToTarget)
    __swig_getmethods__["sendToTarget"] = lambda x: _quickfix.Session_sendToTarget
    if _newclass:sendToTarget = staticmethod(_quickfix.Session_sendToTarget)
    __swig_getmethods__["doesSessionExist"] = lambda x: _quickfix.Session_doesSessionExist
    if _newclass:doesSessionExist = staticmethod(_quickfix.Session_doesSessionExist)
    __swig_getmethods__["lookupSession"] = lambda x: _quickfix.Session_lookupSession
    if _newclass:lookupSession = staticmethod(_quickfix.Session_lookupSession)
    __swig_getmethods__["lookupSession"] = lambda x: _quickfix.Session_lookupSession
    if _newclass:lookupSession = staticmethod(_quickfix.Session_lookupSession)
    __swig_getmethods__["isSessionRegistered"] = lambda x: _quickfix.Session_isSessionRegistered
    if _newclass:isSessionRegistered = staticmethod(_quickfix.Session_isSessionRegistered)
    __swig_getmethods__["registerSession"] = lambda x: _quickfix.Session_registerSession
    if _newclass:registerSession = staticmethod(_quickfix.Session_registerSession)
    __swig_getmethods__["unregisterSession"] = lambda x: _quickfix.Session_unregisterSession
    if _newclass:unregisterSession = staticmethod(_quickfix.Session_unregisterSession)
    __swig_getmethods__["numSessions"] = lambda x: _quickfix.Session_numSessions
    if _newclass:numSessions = staticmethod(_quickfix.Session_numSessions)
    __swig_getmethods__["isSessionTime"] = lambda x: _quickfix.Session_isSessionTime
    if _newclass:isSessionTime = staticmethod(_quickfix.Session_isSessionTime)
    __swig_getmethods__["isSameSession"] = lambda x: _quickfix.Session_isSameSession
    if _newclass:isSameSession = staticmethod(_quickfix.Session_isSameSession)
    def isSessionTime(*args): return _quickfix.Session_isSessionTime(*args)
    def checkLatency(*args): return _quickfix.Session_checkLatency(*args)
    def setMaxLatency(*args): return _quickfix.Session_setMaxLatency(*args)
    def setLogonTimeout(*args): return _quickfix.Session_setLogonTimeout(*args)
    def setResetOnLogout(*args): return _quickfix.Session_setResetOnLogout(*args)
    def setResetOnDisconnect(*args): return _quickfix.Session_setResetOnDisconnect(*args)
    def setMillisecondsInTimeStamp(*args): return _quickfix.Session_setMillisecondsInTimeStamp(*args)
    def setResponder(*args): return _quickfix.Session_setResponder(*args)
    def send(*args): return _quickfix.Session_send(*args)
    def next(*args): return _quickfix.Session_next(*args)
    def disconnect(*args): return _quickfix.Session_disconnect(*args)
    def getExpectedSenderNum(*args): return _quickfix.Session_getExpectedSenderNum(*args)
    def getExpectedTargetNum(*args): return _quickfix.Session_getExpectedTargetNum(*args)
    def getLog(*args): return _quickfix.Session_getLog(*args)
    def getStore(*args): return _quickfix.Session_getStore(*args)

class SessionPtr(Session):
    def __init__(self, this):
        _swig_setattr(self, Session, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Session, 'thisown', 0)
        _swig_setattr(self, Session,self.__class__,Session)
_quickfix.Session_swigregister(SessionPtr)

__rshift__ = _quickfix.__rshift__

Session_sendToTarget = _quickfix.Session_sendToTarget

Session_doesSessionExist = _quickfix.Session_doesSessionExist

Session_lookupSession = _quickfix.Session_lookupSession

Session_isSessionRegistered = _quickfix.Session_isSessionRegistered

Session_registerSession = _quickfix.Session_registerSession

Session_unregisterSession = _quickfix.Session_unregisterSession

Session_numSessions = _quickfix.Session_numSessions

Session_isSameSession = _quickfix.Session_isSameSession

class LogFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFactory, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FIX::LogFactory instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_LogFactory):
        try:
            if self.thisown: destroy(self)
        except: pass
    def create(*args): return _quickfix.LogFactory_create(*args)
    def destroy(*args): return _quickfix.LogFactory_destroy(*args)

class LogFactoryPtr(LogFactory):
    def __init__(self, this):
        _swig_setattr(self, LogFactory, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, LogFactory, 'thisown', 0)
        _swig_setattr(self, LogFactory,self.__class__,LogFactory)
_quickfix.LogFactory_swigregister(LogFactoryPtr)

class ScreenLogFactory(LogFactory):
    __swig_setmethods__ = {}
    for _s in [LogFactory]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenLogFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [LogFactory]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenLogFactory, name)
    def __repr__(self):
        return "<C FIX::ScreenLogFactory instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ScreenLogFactory, 'this', _quickfix.new_ScreenLogFactory(*args))
        _swig_setattr(self, ScreenLogFactory, 'thisown', 1)
    def create(*args): return _quickfix.ScreenLogFactory_create(*args)
    def destroy(*args): return _quickfix.ScreenLogFactory_destroy(*args)
    def __del__(self, destroy=_quickfix.delete_ScreenLogFactory):
        try:
            if self.thisown: destroy(self)
        except: pass

class ScreenLogFactoryPtr(ScreenLogFactory):
    def __init__(self, this):
        _swig_setattr(self, ScreenLogFactory, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ScreenLogFactory, 'thisown', 0)
        _swig_setattr(self, ScreenLogFactory,self.__class__,ScreenLogFactory)
_quickfix.ScreenLogFactory_swigregister(ScreenLogFactoryPtr)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FIX::Log instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_Log):
        try:
            if self.thisown: destroy(self)
        except: pass
    def onIncoming(*args): return _quickfix.Log_onIncoming(*args)
    def onOutgoing(*args): return _quickfix.Log_onOutgoing(*args)
    def onEvent(*args): return _quickfix.Log_onEvent(*args)

class LogPtr(Log):
    def __init__(self, this):
        _swig_setattr(self, Log, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Log, 'thisown', 0)
        _swig_setattr(self, Log,self.__class__,Log)
_quickfix.Log_swigregister(LogPtr)

class ScreenLog(Log):
    __swig_setmethods__ = {}
    for _s in [Log]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenLog, name)
    def __repr__(self):
        return "<C FIX::ScreenLog instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, ScreenLog, 'this', _quickfix.new_ScreenLog(*args))
        _swig_setattr(self, ScreenLog, 'thisown', 1)
    def onIncoming(*args): return _quickfix.ScreenLog_onIncoming(*args)
    def onOutgoing(*args): return _quickfix.ScreenLog_onOutgoing(*args)
    def onEvent(*args): return _quickfix.ScreenLog_onEvent(*args)
    def __del__(self, destroy=_quickfix.delete_ScreenLog):
        try:
            if self.thisown: destroy(self)
        except: pass

class ScreenLogPtr(ScreenLog):
    def __init__(self, this):
        _swig_setattr(self, ScreenLog, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, ScreenLog, 'thisown', 0)
        _swig_setattr(self, ScreenLog,self.__class__,ScreenLog)
_quickfix.ScreenLog_swigregister(ScreenLogPtr)

class FileLogFactory(LogFactory):
    __swig_setmethods__ = {}
    for _s in [LogFactory]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLogFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [LogFactory]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FileLogFactory, name)
    def __repr__(self):
        return "<C FIX::FileLogFactory instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FileLogFactory, 'this', _quickfix.new_FileLogFactory(*args))
        _swig_setattr(self, FileLogFactory, 'thisown', 1)
    def create(*args): return _quickfix.FileLogFactory_create(*args)
    def destroy(*args): return _quickfix.FileLogFactory_destroy(*args)
    def __del__(self, destroy=_quickfix.delete_FileLogFactory):
        try:
            if self.thisown: destroy(self)
        except: pass

class FileLogFactoryPtr(FileLogFactory):
    def __init__(self, this):
        _swig_setattr(self, FileLogFactory, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FileLogFactory, 'thisown', 0)
        _swig_setattr(self, FileLogFactory,self.__class__,FileLogFactory)
_quickfix.FileLogFactory_swigregister(FileLogFactoryPtr)

class FileLog(Log):
    __swig_setmethods__ = {}
    for _s in [Log]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FileLog, name)
    def __repr__(self):
        return "<C FIX::FileLog instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FileLog, 'this', _quickfix.new_FileLog(*args))
        _swig_setattr(self, FileLog, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FileLog):
        try:
            if self.thisown: destroy(self)
        except: pass
    def onIncoming(*args): return _quickfix.FileLog_onIncoming(*args)
    def onOutgoing(*args): return _quickfix.FileLog_onOutgoing(*args)
    def onEvent(*args): return _quickfix.FileLog_onEvent(*args)

class FileLogPtr(FileLog):
    def __init__(self, this):
        _swig_setattr(self, FileLog, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FileLog, 'thisown', 0)
        _swig_setattr(self, FileLog,self.__class__,FileLog)
_quickfix.FileLog_swigregister(FileLogPtr)

class MessageStoreFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreFactory, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FIX::MessageStoreFactory instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_MessageStoreFactory):
        try:
            if self.thisown: destroy(self)
        except: pass
    def create(*args): return _quickfix.MessageStoreFactory_create(*args)
    def destroy(*args): return _quickfix.MessageStoreFactory_destroy(*args)

class MessageStoreFactoryPtr(MessageStoreFactory):
    def __init__(self, this):
        _swig_setattr(self, MessageStoreFactory, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MessageStoreFactory, 'thisown', 0)
        _swig_setattr(self, MessageStoreFactory,self.__class__,MessageStoreFactory)
_quickfix.MessageStoreFactory_swigregister(MessageStoreFactoryPtr)

class MemoryStoreFactory(MessageStoreFactory):
    __swig_setmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStoreFactory, name)
    def __repr__(self):
        return "<C FIX::MemoryStoreFactory instance at %s>" % (self.this,)
    def create(*args): return _quickfix.MemoryStoreFactory_create(*args)
    def destroy(*args): return _quickfix.MemoryStoreFactory_destroy(*args)
    def __init__(self, *args):
        _swig_setattr(self, MemoryStoreFactory, 'this', _quickfix.new_MemoryStoreFactory(*args))
        _swig_setattr(self, MemoryStoreFactory, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MemoryStoreFactory):
        try:
            if self.thisown: destroy(self)
        except: pass

class MemoryStoreFactoryPtr(MemoryStoreFactory):
    def __init__(self, this):
        _swig_setattr(self, MemoryStoreFactory, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MemoryStoreFactory, 'thisown', 0)
        _swig_setattr(self, MemoryStoreFactory,self.__class__,MemoryStoreFactory)
_quickfix.MemoryStoreFactory_swigregister(MemoryStoreFactoryPtr)

class MessageStore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStore, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FIX::MessageStore instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_MessageStore):
        try:
            if self.thisown: destroy(self)
        except: pass
    def set(*args): return _quickfix.MessageStore_set(*args)
    def get(*args): return _quickfix.MessageStore_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.MessageStore_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.MessageStore_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.MessageStore_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.MessageStore_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.MessageStore_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.MessageStore_incrNextTargetMsgSeqNum(*args)
    def getCreationTime(*args): return _quickfix.MessageStore_getCreationTime(*args)
    def reset(*args): return _quickfix.MessageStore_reset(*args)

class MessageStorePtr(MessageStore):
    def __init__(self, this):
        _swig_setattr(self, MessageStore, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MessageStore, 'thisown', 0)
        _swig_setattr(self, MessageStore,self.__class__,MessageStore)
_quickfix.MessageStore_swigregister(MessageStorePtr)

class MemoryStore(MessageStore):
    __swig_setmethods__ = {}
    for _s in [MessageStore]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStore, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStore]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStore, name)
    def __repr__(self):
        return "<C FIX::MemoryStore instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MemoryStore, 'this', _quickfix.new_MemoryStore(*args))
        _swig_setattr(self, MemoryStore, 'thisown', 1)
    def set(*args): return _quickfix.MemoryStore_set(*args)
    def get(*args): return _quickfix.MemoryStore_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.MemoryStore_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.MemoryStore_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.MemoryStore_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.MemoryStore_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.MemoryStore_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.MemoryStore_incrNextTargetMsgSeqNum(*args)
    def setCreationTime(*args): return _quickfix.MemoryStore_setCreationTime(*args)
    def getCreationTime(*args): return _quickfix.MemoryStore_getCreationTime(*args)
    def reset(*args): return _quickfix.MemoryStore_reset(*args)
    def __del__(self, destroy=_quickfix.delete_MemoryStore):
        try:
            if self.thisown: destroy(self)
        except: pass

class MemoryStorePtr(MemoryStore):
    def __init__(self, this):
        _swig_setattr(self, MemoryStore, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MemoryStore, 'thisown', 0)
        _swig_setattr(self, MemoryStore,self.__class__,MemoryStore)
_quickfix.MemoryStore_swigregister(MemoryStorePtr)

class MessageStoreFactoryExceptionWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreFactoryExceptionWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreFactoryExceptionWrapper, name)
    def __repr__(self):
        return "<C FIX::MessageStoreFactoryExceptionWrapper instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MessageStoreFactoryExceptionWrapper, 'this', _quickfix.new_MessageStoreFactoryExceptionWrapper(*args))
        _swig_setattr(self, MessageStoreFactoryExceptionWrapper, 'thisown', 1)
    def create(*args): return _quickfix.MessageStoreFactoryExceptionWrapper_create(*args)
    def destroy(*args): return _quickfix.MessageStoreFactoryExceptionWrapper_destroy(*args)
    def __del__(self, destroy=_quickfix.delete_MessageStoreFactoryExceptionWrapper):
        try:
            if self.thisown: destroy(self)
        except: pass

class MessageStoreFactoryExceptionWrapperPtr(MessageStoreFactoryExceptionWrapper):
    def __init__(self, this):
        _swig_setattr(self, MessageStoreFactoryExceptionWrapper, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MessageStoreFactoryExceptionWrapper, 'thisown', 0)
        _swig_setattr(self, MessageStoreFactoryExceptionWrapper,self.__class__,MessageStoreFactoryExceptionWrapper)
_quickfix.MessageStoreFactoryExceptionWrapper_swigregister(MessageStoreFactoryExceptionWrapperPtr)

class MessageStoreExceptionWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreExceptionWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreExceptionWrapper, name)
    def __repr__(self):
        return "<C FIX::MessageStoreExceptionWrapper instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MessageStoreExceptionWrapper, 'this', _quickfix.new_MessageStoreExceptionWrapper(*args))
        _swig_setattr(self, MessageStoreExceptionWrapper, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_MessageStoreExceptionWrapper):
        try:
            if self.thisown: destroy(self)
        except: pass
    def set(*args): return _quickfix.MessageStoreExceptionWrapper_set(*args)
    def get(*args): return _quickfix.MessageStoreExceptionWrapper_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum(*args)
    def getCreationTime(*args): return _quickfix.MessageStoreExceptionWrapper_getCreationTime(*args)
    def reset(*args): return _quickfix.MessageStoreExceptionWrapper_reset(*args)

class MessageStoreExceptionWrapperPtr(MessageStoreExceptionWrapper):
    def __init__(self, this):
        _swig_setattr(self, MessageStoreExceptionWrapper, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MessageStoreExceptionWrapper, 'thisown', 0)
        _swig_setattr(self, MessageStoreExceptionWrapper,self.__class__,MessageStoreExceptionWrapper)
_quickfix.MessageStoreExceptionWrapper_swigregister(MessageStoreExceptionWrapperPtr)

class FileStoreFactory(MessageStoreFactory):
    __swig_setmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FileStoreFactory, name)
    def __repr__(self):
        return "<C FIX::FileStoreFactory instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FileStoreFactory, 'this', _quickfix.new_FileStoreFactory(*args))
        _swig_setattr(self, FileStoreFactory, 'thisown', 1)
    def create(*args): return _quickfix.FileStoreFactory_create(*args)
    def destroy(*args): return _quickfix.FileStoreFactory_destroy(*args)
    def __del__(self, destroy=_quickfix.delete_FileStoreFactory):
        try:
            if self.thisown: destroy(self)
        except: pass

class FileStoreFactoryPtr(FileStoreFactory):
    def __init__(self, this):
        _swig_setattr(self, FileStoreFactory, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FileStoreFactory, 'thisown', 0)
        _swig_setattr(self, FileStoreFactory,self.__class__,FileStoreFactory)
_quickfix.FileStoreFactory_swigregister(FileStoreFactoryPtr)

class FileStore(MessageStore):
    __swig_setmethods__ = {}
    for _s in [MessageStore]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStore, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStore]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, FileStore, name)
    def __repr__(self):
        return "<C FIX::FileStore instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, FileStore, 'this', _quickfix.new_FileStore(*args))
        _swig_setattr(self, FileStore, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_FileStore):
        try:
            if self.thisown: destroy(self)
        except: pass
    def set(*args): return _quickfix.FileStore_set(*args)
    def get(*args): return _quickfix.FileStore_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.FileStore_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.FileStore_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.FileStore_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.FileStore_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.FileStore_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.FileStore_incrNextTargetMsgSeqNum(*args)
    def getCreationTime(*args): return _quickfix.FileStore_getCreationTime(*args)
    def reset(*args): return _quickfix.FileStore_reset(*args)

class FileStorePtr(FileStore):
    def __init__(self, this):
        _swig_setattr(self, FileStore, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FileStore, 'thisown', 0)
        _swig_setattr(self, FileStore,self.__class__,FileStore)
_quickfix.FileStore_swigregister(FileStorePtr)

class Application(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    def __repr__(self):
        return "<C FIX::Application instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_Application):
        try:
            if self.thisown: destroy(self)
        except: pass
    def onCreate(*args): return _quickfix.Application_onCreate(*args)
    def onLogon(*args): return _quickfix.Application_onLogon(*args)
    def onLogout(*args): return _quickfix.Application_onLogout(*args)
    def toAdmin(*args): return _quickfix.Application_toAdmin(*args)
    def toApp(*args): return _quickfix.Application_toApp(*args)
    def fromAdmin(*args): return _quickfix.Application_fromAdmin(*args)
    def fromApp(*args): return _quickfix.Application_fromApp(*args)
    def __init__(self, *args):
        if self.__class__ == Application:
            args = (None,) + args
        else:
            args = (self,) + args
        _swig_setattr(self, Application, 'this', _quickfix.new_Application(*args))
        _swig_setattr(self, Application, 'thisown', 1)
    def __disown__(self):
        self.thisown = 0
        _quickfix.disown_Application(self)
        return weakref_proxy(self)

class ApplicationPtr(Application):
    def __init__(self, this):
        _swig_setattr(self, Application, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Application, 'thisown', 0)
        _swig_setattr(self, Application,self.__class__,Application)
_quickfix.Application_swigregister(ApplicationPtr)

class SynchronizedApplication(Application):
    __swig_setmethods__ = {}
    for _s in [Application]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchronizedApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SynchronizedApplication, name)
    def __repr__(self):
        return "<C FIX::SynchronizedApplication instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SynchronizedApplication, 'this', _quickfix.new_SynchronizedApplication(*args))
        _swig_setattr(self, SynchronizedApplication, 'thisown', 1)
    def onCreate(*args): return _quickfix.SynchronizedApplication_onCreate(*args)
    def onLogon(*args): return _quickfix.SynchronizedApplication_onLogon(*args)
    def onLogout(*args): return _quickfix.SynchronizedApplication_onLogout(*args)
    def toAdmin(*args): return _quickfix.SynchronizedApplication_toAdmin(*args)
    def toApp(*args): return _quickfix.SynchronizedApplication_toApp(*args)
    def fromAdmin(*args): return _quickfix.SynchronizedApplication_fromAdmin(*args)
    def fromApp(*args): return _quickfix.SynchronizedApplication_fromApp(*args)
    __swig_setmethods__["m_mutex"] = _quickfix.SynchronizedApplication_m_mutex_set
    __swig_getmethods__["m_mutex"] = _quickfix.SynchronizedApplication_m_mutex_get
    if _newclass:m_mutex = property(_quickfix.SynchronizedApplication_m_mutex_get, _quickfix.SynchronizedApplication_m_mutex_set)
    def app(*args): return _quickfix.SynchronizedApplication_app(*args)
    __swig_setmethods__["m_app"] = _quickfix.SynchronizedApplication_m_app_set
    __swig_getmethods__["m_app"] = _quickfix.SynchronizedApplication_m_app_get
    if _newclass:m_app = property(_quickfix.SynchronizedApplication_m_app_get, _quickfix.SynchronizedApplication_m_app_set)
    def __del__(self, destroy=_quickfix.delete_SynchronizedApplication):
        try:
            if self.thisown: destroy(self)
        except: pass

class SynchronizedApplicationPtr(SynchronizedApplication):
    def __init__(self, this):
        _swig_setattr(self, SynchronizedApplication, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SynchronizedApplication, 'thisown', 0)
        _swig_setattr(self, SynchronizedApplication,self.__class__,SynchronizedApplication)
_quickfix.SynchronizedApplication_swigregister(SynchronizedApplicationPtr)

class NullApplication(Application):
    __swig_setmethods__ = {}
    for _s in [Application]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, NullApplication, name)
    def __repr__(self):
        return "<C FIX::NullApplication instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, NullApplication, 'this', _quickfix.new_NullApplication(*args))
        _swig_setattr(self, NullApplication, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_NullApplication):
        try:
            if self.thisown: destroy(self)
        except: pass

class NullApplicationPtr(NullApplication):
    def __init__(self, this):
        _swig_setattr(self, NullApplication, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, NullApplication, 'thisown', 0)
        _swig_setattr(self, NullApplication,self.__class__,NullApplication)
_quickfix.NullApplication_swigregister(NullApplicationPtr)

class Initiator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Initiator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Initiator, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FIX::Initiator instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_Initiator):
        try:
            if self.thisown: destroy(self)
        except: pass
    def start(*args): return _quickfix.Initiator_start(*args)
    def block(*args): return _quickfix.Initiator_block(*args)
    def poll(*args): return _quickfix.Initiator_poll(*args)
    def stop(*args): return _quickfix.Initiator_stop(*args)
    def isLoggedOn(*args): return _quickfix.Initiator_isLoggedOn(*args)
    def getSession(*args): return _quickfix.Initiator_getSession(*args)
    def getApplication(*args): return _quickfix.Initiator_getApplication(*args)
    def getMessageStoreFactory(*args): return _quickfix.Initiator_getMessageStoreFactory(*args)

class InitiatorPtr(Initiator):
    def __init__(self, this):
        _swig_setattr(self, Initiator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Initiator, 'thisown', 0)
        _swig_setattr(self, Initiator,self.__class__,Initiator)
_quickfix.Initiator_swigregister(InitiatorPtr)

class SocketInitiator(Initiator):
    __swig_setmethods__ = {}
    for _s in [Initiator]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketInitiator, name, value)
    __swig_getmethods__ = {}
    for _s in [Initiator]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SocketInitiator, name)
    def __repr__(self):
        return "<C FIX::SocketInitiator instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SocketInitiator, 'this', _quickfix.new_SocketInitiator(*args))
        _swig_setattr(self, SocketInitiator, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SocketInitiator):
        try:
            if self.thisown: destroy(self)
        except: pass

class SocketInitiatorPtr(SocketInitiator):
    def __init__(self, this):
        _swig_setattr(self, SocketInitiator, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SocketInitiator, 'thisown', 0)
        _swig_setattr(self, SocketInitiator,self.__class__,SocketInitiator)
_quickfix.SocketInitiator_swigregister(SocketInitiatorPtr)

class Acceptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acceptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Acceptor, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FIX::Acceptor instance at %s>" % (self.this,)
    def __del__(self, destroy=_quickfix.delete_Acceptor):
        try:
            if self.thisown: destroy(self)
        except: pass
    def start(*args): return _quickfix.Acceptor_start(*args)
    def block(*args): return _quickfix.Acceptor_block(*args)
    def poll(*args): return _quickfix.Acceptor_poll(*args)
    def stop(*args): return _quickfix.Acceptor_stop(*args)
    def isLoggedOn(*args): return _quickfix.Acceptor_isLoggedOn(*args)
    def getSession(*args): return _quickfix.Acceptor_getSession(*args)
    def has(*args): return _quickfix.Acceptor_has(*args)
    def getApplication(*args): return _quickfix.Acceptor_getApplication(*args)
    def getMessageStoreFactory(*args): return _quickfix.Acceptor_getMessageStoreFactory(*args)

class AcceptorPtr(Acceptor):
    def __init__(self, this):
        _swig_setattr(self, Acceptor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Acceptor, 'thisown', 0)
        _swig_setattr(self, Acceptor,self.__class__,Acceptor)
_quickfix.Acceptor_swigregister(AcceptorPtr)

class SocketAcceptor(Acceptor):
    __swig_setmethods__ = {}
    for _s in [Acceptor]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketAcceptor, name, value)
    __swig_getmethods__ = {}
    for _s in [Acceptor]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, SocketAcceptor, name)
    def __repr__(self):
        return "<C FIX::SocketAcceptor instance at %s>" % (self.this,)
    def __init__(self, *args):
        _swig_setattr(self, SocketAcceptor, 'this', _quickfix.new_SocketAcceptor(*args))
        _swig_setattr(self, SocketAcceptor, 'thisown', 1)
    def __del__(self, destroy=_quickfix.delete_SocketAcceptor):
        try:
            if self.thisown: destroy(self)
        except: pass
    def getPort(*args): return _quickfix.SocketAcceptor_getPort(*args)

class SocketAcceptorPtr(SocketAcceptor):
    def __init__(self, this):
        _swig_setattr(self, SocketAcceptor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, SocketAcceptor, 'thisown', 0)
        _swig_setattr(self, SocketAcceptor,self.__class__,SocketAcceptor)
_quickfix.SocketAcceptor_swigregister(SocketAcceptorPtr)


