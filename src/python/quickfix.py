# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _quickfix
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_IntArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _quickfix.IntArray___getitem__(*args)
    def __setitem__(*args): return _quickfix.IntArray___setitem__(*args)
    def cast(*args): return _quickfix.IntArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _quickfix.IntArray_frompointer
    if _newclass:frompointer = staticmethod(_quickfix.IntArray_frompointer)
IntArray_swigregister = _quickfix.IntArray_swigregister
IntArray_swigregister(IntArray)
IntArray_frompointer = _quickfix.IntArray_frompointer

#ifdef SWIGPYTHON
import thread

def _quickfix_start_thread(i_or_a):
	i_or_a.block()
#endif

class Exception:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_Exception
    __del__ = lambda self : None;
    __swig_setmethods__["type"] = _quickfix.Exception_type_set
    __swig_getmethods__["type"] = _quickfix.Exception_type_get
    __swig_setmethods__["detail"] = _quickfix.Exception_detail_set
    __swig_getmethods__["detail"] = _quickfix.Exception_detail_get
    def __str__(*args): return _quickfix.Exception___str__(*args)
Exception_swigregister = _quickfix.Exception_swigregister
Exception_swigregister(Exception)

class DataDictionaryNotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataDictionaryNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataDictionaryNotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_DataDictionaryNotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_DataDictionaryNotFound
    __del__ = lambda self : None;
    __swig_setmethods__["version"] = _quickfix.DataDictionaryNotFound_version_set
    __swig_getmethods__["version"] = _quickfix.DataDictionaryNotFound_version_get
    if _newclass:version = _swig_property(_quickfix.DataDictionaryNotFound_version_get, _quickfix.DataDictionaryNotFound_version_set)
DataDictionaryNotFound_swigregister = _quickfix.DataDictionaryNotFound_swigregister
DataDictionaryNotFound_swigregister(DataDictionaryNotFound)

class FieldNotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FieldNotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.FieldNotFound_field_set
    __swig_getmethods__["field"] = _quickfix.FieldNotFound_field_get
    __swig_destroy__ = _quickfix.delete_FieldNotFound
    __del__ = lambda self : None;
FieldNotFound_swigregister = _quickfix.FieldNotFound_swigregister
FieldNotFound_swigregister(FieldNotFound)

class FieldConvertError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldConvertError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldConvertError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FieldConvertError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FieldConvertError
    __del__ = lambda self : None;
FieldConvertError_swigregister = _quickfix.FieldConvertError_swigregister
FieldConvertError_swigregister(FieldConvertError)

class MessageParseError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageParseError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageParseError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_MessageParseError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_MessageParseError
    __del__ = lambda self : None;
MessageParseError_swigregister = _quickfix.MessageParseError_swigregister
MessageParseError_swigregister(MessageParseError)

class InvalidMessage(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_InvalidMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_InvalidMessage
    __del__ = lambda self : None;
InvalidMessage_swigregister = _quickfix.InvalidMessage_swigregister
InvalidMessage_swigregister(InvalidMessage)

class ConfigError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_ConfigError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_ConfigError
    __del__ = lambda self : None;
ConfigError_swigregister = _quickfix.ConfigError_swigregister
ConfigError_swigregister(ConfigError)

class RuntimeError(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RuntimeError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_RuntimeError
    __del__ = lambda self : None;
RuntimeError_swigregister = _quickfix.RuntimeError_swigregister
RuntimeError_swigregister(RuntimeError)

class InvalidTagNumber(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTagNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTagNumber, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_InvalidTagNumber(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.InvalidTagNumber_field_set
    __swig_getmethods__["field"] = _quickfix.InvalidTagNumber_field_get
    __swig_destroy__ = _quickfix.delete_InvalidTagNumber
    __del__ = lambda self : None;
InvalidTagNumber_swigregister = _quickfix.InvalidTagNumber_swigregister
InvalidTagNumber_swigregister(InvalidTagNumber)

class RequiredTagMissing(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RequiredTagMissing, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RequiredTagMissing, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RequiredTagMissing(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.RequiredTagMissing_field_set
    __swig_getmethods__["field"] = _quickfix.RequiredTagMissing_field_get
    __swig_destroy__ = _quickfix.delete_RequiredTagMissing
    __del__ = lambda self : None;
RequiredTagMissing_swigregister = _quickfix.RequiredTagMissing_swigregister
RequiredTagMissing_swigregister(RequiredTagMissing)

class TagNotDefinedForMessage(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagNotDefinedForMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TagNotDefinedForMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_TagNotDefinedForMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.TagNotDefinedForMessage_field_set
    __swig_getmethods__["field"] = _quickfix.TagNotDefinedForMessage_field_get
    __swig_destroy__ = _quickfix.delete_TagNotDefinedForMessage
    __del__ = lambda self : None;
TagNotDefinedForMessage_swigregister = _quickfix.TagNotDefinedForMessage_swigregister
TagNotDefinedForMessage_swigregister(TagNotDefinedForMessage)

class NoTagValue(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTagValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTagValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_NoTagValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.NoTagValue_field_set
    __swig_getmethods__["field"] = _quickfix.NoTagValue_field_get
    __swig_destroy__ = _quickfix.delete_NoTagValue
    __del__ = lambda self : None;
NoTagValue_swigregister = _quickfix.NoTagValue_swigregister
NoTagValue_swigregister(NoTagValue)

class IncorrectTagValue(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectTagValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectTagValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IncorrectTagValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.IncorrectTagValue_field_set
    __swig_getmethods__["field"] = _quickfix.IncorrectTagValue_field_get
    __swig_destroy__ = _quickfix.delete_IncorrectTagValue
    __del__ = lambda self : None;
IncorrectTagValue_swigregister = _quickfix.IncorrectTagValue_swigregister
IncorrectTagValue_swigregister(IncorrectTagValue)

class IncorrectDataFormat(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectDataFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectDataFormat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IncorrectDataFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.IncorrectDataFormat_field_set
    __swig_getmethods__["field"] = _quickfix.IncorrectDataFormat_field_get
    __swig_destroy__ = _quickfix.delete_IncorrectDataFormat
    __del__ = lambda self : None;
IncorrectDataFormat_swigregister = _quickfix.IncorrectDataFormat_swigregister
IncorrectDataFormat_swigregister(IncorrectDataFormat)

class IncorrectMessageStructure(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectMessageStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectMessageStructure, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IncorrectMessageStructure(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_IncorrectMessageStructure
    __del__ = lambda self : None;
IncorrectMessageStructure_swigregister = _quickfix.IncorrectMessageStructure_swigregister
IncorrectMessageStructure_swigregister(IncorrectMessageStructure)

class DuplicateFieldNumber(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuplicateFieldNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuplicateFieldNumber, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_DuplicateFieldNumber(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_DuplicateFieldNumber
    __del__ = lambda self : None;
DuplicateFieldNumber_swigregister = _quickfix.DuplicateFieldNumber_swigregister
DuplicateFieldNumber_swigregister(DuplicateFieldNumber)

class InvalidMessageType(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidMessageType, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidMessageType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_InvalidMessageType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_InvalidMessageType
    __del__ = lambda self : None;
InvalidMessageType_swigregister = _quickfix.InvalidMessageType_swigregister
InvalidMessageType_swigregister(InvalidMessageType)

class UnsupportedMessageType(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedMessageType, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedMessageType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_UnsupportedMessageType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_UnsupportedMessageType
    __del__ = lambda self : None;
UnsupportedMessageType_swigregister = _quickfix.UnsupportedMessageType_swigregister
UnsupportedMessageType_swigregister(UnsupportedMessageType)

class UnsupportedVersion(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedVersion, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedVersion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_UnsupportedVersion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_UnsupportedVersion
    __del__ = lambda self : None;
UnsupportedVersion_swigregister = _quickfix.UnsupportedVersion_swigregister
UnsupportedVersion_swigregister(UnsupportedVersion)

class TagOutOfOrder(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagOutOfOrder, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TagOutOfOrder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_TagOutOfOrder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.TagOutOfOrder_field_set
    __swig_getmethods__["field"] = _quickfix.TagOutOfOrder_field_get
    if _newclass:field = _swig_property(_quickfix.TagOutOfOrder_field_get, _quickfix.TagOutOfOrder_field_set)
    __swig_destroy__ = _quickfix.delete_TagOutOfOrder
    __del__ = lambda self : None;
TagOutOfOrder_swigregister = _quickfix.TagOutOfOrder_swigregister
TagOutOfOrder_swigregister(TagOutOfOrder)

class RepeatedTag(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatedTag, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatedTag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RepeatedTag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.RepeatedTag_field_set
    __swig_getmethods__["field"] = _quickfix.RepeatedTag_field_get
    __swig_destroy__ = _quickfix.delete_RepeatedTag
    __del__ = lambda self : None;
RepeatedTag_swigregister = _quickfix.RepeatedTag_swigregister
RepeatedTag_swigregister(RepeatedTag)

class RepeatingGroupCountMismatch(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatingGroupCountMismatch, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatingGroupCountMismatch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RepeatingGroupCountMismatch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["field"] = _quickfix.RepeatingGroupCountMismatch_field_set
    __swig_getmethods__["field"] = _quickfix.RepeatingGroupCountMismatch_field_get
    __swig_destroy__ = _quickfix.delete_RepeatingGroupCountMismatch
    __del__ = lambda self : None;
RepeatingGroupCountMismatch_swigregister = _quickfix.RepeatingGroupCountMismatch_swigregister
RepeatingGroupCountMismatch_swigregister(RepeatingGroupCountMismatch)

class DoNotSend(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoNotSend, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoNotSend, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_DoNotSend(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_DoNotSend
    __del__ = lambda self : None;
DoNotSend_swigregister = _quickfix.DoNotSend_swigregister
DoNotSend_swigregister(DoNotSend)

class RejectLogon(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RejectLogon, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RejectLogon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RejectLogon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_RejectLogon
    __del__ = lambda self : None;
RejectLogon_swigregister = _quickfix.RejectLogon_swigregister
RejectLogon_swigregister(RejectLogon)

class SessionNotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SessionNotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SessionNotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SessionNotFound
    __del__ = lambda self : None;
SessionNotFound_swigregister = _quickfix.SessionNotFound_swigregister
SessionNotFound_swigregister(SessionNotFound)

class IOException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IOException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_IOException
    __del__ = lambda self : None;
IOException_swigregister = _quickfix.IOException_swigregister
IOException_swigregister(IOException)

class SocketException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SocketException(*args)
        try: self.this.append(this)
        except: self.this = this
    def errorToWhat(*args): return _quickfix.SocketException_errorToWhat(*args)
    __swig_setmethods__["error"] = _quickfix.SocketException_error_set
    __swig_getmethods__["error"] = _quickfix.SocketException_error_get
    if _newclass:error = _swig_property(_quickfix.SocketException_error_get, _quickfix.SocketException_error_set)
    __swig_destroy__ = _quickfix.delete_SocketException
    __del__ = lambda self : None;
SocketException_swigregister = _quickfix.SocketException_swigregister
SocketException_swigregister(SocketException)

class SocketSendFailed(SocketException):
    __swig_setmethods__ = {}
    for _s in [SocketException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketSendFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [SocketException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketSendFailed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SocketSendFailed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SocketSendFailed
    __del__ = lambda self : None;
SocketSendFailed_swigregister = _quickfix.SocketSendFailed_swigregister
SocketSendFailed_swigregister(SocketSendFailed)

class SocketRecvFailed(SocketException):
    __swig_setmethods__ = {}
    for _s in [SocketException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketRecvFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [SocketException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketRecvFailed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SocketRecvFailed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SocketRecvFailed
    __del__ = lambda self : None;
SocketRecvFailed_swigregister = _quickfix.SocketRecvFailed_swigregister
SocketRecvFailed_swigregister(SocketRecvFailed)

class SocketCloseFailed(SocketException):
    __swig_setmethods__ = {}
    for _s in [SocketException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketCloseFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [SocketException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketCloseFailed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SocketCloseFailed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SocketCloseFailed
    __del__ = lambda self : None;
SocketCloseFailed_swigregister = _quickfix.SocketCloseFailed_swigregister
SocketCloseFailed_swigregister(SocketCloseFailed)

class FieldBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FieldBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FieldBase
    __del__ = lambda self : None;
    def setField(*args): return _quickfix.FieldBase_setField(*args)
    def setString(*args): return _quickfix.FieldBase_setString(*args)
    def getField(*args): return _quickfix.FieldBase_getField(*args)
    def getString(*args): return _quickfix.FieldBase_getString(*args)
    def getValue(*args): return _quickfix.FieldBase_getValue(*args)
    def getLength(*args): return _quickfix.FieldBase_getLength(*args)
    def getTotal(*args): return _quickfix.FieldBase_getTotal(*args)
    def __lt__(*args): return _quickfix.FieldBase___lt__(*args)
    def __str__(*args): return _quickfix.FieldBase___str__(*args)
FieldBase_swigregister = _quickfix.FieldBase_swigregister
FieldBase_swigregister(FieldBase)

class StringField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_StringField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.StringField_setValue(*args)
    def getValue(*args): return _quickfix.StringField_getValue(*args)
    def __lt__(*args): return _quickfix.StringField___lt__(*args)
    def __gt__(*args): return _quickfix.StringField___gt__(*args)
    def __eq__(*args): return _quickfix.StringField___eq__(*args)
    def __ne__(*args): return _quickfix.StringField___ne__(*args)
    def __le__(*args): return _quickfix.StringField___le__(*args)
    def __ge__(*args): return _quickfix.StringField___ge__(*args)
    __swig_destroy__ = _quickfix.delete_StringField
    __del__ = lambda self : None;
StringField_swigregister = _quickfix.StringField_swigregister
StringField_swigregister(StringField)

class CharField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CharField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_CharField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.CharField_setValue(*args)
    def getValue(*args): return _quickfix.CharField_getValue(*args)
    __swig_destroy__ = _quickfix.delete_CharField
    __del__ = lambda self : None;
CharField_swigregister = _quickfix.CharField_swigregister
CharField_swigregister(CharField)
__gt__ = _quickfix.__gt__
__le__ = _quickfix.__le__
__ge__ = _quickfix.__ge__

class DoubleField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_DoubleField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.DoubleField_setValue(*args)
    def getValue(*args): return _quickfix.DoubleField_getValue(*args)
    __swig_destroy__ = _quickfix.delete_DoubleField
    __del__ = lambda self : None;
DoubleField_swigregister = _quickfix.DoubleField_swigregister
DoubleField_swigregister(DoubleField)

class IntField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IntField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.IntField_setValue(*args)
    def getValue(*args): return _quickfix.IntField_getValue(*args)
    __swig_destroy__ = _quickfix.delete_IntField
    __del__ = lambda self : None;
IntField_swigregister = _quickfix.IntField_swigregister
IntField_swigregister(IntField)

class BoolField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoolField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_BoolField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.BoolField_setValue(*args)
    def getValue(*args): return _quickfix.BoolField_getValue(*args)
    __swig_destroy__ = _quickfix.delete_BoolField
    __del__ = lambda self : None;
BoolField_swigregister = _quickfix.BoolField_swigregister
BoolField_swigregister(BoolField)

class UtcTimeStampField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcTimeStampField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtcTimeStampField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_UtcTimeStampField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.UtcTimeStampField_setValue(*args)
    def getValue(*args): return _quickfix.UtcTimeStampField_getValue(*args)
    def __lt__(*args): return _quickfix.UtcTimeStampField___lt__(*args)
    def __eq__(*args): return _quickfix.UtcTimeStampField___eq__(*args)
    def __ne__(*args): return _quickfix.UtcTimeStampField___ne__(*args)
    __swig_destroy__ = _quickfix.delete_UtcTimeStampField
    __del__ = lambda self : None;
UtcTimeStampField_swigregister = _quickfix.UtcTimeStampField_swigregister
UtcTimeStampField_swigregister(UtcTimeStampField)

class UtcDateField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcDateField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtcDateField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_UtcDateField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.UtcDateField_setValue(*args)
    def getValue(*args): return _quickfix.UtcDateField_getValue(*args)
    def __lt__(*args): return _quickfix.UtcDateField___lt__(*args)
    def __eq__(*args): return _quickfix.UtcDateField___eq__(*args)
    def __ne__(*args): return _quickfix.UtcDateField___ne__(*args)
    __swig_destroy__ = _quickfix.delete_UtcDateField
    __del__ = lambda self : None;
UtcDateField_swigregister = _quickfix.UtcDateField_swigregister
UtcDateField_swigregister(UtcDateField)

class UtcTimeOnlyField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcTimeOnlyField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtcTimeOnlyField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_UtcTimeOnlyField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.UtcTimeOnlyField_setValue(*args)
    def getValue(*args): return _quickfix.UtcTimeOnlyField_getValue(*args)
    def __lt__(*args): return _quickfix.UtcTimeOnlyField___lt__(*args)
    def __eq__(*args): return _quickfix.UtcTimeOnlyField___eq__(*args)
    def __ne__(*args): return _quickfix.UtcTimeOnlyField___ne__(*args)
    __swig_destroy__ = _quickfix.delete_UtcTimeOnlyField
    __del__ = lambda self : None;
UtcTimeOnlyField_swigregister = _quickfix.UtcTimeOnlyField_swigregister
UtcTimeOnlyField_swigregister(UtcTimeOnlyField)

class CheckSumField(FieldBase):
    __swig_setmethods__ = {}
    for _s in [FieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckSumField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckSumField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_CheckSumField(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return _quickfix.CheckSumField_setValue(*args)
    def getValue(*args): return _quickfix.CheckSumField_getValue(*args)
    __swig_destroy__ = _quickfix.delete_CheckSumField
    __del__ = lambda self : None;
CheckSumField_swigregister = _quickfix.CheckSumField_swigregister
CheckSumField_swigregister(CheckSumField)

class FieldMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FieldMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FieldMap
    __del__ = lambda self : None;
    def setField(*args): return _quickfix.FieldMap_setField(*args)
    def getField(*args): return _quickfix.FieldMap_getField(*args)
    def getFieldRef(*args): return _quickfix.FieldMap_getFieldRef(*args)
    def getFieldPtr(*args): return _quickfix.FieldMap_getFieldPtr(*args)
    def isSetField(*args): return _quickfix.FieldMap_isSetField(*args)
    def removeField(*args): return _quickfix.FieldMap_removeField(*args)
    def addGroup(*args): return _quickfix.FieldMap_addGroup(*args)
    def replaceGroup(*args): return _quickfix.FieldMap_replaceGroup(*args)
    def getGroup(*args): return _quickfix.FieldMap_getGroup(*args)
    def getGroupRef(*args): return _quickfix.FieldMap_getGroupRef(*args)
    def getGroupPtr(*args): return _quickfix.FieldMap_getGroupPtr(*args)
    def removeGroup(*args): return _quickfix.FieldMap_removeGroup(*args)
    def hasGroup(*args): return _quickfix.FieldMap_hasGroup(*args)
    def groupCount(*args): return _quickfix.FieldMap_groupCount(*args)
    def clear(*args): return _quickfix.FieldMap_clear(*args)
    def isEmpty(*args): return _quickfix.FieldMap_isEmpty(*args)
    def totalFields(*args): return _quickfix.FieldMap_totalFields(*args)
    def calculateString(*args): return _quickfix.FieldMap_calculateString(*args)
    def calculateLength(*args): return _quickfix.FieldMap_calculateLength(*args)
    def calculateTotal(*args): return _quickfix.FieldMap_calculateTotal(*args)
    def begin(*args): return _quickfix.FieldMap_begin(*args)
    def end(*args): return _quickfix.FieldMap_end(*args)
    def g_begin(*args): return _quickfix.FieldMap_g_begin(*args)
    def g_end(*args): return _quickfix.FieldMap_g_end(*args)
FieldMap_swigregister = _quickfix.FieldMap_swigregister
FieldMap_swigregister(FieldMap)

class Message(FieldMap):
    __swig_setmethods__ = {}
    for _s in [FieldMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Message(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["InitializeXML"] = lambda x: _quickfix.Message_InitializeXML
    if _newclass:InitializeXML = staticmethod(_quickfix.Message_InitializeXML)
    def addGroup(*args): return _quickfix.Message_addGroup(*args)
    def replaceGroup(*args): return _quickfix.Message_replaceGroup(*args)
    def getGroup(*args): return _quickfix.Message_getGroup(*args)
    def removeGroup(*args): return _quickfix.Message_removeGroup(*args)
    def hasGroup(*args): return _quickfix.Message_hasGroup(*args)
    def toString(*args): return _quickfix.Message_toString(*args)
    def toXML(*args): return _quickfix.Message_toXML(*args)
    def reverseRoute(*args): return _quickfix.Message_reverseRoute(*args)
    def setString(*args): return _quickfix.Message_setString(*args)
    def setGroup(*args): return _quickfix.Message_setGroup(*args)
    def setStringHeader(*args): return _quickfix.Message_setStringHeader(*args)
    def getHeader(*args): return _quickfix.Message_getHeader(*args)
    def getTrailer(*args): return _quickfix.Message_getTrailer(*args)
    def hasValidStructure(*args): return _quickfix.Message_hasValidStructure(*args)
    def bodyLength(*args): return _quickfix.Message_bodyLength(*args)
    def checkSum(*args): return _quickfix.Message_checkSum(*args)
    def isAdmin(*args): return _quickfix.Message_isAdmin(*args)
    def isApp(*args): return _quickfix.Message_isApp(*args)
    def isEmpty(*args): return _quickfix.Message_isEmpty(*args)
    def clear(*args): return _quickfix.Message_clear(*args)
    __swig_getmethods__["isAdminMsgType"] = lambda x: _quickfix.Message_isAdminMsgType
    if _newclass:isAdminMsgType = staticmethod(_quickfix.Message_isAdminMsgType)
    __swig_getmethods__["toApplVerID"] = lambda x: _quickfix.Message_toApplVerID
    if _newclass:toApplVerID = staticmethod(_quickfix.Message_toApplVerID)
    __swig_getmethods__["toBeginString"] = lambda x: _quickfix.Message_toBeginString
    if _newclass:toBeginString = staticmethod(_quickfix.Message_toBeginString)
    __swig_getmethods__["isHeaderField"] = lambda x: _quickfix.Message_isHeaderField
    if _newclass:isHeaderField = staticmethod(_quickfix.Message_isHeaderField)
    __swig_getmethods__["isTrailerField"] = lambda x: _quickfix.Message_isTrailerField
    if _newclass:isTrailerField = staticmethod(_quickfix.Message_isTrailerField)
    def getSessionID(*args): return _quickfix.Message_getSessionID(*args)
    def setSessionID(*args): return _quickfix.Message_setSessionID(*args)
    def __str__(*args): return _quickfix.Message___str__(*args)
    __swig_destroy__ = _quickfix.delete_Message
    __del__ = lambda self : None;
Message_swigregister = _quickfix.Message_swigregister
Message_swigregister(Message)
cvar = _quickfix.cvar
headerOrder = cvar.headerOrder
Message_InitializeXML = _quickfix.Message_InitializeXML
Message_isAdminMsgType = _quickfix.Message_isAdminMsgType
Message_toApplVerID = _quickfix.Message_toApplVerID
Message_toBeginString = _quickfix.Message_toBeginString
Message_isHeaderField = _quickfix.Message_isHeaderField
Message_isTrailerField = _quickfix.Message_isTrailerField

identifyType = _quickfix.identifyType
class Group(FieldMap):
    __swig_setmethods__ = {}
    for _s in [FieldMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    def field(*args): return _quickfix.Group_field(*args)
    def delim(*args): return _quickfix.Group_delim(*args)
    def addGroup(*args): return _quickfix.Group_addGroup(*args)
    def replaceGroup(*args): return _quickfix.Group_replaceGroup(*args)
    def getGroup(*args): return _quickfix.Group_getGroup(*args)
    def removeGroup(*args): return _quickfix.Group_removeGroup(*args)
    def hasGroup(*args): return _quickfix.Group_hasGroup(*args)
    __swig_destroy__ = _quickfix.delete_Group
    __del__ = lambda self : None;
Group_swigregister = _quickfix.Group_swigregister
Group_swigregister(Group)

class IDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IDSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_IDSource
    __del__ = lambda self : None;
IDSource_swigregister = _quickfix.IDSource_swigregister
IDSource_swigregister(IDSource)

class IOIOthSvc(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIOthSvc, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIOthSvc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IOIOthSvc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_IOIOthSvc
    __del__ = lambda self : None;
IOIOthSvc_swigregister = _quickfix.IOIOthSvc_swigregister
IOIOthSvc_swigregister(IOIOthSvc)

class IOIShares(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIShares, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIShares, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_IOIShares(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_IOIShares
    __del__ = lambda self : None;
IOIShares_swigregister = _quickfix.IOIShares_swigregister
IOIShares_swigregister(IOIShares)

class LastShares(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastShares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastShares, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_LastShares(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_LastShares
    __del__ = lambda self : None;
LastShares_swigregister = _quickfix.LastShares_swigregister
LastShares_swigregister(LastShares)

class RelatdSym(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelatdSym, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelatdSym, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RelatdSym(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_RelatdSym
    __del__ = lambda self : None;
RelatdSym_swigregister = _quickfix.RelatdSym_swigregister
RelatdSym_swigregister(RelatdSym)

class Rule80A(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rule80A, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rule80A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Rule80A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_Rule80A
    __del__ = lambda self : None;
Rule80A_swigregister = _quickfix.Rule80A_swigregister
Rule80A_swigregister(Rule80A)

class Shares(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shares, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Shares(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_Shares
    __del__ = lambda self : None;
Shares_swigregister = _quickfix.Shares_swigregister
Shares_swigregister(Shares)

class SettlmntTyp(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlmntTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlmntTyp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SettlmntTyp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SettlmntTyp
    __del__ = lambda self : None;
SettlmntTyp_swigregister = _quickfix.SettlmntTyp_swigregister
SettlmntTyp_swigregister(SettlmntTyp)

class FutSettDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FutSettDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FutSettDate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FutSettDate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FutSettDate
    __del__ = lambda self : None;
FutSettDate_swigregister = _quickfix.FutSettDate_swigregister
FutSettDate_swigregister(FutSettDate)

class AvgPrxPrecision(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPrxPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPrxPrecision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_AvgPrxPrecision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_AvgPrxPrecision
    __del__ = lambda self : None;
AvgPrxPrecision_swigregister = _quickfix.AvgPrxPrecision_swigregister
AvgPrxPrecision_swigregister(AvgPrxPrecision)

class OpenClose(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenClose, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenClose, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_OpenClose(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_OpenClose
    __del__ = lambda self : None;
OpenClose_swigregister = _quickfix.OpenClose_swigregister
OpenClose_swigregister(OpenClose)

class AllocShares(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocShares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocShares, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_AllocShares(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_AllocShares
    __del__ = lambda self : None;
AllocShares_swigregister = _quickfix.AllocShares_swigregister
AllocShares_swigregister(AllocShares)

class FutSettDate2(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FutSettDate2, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FutSettDate2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FutSettDate2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FutSettDate2
    __del__ = lambda self : None;
FutSettDate2_swigregister = _quickfix.FutSettDate2_swigregister
FutSettDate2_swigregister(FutSettDate2)

class PegDifference(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegDifference, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegDifference, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_PegDifference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_PegDifference
    __del__ = lambda self : None;
PegDifference_swigregister = _quickfix.PegDifference_swigregister
PegDifference_swigregister(PegDifference)

class SpreadToBenchmark(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadToBenchmark, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadToBenchmark, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SpreadToBenchmark(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SpreadToBenchmark
    __del__ = lambda self : None;
SpreadToBenchmark_swigregister = _quickfix.SpreadToBenchmark_swigregister
SpreadToBenchmark_swigregister(SpreadToBenchmark)

class OpenCloseSettleFlag(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCloseSettleFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCloseSettleFlag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_OpenCloseSettleFlag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_OpenCloseSettleFlag
    __del__ = lambda self : None;
OpenCloseSettleFlag_swigregister = _quickfix.OpenCloseSettleFlag_swigregister
OpenCloseSettleFlag_swigregister(OpenCloseSettleFlag)

class UnderlyingIDSource(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIDSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_UnderlyingIDSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingIDSource
    __del__ = lambda self : None;
UnderlyingIDSource_swigregister = _quickfix.UnderlyingIDSource_swigregister
UnderlyingIDSource_swigregister(UnderlyingIDSource)

class QuoteAckStatus(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteAckStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteAckStatus, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_QuoteAckStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteAckStatus
    __del__ = lambda self : None;
QuoteAckStatus_swigregister = _quickfix.QuoteAckStatus_swigregister
QuoteAckStatus_swigregister(QuoteAckStatus)

class TotQuoteEntries(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotQuoteEntries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_TotQuoteEntries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_TotQuoteEntries
    __del__ = lambda self : None;
TotQuoteEntries_swigregister = _quickfix.TotQuoteEntries_swigregister
TotQuoteEntries_swigregister(TotQuoteEntries)

class DiscretionOffset(DoubleField):
    __swig_setmethods__ = {}
    for _s in [DoubleField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_DiscretionOffset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionOffset
    __del__ = lambda self : None;
DiscretionOffset_swigregister = _quickfix.DiscretionOffset_swigregister
DiscretionOffset_swigregister(DiscretionOffset)

class TotalNumSecurities(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumSecurities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumSecurities, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_TotalNumSecurities(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_TotalNumSecurities
    __del__ = lambda self : None;
TotalNumSecurities_swigregister = _quickfix.TotalNumSecurities_swigregister
TotalNumSecurities_swigregister(TotalNumSecurities)

class TradeType(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_TradeType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_TradeType
    __del__ = lambda self : None;
TradeType_swigregister = _quickfix.TradeType_swigregister
TradeType_swigregister(TradeType)

class CardIssNo(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardIssNo, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardIssNo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_CardIssNo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_CardIssNo
    __del__ = lambda self : None;
CardIssNo_swigregister = _quickfix.CardIssNo_swigregister
CardIssNo_swigregister(CardIssNo)

class RegistDetls(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistDetls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistDetls, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_RegistDetls(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_RegistDetls
    __del__ = lambda self : None;
RegistDetls_swigregister = _quickfix.RegistDetls_swigregister
RegistDetls_swigregister(RegistDetls)

class TotalNumSecurityTypes(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumSecurityTypes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_TotalNumSecurityTypes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_TotalNumSecurityTypes
    __del__ = lambda self : None;
TotalNumSecurityTypes_swigregister = _quickfix.TotalNumSecurityTypes_swigregister
TotalNumSecurityTypes_swigregister(TotalNumSecurityTypes)

class LegSettlmntTyp(CharField):
    __swig_setmethods__ = {}
    for _s in [CharField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlmntTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlmntTyp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_LegSettlmntTyp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_LegSettlmntTyp
    __del__ = lambda self : None;
LegSettlmntTyp_swigregister = _quickfix.LegSettlmntTyp_swigregister
LegSettlmntTyp_swigregister(LegSettlmntTyp)

class LegFutSettDate(StringField):
    __swig_setmethods__ = {}
    for _s in [StringField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegFutSettDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegFutSettDate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_LegFutSettDate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_LegFutSettDate
    __del__ = lambda self : None;
LegFutSettDate_swigregister = _quickfix.LegFutSettDate_swigregister
LegFutSettDate_swigregister(LegFutSettDate)

class LinesOfText(IntField):
    __swig_setmethods__ = {}
    for _s in [IntField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinesOfText, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinesOfText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_LinesOfText(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_LinesOfText
    __del__ = lambda self : None;
LinesOfText_swigregister = _quickfix.LinesOfText_swigregister
LinesOfText_swigregister(LinesOfText)

class SessionID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionID, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SessionID(*args)
        try: self.this.append(this)
        except: self.this = this
    def getBeginString(*args): return _quickfix.SessionID_getBeginString(*args)
    def getSenderCompID(*args): return _quickfix.SessionID_getSenderCompID(*args)
    def getTargetCompID(*args): return _quickfix.SessionID_getTargetCompID(*args)
    def getSessionQualifier(*args): return _quickfix.SessionID_getSessionQualifier(*args)
    def isFIXT(*args): return _quickfix.SessionID_isFIXT(*args)
    def toStringFrozen(*args): return _quickfix.SessionID_toStringFrozen(*args)
    def fromString(*args): return _quickfix.SessionID_fromString(*args)
    def toString(*args): return _quickfix.SessionID_toString(*args)
    def __invert__(*args): return _quickfix.SessionID___invert__(*args)
    def __str__(*args): return _quickfix.SessionID___str__(*args)
    __swig_destroy__ = _quickfix.delete_SessionID
    __del__ = lambda self : None;
SessionID_swigregister = _quickfix.SessionID_swigregister
SessionID_swigregister(SessionID)
BeginString_FIXT11 = cvar.BeginString_FIXT11
BeginString_FIX44 = cvar.BeginString_FIX44
BeginString_FIX43 = cvar.BeginString_FIX43
BeginString_FIX42 = cvar.BeginString_FIX42
BeginString_FIX41 = cvar.BeginString_FIX41
BeginString_FIX40 = cvar.BeginString_FIX40
ApplVerId_FIX50 = cvar.ApplVerId_FIX50
ApplVerId_FIX44 = cvar.ApplVerId_FIX44
ApplVerId_FIX43 = cvar.ApplVerId_FIX43
ApplVerId_FIX42 = cvar.ApplVerId_FIX42
ApplVerId_FIX41 = cvar.ApplVerId_FIX41
ApplVerId_FIX40 = cvar.ApplVerId_FIX40
SessionRejectReason_INVALID_TAG_NUMBER_TEXT = cvar.SessionRejectReason_INVALID_TAG_NUMBER_TEXT
SessionRejectReason_REQUIRED_TAG_MISSING_TEXT = cvar.SessionRejectReason_REQUIRED_TAG_MISSING_TEXT
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT
SessionRejectReason_UNDEFINED_TAG_TEXT = cvar.SessionRejectReason_UNDEFINED_TAG_TEXT
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT
SessionRejectReason_VALUE_IS_INCORRECT_TEXT = cvar.SessionRejectReason_VALUE_IS_INCORRECT_TEXT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT
SessionRejectReason_DECRYPTION_PROBLEM_TEXT = cvar.SessionRejectReason_DECRYPTION_PROBLEM_TEXT
SessionRejectReason_SIGNATURE_PROBLEM_TEXT = cvar.SessionRejectReason_SIGNATURE_PROBLEM_TEXT
SessionRejectReason_COMPID_PROBLEM_TEXT = cvar.SessionRejectReason_COMPID_PROBLEM_TEXT
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT
SessionRejectReason_INVALID_MSGTYPE_TEXT = cvar.SessionRejectReason_INVALID_MSGTYPE_TEXT
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT
BusinessRejectReason_OTHER_TEXT = cvar.BusinessRejectReason_OTHER_TEXT
BusinessRejectReason_UNKNOWN_ID_TEXT = cvar.BusinessRejectReason_UNKNOWN_ID_TEXT
BusinessRejectReason_UNKNOWN_SECURITY_TEXT = cvar.BusinessRejectReason_UNKNOWN_SECURITY_TEXT
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT
BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT
BusinessRejectReason_NOT_AUTHORIZED_TEXT = cvar.BusinessRejectReason_NOT_AUTHORIZED_TEXT
BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT = cvar.BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT
IDSource_CUSIP = cvar.IDSource_CUSIP
IDSource_SEDOL = cvar.IDSource_SEDOL
IDSource_QUIK = cvar.IDSource_QUIK
IDSource_ISIN_NUMBER = cvar.IDSource_ISIN_NUMBER
IDSource_RIC_CODE = cvar.IDSource_RIC_CODE
IDSource_ISO_CURRENCY_CODE = cvar.IDSource_ISO_CURRENCY_CODE
IDSource_ISO_COUNTRY_CODE = cvar.IDSource_ISO_COUNTRY_CODE
IDSource_EXCHANGE_SYMBOL = cvar.IDSource_EXCHANGE_SYMBOL
IDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.IDSource_CONSOLIDATED_TAPE_ASSOCIATION
IOIShares_SMALL = cvar.IOIShares_SMALL
IOIShares_MEDIUM = cvar.IOIShares_MEDIUM
IOIShares_LARGE = cvar.IOIShares_LARGE
Rule80A_AGENCY_SINGLE_ORDER = cvar.Rule80A_AGENCY_SINGLE_ORDER
Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL
Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE
Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE
Rule80A_INDIVIDUAL_INVESTOR = cvar.Rule80A_INDIVIDUAL_INVESTOR
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_SHORT_EXEMPT_AFFILIATED = cvar.Rule80A_SHORT_EXEMPT_AFFILIATED
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROPRIETARY_AFFILIATED = cvar.Rule80A_PROPRIETARY_AFFILIATED
Rule80A_PRINCIPAL = cvar.Rule80A_PRINCIPAL
Rule80A_TRANSACTIONS_NON_MEMBER = cvar.Rule80A_TRANSACTIONS_NON_MEMBER
Rule80A_SPECIALIST_TRADES = cvar.Rule80A_SPECIALIST_TRADES
Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER = cvar.Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER = cvar.Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER
Rule80A_SHORT_EXEMPT_NOT_AFFILIATED = cvar.Rule80A_SHORT_EXEMPT_NOT_AFFILIATED
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_SHORT_EXEMPT_NONMEMBER = cvar.Rule80A_SHORT_EXEMPT_NONMEMBER
SettlmntTyp_REGULAR = cvar.SettlmntTyp_REGULAR
SettlmntTyp_CASH = cvar.SettlmntTyp_CASH
SettlmntTyp_NEXT_DAY = cvar.SettlmntTyp_NEXT_DAY
SettlmntTyp_T_PLUS_2 = cvar.SettlmntTyp_T_PLUS_2
SettlmntTyp_T_PLUS_3 = cvar.SettlmntTyp_T_PLUS_3
SettlmntTyp_T_PLUS_4 = cvar.SettlmntTyp_T_PLUS_4
SettlmntTyp_FUTURE = cvar.SettlmntTyp_FUTURE
SettlmntTyp_WHEN_AND_IF_ISSUED = cvar.SettlmntTyp_WHEN_AND_IF_ISSUED
SettlmntTyp_SELLERS_OPTION = cvar.SettlmntTyp_SELLERS_OPTION
SettlmntTyp_T_PLUS_5 = cvar.SettlmntTyp_T_PLUS_5
SettlmntTyp_T_PLUS_1 = cvar.SettlmntTyp_T_PLUS_1
OpenClose_OPEN = cvar.OpenClose_OPEN
OpenClose_CLOSE = cvar.OpenClose_CLOSE
OpenCloseSettleFlag_DAILY_OPEN = cvar.OpenCloseSettleFlag_DAILY_OPEN
OpenCloseSettleFlag_SESSION_OPEN = cvar.OpenCloseSettleFlag_SESSION_OPEN
OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE = cvar.OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE
OpenCloseSettleFlag_EXPECTED_PRICE = cvar.OpenCloseSettleFlag_EXPECTED_PRICE
OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY

class Dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dictionary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Dictionary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_Dictionary
    __del__ = lambda self : None;
    def getName(*args): return _quickfix.Dictionary_getName(*args)
    def size(*args): return _quickfix.Dictionary_size(*args)
    def getString(*args): return _quickfix.Dictionary_getString(*args)
    def getLong(*args): return _quickfix.Dictionary_getLong(*args)
    def getDouble(*args): return _quickfix.Dictionary_getDouble(*args)
    def getBool(*args): return _quickfix.Dictionary_getBool(*args)
    def getDay(*args): return _quickfix.Dictionary_getDay(*args)
    def setString(*args): return _quickfix.Dictionary_setString(*args)
    def setLong(*args): return _quickfix.Dictionary_setLong(*args)
    def setDouble(*args): return _quickfix.Dictionary_setDouble(*args)
    def setBool(*args): return _quickfix.Dictionary_setBool(*args)
    def setDay(*args): return _quickfix.Dictionary_setDay(*args)
    def has(*args): return _quickfix.Dictionary_has(*args)
    def merge(*args): return _quickfix.Dictionary_merge(*args)
    def begin(*args): return _quickfix.Dictionary_begin(*args)
    def end(*args): return _quickfix.Dictionary_end(*args)
Dictionary_swigregister = _quickfix.Dictionary_swigregister
Dictionary_swigregister(Dictionary)
__lt__ = _quickfix.__lt__
__eq__ = _quickfix.__eq__
__ne__ = _quickfix.__ne__

class SessionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionSettings, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SessionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def has(*args): return _quickfix.SessionSettings_has(*args)
    def get(*args): return _quickfix.SessionSettings_get(*args)
    def set(*args): return _quickfix.SessionSettings_set(*args)
    def size(*args): return _quickfix.SessionSettings_size(*args)
    def getSessions(*args): return _quickfix.SessionSettings_getSessions(*args)
    __swig_destroy__ = _quickfix.delete_SessionSettings
    __del__ = lambda self : None;
SessionSettings_swigregister = _quickfix.SessionSettings_swigregister
SessionSettings_swigregister(SessionSettings)
BEGINSTRING = cvar.BEGINSTRING
SENDERCOMPID = cvar.SENDERCOMPID
TARGETCOMPID = cvar.TARGETCOMPID
SESSION_QUALIFIER = cvar.SESSION_QUALIFIER
DEFAULT_APPLVERID = cvar.DEFAULT_APPLVERID
CONNECTION_TYPE = cvar.CONNECTION_TYPE
USE_DATA_DICTIONARY = cvar.USE_DATA_DICTIONARY
SEND_RESETSEQNUMFLAG = cvar.SEND_RESETSEQNUMFLAG
SEND_REDUNDANT_RESENDREQUESTS = cvar.SEND_REDUNDANT_RESENDREQUESTS
DATA_DICTIONARY = cvar.DATA_DICTIONARY
TRANSPORT_DATA_DICTIONARY = cvar.TRANSPORT_DATA_DICTIONARY
APP_DATA_DICTIONARY = cvar.APP_DATA_DICTIONARY
USE_LOCAL_TIME = cvar.USE_LOCAL_TIME
START_TIME = cvar.START_TIME
END_TIME = cvar.END_TIME
START_DAY = cvar.START_DAY
END_DAY = cvar.END_DAY
LOGON_TIME = cvar.LOGON_TIME
LOGOUT_TIME = cvar.LOGOUT_TIME
LOGON_DAY = cvar.LOGON_DAY
LOGOUT_DAY = cvar.LOGOUT_DAY
CHECK_COMPID = cvar.CHECK_COMPID
CHECK_LATENCY = cvar.CHECK_LATENCY
MAX_LATENCY = cvar.MAX_LATENCY
HEARTBTINT = cvar.HEARTBTINT
SOCKET_ACCEPT_PORT = cvar.SOCKET_ACCEPT_PORT
SOCKET_REUSE_ADDRESS = cvar.SOCKET_REUSE_ADDRESS
SOCKET_CONNECT_HOST = cvar.SOCKET_CONNECT_HOST
SOCKET_CONNECT_PORT = cvar.SOCKET_CONNECT_PORT
SOCKET_NODELAY = cvar.SOCKET_NODELAY
SOCKET_SEND_BUFFER_SIZE = cvar.SOCKET_SEND_BUFFER_SIZE
SOCKET_RECEIVE_BUFFER_SIZE = cvar.SOCKET_RECEIVE_BUFFER_SIZE
RECONNECT_INTERVAL = cvar.RECONNECT_INTERVAL
VALIDATE_FIELDS_OUT_OF_ORDER = cvar.VALIDATE_FIELDS_OUT_OF_ORDER
VALIDATE_FIELDS_HAVE_VALUES = cvar.VALIDATE_FIELDS_HAVE_VALUES
VALIDATE_USER_DEFINED_FIELDS = cvar.VALIDATE_USER_DEFINED_FIELDS
LOGON_TIMEOUT = cvar.LOGON_TIMEOUT
LOGOUT_TIMEOUT = cvar.LOGOUT_TIMEOUT
FILE_STORE_PATH = cvar.FILE_STORE_PATH
MYSQL_STORE_USECONNECTIONPOOL = cvar.MYSQL_STORE_USECONNECTIONPOOL
MYSQL_STORE_DATABASE = cvar.MYSQL_STORE_DATABASE
MYSQL_STORE_USER = cvar.MYSQL_STORE_USER
MYSQL_STORE_PASSWORD = cvar.MYSQL_STORE_PASSWORD
MYSQL_STORE_HOST = cvar.MYSQL_STORE_HOST
MYSQL_STORE_PORT = cvar.MYSQL_STORE_PORT
POSTGRESQL_STORE_USECONNECTIONPOOL = cvar.POSTGRESQL_STORE_USECONNECTIONPOOL
POSTGRESQL_STORE_DATABASE = cvar.POSTGRESQL_STORE_DATABASE
POSTGRESQL_STORE_USER = cvar.POSTGRESQL_STORE_USER
POSTGRESQL_STORE_PASSWORD = cvar.POSTGRESQL_STORE_PASSWORD
POSTGRESQL_STORE_HOST = cvar.POSTGRESQL_STORE_HOST
POSTGRESQL_STORE_PORT = cvar.POSTGRESQL_STORE_PORT
ODBC_STORE_USER = cvar.ODBC_STORE_USER
ODBC_STORE_PASSWORD = cvar.ODBC_STORE_PASSWORD
ODBC_STORE_CONNECTION_STRING = cvar.ODBC_STORE_CONNECTION_STRING
FILE_LOG_PATH = cvar.FILE_LOG_PATH
FILE_LOG_BACKUP_PATH = cvar.FILE_LOG_BACKUP_PATH
SCREEN_LOG_SHOW_INCOMING = cvar.SCREEN_LOG_SHOW_INCOMING
SCREEN_LOG_SHOW_OUTGOING = cvar.SCREEN_LOG_SHOW_OUTGOING
SCREEN_LOG_SHOW_EVENTS = cvar.SCREEN_LOG_SHOW_EVENTS
MYSQL_LOG_USECONNECTIONPOOL = cvar.MYSQL_LOG_USECONNECTIONPOOL
MYSQL_LOG_DATABASE = cvar.MYSQL_LOG_DATABASE
MYSQL_LOG_USER = cvar.MYSQL_LOG_USER
MYSQL_LOG_PASSWORD = cvar.MYSQL_LOG_PASSWORD
MYSQL_LOG_HOST = cvar.MYSQL_LOG_HOST
MYSQL_LOG_PORT = cvar.MYSQL_LOG_PORT
MYSQL_LOG_INCOMING_TABLE = cvar.MYSQL_LOG_INCOMING_TABLE
MYSQL_LOG_OUTGOING_TABLE = cvar.MYSQL_LOG_OUTGOING_TABLE
MYSQL_LOG_EVENT_TABLE = cvar.MYSQL_LOG_EVENT_TABLE
POSTGRESQL_LOG_USECONNECTIONPOOL = cvar.POSTGRESQL_LOG_USECONNECTIONPOOL
POSTGRESQL_LOG_DATABASE = cvar.POSTGRESQL_LOG_DATABASE
POSTGRESQL_LOG_USER = cvar.POSTGRESQL_LOG_USER
POSTGRESQL_LOG_PASSWORD = cvar.POSTGRESQL_LOG_PASSWORD
POSTGRESQL_LOG_HOST = cvar.POSTGRESQL_LOG_HOST
POSTGRESQL_LOG_PORT = cvar.POSTGRESQL_LOG_PORT
POSTGRESQL_LOG_INCOMING_TABLE = cvar.POSTGRESQL_LOG_INCOMING_TABLE
POSTGRESQL_LOG_OUTGOING_TABLE = cvar.POSTGRESQL_LOG_OUTGOING_TABLE
POSTGRESQL_LOG_EVENT_TABLE = cvar.POSTGRESQL_LOG_EVENT_TABLE
ODBC_LOG_USER = cvar.ODBC_LOG_USER
ODBC_LOG_PASSWORD = cvar.ODBC_LOG_PASSWORD
ODBC_LOG_CONNECTION_STRING = cvar.ODBC_LOG_CONNECTION_STRING
ODBC_LOG_INCOMING_TABLE = cvar.ODBC_LOG_INCOMING_TABLE
ODBC_LOG_OUTGOING_TABLE = cvar.ODBC_LOG_OUTGOING_TABLE
ODBC_LOG_EVENT_TABLE = cvar.ODBC_LOG_EVENT_TABLE
RESET_ON_LOGON = cvar.RESET_ON_LOGON
RESET_ON_LOGOUT = cvar.RESET_ON_LOGOUT
RESET_ON_DISCONNECT = cvar.RESET_ON_DISCONNECT
REFRESH_ON_LOGON = cvar.REFRESH_ON_LOGON
MILLISECONDS_IN_TIMESTAMP = cvar.MILLISECONDS_IN_TIMESTAMP
HTTP_ACCEPT_PORT = cvar.HTTP_ACCEPT_PORT
PERSIST_MESSAGES = cvar.PERSIST_MESSAGES

class Session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_Session(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_Session
    __del__ = lambda self : None;
    def logon(*args): return _quickfix.Session_logon(*args)
    def logout(*args): return _quickfix.Session_logout(*args)
    def isEnabled(*args): return _quickfix.Session_isEnabled(*args)
    def sentLogon(*args): return _quickfix.Session_sentLogon(*args)
    def sentLogout(*args): return _quickfix.Session_sentLogout(*args)
    def receivedLogon(*args): return _quickfix.Session_receivedLogon(*args)
    def isLoggedOn(*args): return _quickfix.Session_isLoggedOn(*args)
    def reset(*args): return _quickfix.Session_reset(*args)
    def refresh(*args): return _quickfix.Session_refresh(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.Session_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.Session_setNextTargetMsgSeqNum(*args)
    def getSessionID(*args): return _quickfix.Session_getSessionID(*args)
    def setDataDictionaryProvider(*args): return _quickfix.Session_setDataDictionaryProvider(*args)
    def getDataDictionaryProvider(*args): return _quickfix.Session_getDataDictionaryProvider(*args)
    __swig_getmethods__["sendToTarget"] = lambda x: _quickfix.Session_sendToTarget
    if _newclass:sendToTarget = staticmethod(_quickfix.Session_sendToTarget)
    __swig_getmethods__["getSessions"] = lambda x: _quickfix.Session_getSessions
    if _newclass:getSessions = staticmethod(_quickfix.Session_getSessions)
    __swig_getmethods__["doesSessionExist"] = lambda x: _quickfix.Session_doesSessionExist
    if _newclass:doesSessionExist = staticmethod(_quickfix.Session_doesSessionExist)
    __swig_getmethods__["lookupSession"] = lambda x: _quickfix.Session_lookupSession
    if _newclass:lookupSession = staticmethod(_quickfix.Session_lookupSession)
    __swig_getmethods__["isSessionRegistered"] = lambda x: _quickfix.Session_isSessionRegistered
    if _newclass:isSessionRegistered = staticmethod(_quickfix.Session_isSessionRegistered)
    __swig_getmethods__["registerSession"] = lambda x: _quickfix.Session_registerSession
    if _newclass:registerSession = staticmethod(_quickfix.Session_registerSession)
    __swig_getmethods__["unregisterSession"] = lambda x: _quickfix.Session_unregisterSession
    if _newclass:unregisterSession = staticmethod(_quickfix.Session_unregisterSession)
    __swig_getmethods__["numSessions"] = lambda x: _quickfix.Session_numSessions
    if _newclass:numSessions = staticmethod(_quickfix.Session_numSessions)
    def isSessionTime(*args): return _quickfix.Session_isSessionTime(*args)
    def isLogonTime(*args): return _quickfix.Session_isLogonTime(*args)
    def isInitiator(*args): return _quickfix.Session_isInitiator(*args)
    def isAcceptor(*args): return _quickfix.Session_isAcceptor(*args)
    def getLogonTime(*args): return _quickfix.Session_getLogonTime(*args)
    def setLogonTime(*args): return _quickfix.Session_setLogonTime(*args)
    def getSenderDefaultApplVerID(*args): return _quickfix.Session_getSenderDefaultApplVerID(*args)
    def setSenderDefaultApplVerID(*args): return _quickfix.Session_setSenderDefaultApplVerID(*args)
    def getTargetDefaultApplVerID(*args): return _quickfix.Session_getTargetDefaultApplVerID(*args)
    def setTargetDefaultApplVerID(*args): return _quickfix.Session_setTargetDefaultApplVerID(*args)
    def getSendRedundantResendRequests(*args): return _quickfix.Session_getSendRedundantResendRequests(*args)
    def setSendRedundantResendRequests(*args): return _quickfix.Session_setSendRedundantResendRequests(*args)
    def getCheckCompId(*args): return _quickfix.Session_getCheckCompId(*args)
    def setCheckCompId(*args): return _quickfix.Session_setCheckCompId(*args)
    def getCheckLatency(*args): return _quickfix.Session_getCheckLatency(*args)
    def setCheckLatency(*args): return _quickfix.Session_setCheckLatency(*args)
    def getMaxLatency(*args): return _quickfix.Session_getMaxLatency(*args)
    def setMaxLatency(*args): return _quickfix.Session_setMaxLatency(*args)
    def getLogonTimeout(*args): return _quickfix.Session_getLogonTimeout(*args)
    def setLogonTimeout(*args): return _quickfix.Session_setLogonTimeout(*args)
    def getLogoutTimeout(*args): return _quickfix.Session_getLogoutTimeout(*args)
    def setLogoutTimeout(*args): return _quickfix.Session_setLogoutTimeout(*args)
    def getResetOnLogon(*args): return _quickfix.Session_getResetOnLogon(*args)
    def setResetOnLogon(*args): return _quickfix.Session_setResetOnLogon(*args)
    def getResetOnLogout(*args): return _quickfix.Session_getResetOnLogout(*args)
    def setResetOnLogout(*args): return _quickfix.Session_setResetOnLogout(*args)
    def getResetOnDisconnect(*args): return _quickfix.Session_getResetOnDisconnect(*args)
    def setResetOnDisconnect(*args): return _quickfix.Session_setResetOnDisconnect(*args)
    def getRefreshOnLogon(*args): return _quickfix.Session_getRefreshOnLogon(*args)
    def setRefreshOnLogon(*args): return _quickfix.Session_setRefreshOnLogon(*args)
    def getMillisecondsInTimeStamp(*args): return _quickfix.Session_getMillisecondsInTimeStamp(*args)
    def setMillisecondsInTimeStamp(*args): return _quickfix.Session_setMillisecondsInTimeStamp(*args)
    def getPersistMessages(*args): return _quickfix.Session_getPersistMessages(*args)
    def setPersistMessages(*args): return _quickfix.Session_setPersistMessages(*args)
    def setResponder(*args): return _quickfix.Session_setResponder(*args)
    def send(*args): return _quickfix.Session_send(*args)
    def next(*args): return _quickfix.Session_next(*args)
    def disconnect(*args): return _quickfix.Session_disconnect(*args)
    def getExpectedSenderNum(*args): return _quickfix.Session_getExpectedSenderNum(*args)
    def getExpectedTargetNum(*args): return _quickfix.Session_getExpectedTargetNum(*args)
    def getLog(*args): return _quickfix.Session_getLog(*args)
    def getStore(*args): return _quickfix.Session_getStore(*args)
Session_swigregister = _quickfix.Session_swigregister
Session_swigregister(Session)
__rshift__ = _quickfix.__rshift__
__lshift__ = _quickfix.__lshift__
Session_sendToTarget = _quickfix.Session_sendToTarget
Session_getSessions = _quickfix.Session_getSessions
Session_doesSessionExist = _quickfix.Session_doesSessionExist
Session_lookupSession = _quickfix.Session_lookupSession
Session_isSessionRegistered = _quickfix.Session_isSessionRegistered
Session_registerSession = _quickfix.Session_registerSession
Session_unregisterSession = _quickfix.Session_unregisterSession
Session_numSessions = _quickfix.Session_numSessions

class LogFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFactory, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_LogFactory
    __del__ = lambda self : None;
    def create(*args): return _quickfix.LogFactory_create(*args)
    def destroy(*args): return _quickfix.LogFactory_destroy(*args)
LogFactory_swigregister = _quickfix.LogFactory_swigregister
LogFactory_swigregister(LogFactory)

class ScreenLogFactory(LogFactory):
    __swig_setmethods__ = {}
    for _s in [LogFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenLogFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [LogFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenLogFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_ScreenLogFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(*args): return _quickfix.ScreenLogFactory_create(*args)
    def destroy(*args): return _quickfix.ScreenLogFactory_destroy(*args)
    __swig_destroy__ = _quickfix.delete_ScreenLogFactory
    __del__ = lambda self : None;
ScreenLogFactory_swigregister = _quickfix.ScreenLogFactory_swigregister
ScreenLogFactory_swigregister(ScreenLogFactory)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Log
    __del__ = lambda self : None;
    def clear(*args): return _quickfix.Log_clear(*args)
    def backup(*args): return _quickfix.Log_backup(*args)
    def onIncoming(*args): return _quickfix.Log_onIncoming(*args)
    def onOutgoing(*args): return _quickfix.Log_onOutgoing(*args)
    def onEvent(*args): return _quickfix.Log_onEvent(*args)
Log_swigregister = _quickfix.Log_swigregister
Log_swigregister(Log)

class ScreenLog(Log):
    __swig_setmethods__ = {}
    for _s in [Log]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenLog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_ScreenLog(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _quickfix.ScreenLog_clear(*args)
    def backup(*args): return _quickfix.ScreenLog_backup(*args)
    def onIncoming(*args): return _quickfix.ScreenLog_onIncoming(*args)
    def onOutgoing(*args): return _quickfix.ScreenLog_onOutgoing(*args)
    def onEvent(*args): return _quickfix.ScreenLog_onEvent(*args)
    def getMillisecondsInTimeStamp(*args): return _quickfix.ScreenLog_getMillisecondsInTimeStamp(*args)
    def setMillisecondsInTimeStamp(*args): return _quickfix.ScreenLog_setMillisecondsInTimeStamp(*args)
    __swig_destroy__ = _quickfix.delete_ScreenLog
    __del__ = lambda self : None;
ScreenLog_swigregister = _quickfix.ScreenLog_swigregister
ScreenLog_swigregister(ScreenLog)

class FileLogFactory(LogFactory):
    __swig_setmethods__ = {}
    for _s in [LogFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLogFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [LogFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileLogFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FileLogFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(*args): return _quickfix.FileLogFactory_create(*args)
    def destroy(*args): return _quickfix.FileLogFactory_destroy(*args)
    __swig_destroy__ = _quickfix.delete_FileLogFactory
    __del__ = lambda self : None;
FileLogFactory_swigregister = _quickfix.FileLogFactory_swigregister
FileLogFactory_swigregister(FileLogFactory)

class FileLog(Log):
    __swig_setmethods__ = {}
    for _s in [Log]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileLog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FileLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FileLog
    __del__ = lambda self : None;
    def clear(*args): return _quickfix.FileLog_clear(*args)
    def backup(*args): return _quickfix.FileLog_backup(*args)
    def onIncoming(*args): return _quickfix.FileLog_onIncoming(*args)
    def onOutgoing(*args): return _quickfix.FileLog_onOutgoing(*args)
    def onEvent(*args): return _quickfix.FileLog_onEvent(*args)
    def getMillisecondsInTimeStamp(*args): return _quickfix.FileLog_getMillisecondsInTimeStamp(*args)
    def setMillisecondsInTimeStamp(*args): return _quickfix.FileLog_setMillisecondsInTimeStamp(*args)
FileLog_swigregister = _quickfix.FileLog_swigregister
FileLog_swigregister(FileLog)

class MessageStoreFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreFactory, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStoreFactory
    __del__ = lambda self : None;
    def create(*args): return _quickfix.MessageStoreFactory_create(*args)
    def destroy(*args): return _quickfix.MessageStoreFactory_destroy(*args)
MessageStoreFactory_swigregister = _quickfix.MessageStoreFactory_swigregister
MessageStoreFactory_swigregister(MessageStoreFactory)

class MemoryStoreFactory(MessageStoreFactory):
    __swig_setmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStoreFactory, name)
    __repr__ = _swig_repr
    def create(*args): return _quickfix.MemoryStoreFactory_create(*args)
    def destroy(*args): return _quickfix.MemoryStoreFactory_destroy(*args)
    def __init__(self, *args): 
        this = _quickfix.new_MemoryStoreFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_MemoryStoreFactory
    __del__ = lambda self : None;
MemoryStoreFactory_swigregister = _quickfix.MemoryStoreFactory_swigregister
MemoryStoreFactory_swigregister(MemoryStoreFactory)

class MessageStore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStore, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStore
    __del__ = lambda self : None;
    def set(*args): return _quickfix.MessageStore_set(*args)
    def get(*args): return _quickfix.MessageStore_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.MessageStore_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.MessageStore_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.MessageStore_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.MessageStore_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.MessageStore_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.MessageStore_incrNextTargetMsgSeqNum(*args)
    def getCreationTime(*args): return _quickfix.MessageStore_getCreationTime(*args)
    def reset(*args): return _quickfix.MessageStore_reset(*args)
    def refresh(*args): return _quickfix.MessageStore_refresh(*args)
MessageStore_swigregister = _quickfix.MessageStore_swigregister
MessageStore_swigregister(MessageStore)

class MemoryStore(MessageStore):
    __swig_setmethods__ = {}
    for _s in [MessageStore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStore, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStore, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_MemoryStore(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args): return _quickfix.MemoryStore_set(*args)
    def get(*args): return _quickfix.MemoryStore_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.MemoryStore_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.MemoryStore_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.MemoryStore_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.MemoryStore_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.MemoryStore_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.MemoryStore_incrNextTargetMsgSeqNum(*args)
    def setCreationTime(*args): return _quickfix.MemoryStore_setCreationTime(*args)
    def getCreationTime(*args): return _quickfix.MemoryStore_getCreationTime(*args)
    def reset(*args): return _quickfix.MemoryStore_reset(*args)
    def refresh(*args): return _quickfix.MemoryStore_refresh(*args)
    __swig_destroy__ = _quickfix.delete_MemoryStore
    __del__ = lambda self : None;
MemoryStore_swigregister = _quickfix.MemoryStore_swigregister
MemoryStore_swigregister(MemoryStore)

class MessageStoreFactoryExceptionWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreFactoryExceptionWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreFactoryExceptionWrapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_MessageStoreFactoryExceptionWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(*args): return _quickfix.MessageStoreFactoryExceptionWrapper_create(*args)
    def destroy(*args): return _quickfix.MessageStoreFactoryExceptionWrapper_destroy(*args)
    __swig_destroy__ = _quickfix.delete_MessageStoreFactoryExceptionWrapper
    __del__ = lambda self : None;
MessageStoreFactoryExceptionWrapper_swigregister = _quickfix.MessageStoreFactoryExceptionWrapper_swigregister
MessageStoreFactoryExceptionWrapper_swigregister(MessageStoreFactoryExceptionWrapper)

class MessageStoreExceptionWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreExceptionWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreExceptionWrapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_MessageStoreExceptionWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_MessageStoreExceptionWrapper
    __del__ = lambda self : None;
    def set(*args): return _quickfix.MessageStoreExceptionWrapper_set(*args)
    def get(*args): return _quickfix.MessageStoreExceptionWrapper_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum(*args)
    def getCreationTime(*args): return _quickfix.MessageStoreExceptionWrapper_getCreationTime(*args)
    def reset(*args): return _quickfix.MessageStoreExceptionWrapper_reset(*args)
    def refresh(*args): return _quickfix.MessageStoreExceptionWrapper_refresh(*args)
MessageStoreExceptionWrapper_swigregister = _quickfix.MessageStoreExceptionWrapper_swigregister
MessageStoreExceptionWrapper_swigregister(MessageStoreExceptionWrapper)

class FileStoreFactory(MessageStoreFactory):
    __swig_setmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStoreFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStoreFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FileStoreFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(*args): return _quickfix.FileStoreFactory_create(*args)
    def destroy(*args): return _quickfix.FileStoreFactory_destroy(*args)
    __swig_destroy__ = _quickfix.delete_FileStoreFactory
    __del__ = lambda self : None;
FileStoreFactory_swigregister = _quickfix.FileStoreFactory_swigregister
FileStoreFactory_swigregister(FileStoreFactory)

class FileStore(MessageStore):
    __swig_setmethods__ = {}
    for _s in [MessageStore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStore, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStore, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_FileStore(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_FileStore
    __del__ = lambda self : None;
    def set(*args): return _quickfix.FileStore_set(*args)
    def get(*args): return _quickfix.FileStore_get(*args)
    def getNextSenderMsgSeqNum(*args): return _quickfix.FileStore_getNextSenderMsgSeqNum(*args)
    def getNextTargetMsgSeqNum(*args): return _quickfix.FileStore_getNextTargetMsgSeqNum(*args)
    def setNextSenderMsgSeqNum(*args): return _quickfix.FileStore_setNextSenderMsgSeqNum(*args)
    def setNextTargetMsgSeqNum(*args): return _quickfix.FileStore_setNextTargetMsgSeqNum(*args)
    def incrNextSenderMsgSeqNum(*args): return _quickfix.FileStore_incrNextSenderMsgSeqNum(*args)
    def incrNextTargetMsgSeqNum(*args): return _quickfix.FileStore_incrNextTargetMsgSeqNum(*args)
    def getCreationTime(*args): return _quickfix.FileStore_getCreationTime(*args)
    def reset(*args): return _quickfix.FileStore_reset(*args)
    def refresh(*args): return _quickfix.FileStore_refresh(*args)
FileStore_swigregister = _quickfix.FileStore_swigregister
FileStore_swigregister(FileStore)

class Application(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Application
    __del__ = lambda self : None;
    def onCreate(*args): return _quickfix.Application_onCreate(*args)
    def onLogon(*args): return _quickfix.Application_onLogon(*args)
    def onLogout(*args): return _quickfix.Application_onLogout(*args)
    def toAdmin(*args): return _quickfix.Application_toAdmin(*args)
    def toApp(*args): return _quickfix.Application_toApp(*args)
    def fromAdmin(*args): return _quickfix.Application_fromAdmin(*args)
    def fromApp(*args): return _quickfix.Application_fromApp(*args)
    def __init__(self, *args): 
        if self.__class__ == Application:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _quickfix.new_Application(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _quickfix.disown_Application(self)
        return weakref_proxy(self)
Application_swigregister = _quickfix.Application_swigregister
Application_swigregister(Application)

class SynchronizedApplication(Application):
    __swig_setmethods__ = {}
    for _s in [Application]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchronizedApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SynchronizedApplication, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SynchronizedApplication(*args)
        try: self.this.append(this)
        except: self.this = this
    def onCreate(*args): return _quickfix.SynchronizedApplication_onCreate(*args)
    def onLogon(*args): return _quickfix.SynchronizedApplication_onLogon(*args)
    def onLogout(*args): return _quickfix.SynchronizedApplication_onLogout(*args)
    def toAdmin(*args): return _quickfix.SynchronizedApplication_toAdmin(*args)
    def toApp(*args): return _quickfix.SynchronizedApplication_toApp(*args)
    def fromAdmin(*args): return _quickfix.SynchronizedApplication_fromAdmin(*args)
    def fromApp(*args): return _quickfix.SynchronizedApplication_fromApp(*args)
    __swig_setmethods__["m_mutex"] = _quickfix.SynchronizedApplication_m_mutex_set
    __swig_getmethods__["m_mutex"] = _quickfix.SynchronizedApplication_m_mutex_get
    if _newclass:m_mutex = _swig_property(_quickfix.SynchronizedApplication_m_mutex_get, _quickfix.SynchronizedApplication_m_mutex_set)
    def app(*args): return _quickfix.SynchronizedApplication_app(*args)
    __swig_setmethods__["m_app"] = _quickfix.SynchronizedApplication_m_app_set
    __swig_getmethods__["m_app"] = _quickfix.SynchronizedApplication_m_app_get
    if _newclass:m_app = _swig_property(_quickfix.SynchronizedApplication_m_app_get, _quickfix.SynchronizedApplication_m_app_set)
    __swig_destroy__ = _quickfix.delete_SynchronizedApplication
    __del__ = lambda self : None;
SynchronizedApplication_swigregister = _quickfix.SynchronizedApplication_swigregister
SynchronizedApplication_swigregister(SynchronizedApplication)

class NullApplication(Application):
    __swig_setmethods__ = {}
    for _s in [Application]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullApplication, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_NullApplication(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_NullApplication
    __del__ = lambda self : None;
NullApplication_swigregister = _quickfix.NullApplication_swigregister
NullApplication_swigregister(NullApplication)

class Initiator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Initiator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Initiator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Initiator
    __del__ = lambda self : None;
    def start(self):
    	thread.start_new_thread(_quickfix_start_thread, (self,))


    def block(*args): return _quickfix.Initiator_block(*args)
    def poll(*args): return _quickfix.Initiator_poll(*args)
    def stop(*args): return _quickfix.Initiator_stop(*args)
    def isLoggedOn(*args): return _quickfix.Initiator_isLoggedOn(*args)
    def getSessions(*args): return _quickfix.Initiator_getSessions(*args)
    def getSession(*args): return _quickfix.Initiator_getSession(*args)
    def getSessionSettings(*args): return _quickfix.Initiator_getSessionSettings(*args)
    def has(*args): return _quickfix.Initiator_has(*args)
    def isStopped(*args): return _quickfix.Initiator_isStopped(*args)
    def getApplication(*args): return _quickfix.Initiator_getApplication(*args)
    def getMessageStoreFactory(*args): return _quickfix.Initiator_getMessageStoreFactory(*args)
    def getLog(*args): return _quickfix.Initiator_getLog(*args)
Initiator_swigregister = _quickfix.Initiator_swigregister
Initiator_swigregister(Initiator)

class SocketInitiatorBase(Initiator):
    __swig_setmethods__ = {}
    for _s in [Initiator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketInitiatorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Initiator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketInitiatorBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SocketInitiatorBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SocketInitiatorBase
    __del__ = lambda self : None;
SocketInitiatorBase_swigregister = _quickfix.SocketInitiatorBase_swigregister
SocketInitiatorBase_swigregister(SocketInitiatorBase)

class Acceptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acceptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Acceptor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Acceptor
    __del__ = lambda self : None;
    def getLog(*args): return _quickfix.Acceptor_getLog(*args)
    def start(self):
    	thread.start_new_thread(_quickfix_start_thread, (self,))


    def block(*args): return _quickfix.Acceptor_block(*args)
    def poll(*args): return _quickfix.Acceptor_poll(*args)
    def stop(*args): return _quickfix.Acceptor_stop(*args)
    def isLoggedOn(*args): return _quickfix.Acceptor_isLoggedOn(*args)
    def getSessions(*args): return _quickfix.Acceptor_getSessions(*args)
    def getSession(*args): return _quickfix.Acceptor_getSession(*args)
    def getSessionSettings(*args): return _quickfix.Acceptor_getSessionSettings(*args)
    def has(*args): return _quickfix.Acceptor_has(*args)
    def isStopped(*args): return _quickfix.Acceptor_isStopped(*args)
    def getApplication(*args): return _quickfix.Acceptor_getApplication(*args)
    def getMessageStoreFactory(*args): return _quickfix.Acceptor_getMessageStoreFactory(*args)
Acceptor_swigregister = _quickfix.Acceptor_swigregister
Acceptor_swigregister(Acceptor)

class SocketAcceptorBase(Acceptor):
    __swig_setmethods__ = {}
    for _s in [Acceptor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketAcceptorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Acceptor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketAcceptorBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_SocketAcceptorBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_SocketAcceptorBase
    __del__ = lambda self : None;
SocketAcceptorBase_swigregister = _quickfix.SocketAcceptorBase_swigregister
SocketAcceptorBase_swigregister(SocketAcceptorBase)

class DataDictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataDictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataDictionary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _quickfix.new_DataDictionary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quickfix.delete_DataDictionary
    __del__ = lambda self : None;
    def readFromURL(*args): return _quickfix.DataDictionary_readFromURL(*args)
    def readFromDocument(*args): return _quickfix.DataDictionary_readFromDocument(*args)
    def readFromStream(*args): return _quickfix.DataDictionary_readFromStream(*args)
    def getOrderedFields(*args): return _quickfix.DataDictionary_getOrderedFields(*args)
    def setVersion(*args): return _quickfix.DataDictionary_setVersion(*args)
    def getVersion(*args): return _quickfix.DataDictionary_getVersion(*args)
    def addField(*args): return _quickfix.DataDictionary_addField(*args)
    def addFieldName(*args): return _quickfix.DataDictionary_addFieldName(*args)
    def getFieldName(*args): return _quickfix.DataDictionary_getFieldName(*args)
    def getFieldTag(*args): return _quickfix.DataDictionary_getFieldTag(*args)
    def addValueName(*args): return _quickfix.DataDictionary_addValueName(*args)
    def getValueName(*args): return _quickfix.DataDictionary_getValueName(*args)
    def isField(*args): return _quickfix.DataDictionary_isField(*args)
    def addMsgType(*args): return _quickfix.DataDictionary_addMsgType(*args)
    def isMsgType(*args): return _quickfix.DataDictionary_isMsgType(*args)
    def addMsgField(*args): return _quickfix.DataDictionary_addMsgField(*args)
    def isMsgField(*args): return _quickfix.DataDictionary_isMsgField(*args)
    def addHeaderField(*args): return _quickfix.DataDictionary_addHeaderField(*args)
    def isHeaderField(*args): return _quickfix.DataDictionary_isHeaderField(*args)
    def addTrailerField(*args): return _quickfix.DataDictionary_addTrailerField(*args)
    def isTrailerField(*args): return _quickfix.DataDictionary_isTrailerField(*args)
    def addFieldType(*args): return _quickfix.DataDictionary_addFieldType(*args)
    def getFieldType(*args): return _quickfix.DataDictionary_getFieldType(*args)
    def addRequiredField(*args): return _quickfix.DataDictionary_addRequiredField(*args)
    def isRequiredField(*args): return _quickfix.DataDictionary_isRequiredField(*args)
    def addFieldValue(*args): return _quickfix.DataDictionary_addFieldValue(*args)
    def hasFieldValue(*args): return _quickfix.DataDictionary_hasFieldValue(*args)
    def isFieldValue(*args): return _quickfix.DataDictionary_isFieldValue(*args)
    def addGroup(*args): return _quickfix.DataDictionary_addGroup(*args)
    def isGroup(*args): return _quickfix.DataDictionary_isGroup(*args)
    def getGroup(*args): return _quickfix.DataDictionary_getGroup(*args)
    def isDataField(*args): return _quickfix.DataDictionary_isDataField(*args)
    def isMultipleValueField(*args): return _quickfix.DataDictionary_isMultipleValueField(*args)
    def checkFieldsOutOfOrder(*args): return _quickfix.DataDictionary_checkFieldsOutOfOrder(*args)
    def checkFieldsHaveValues(*args): return _quickfix.DataDictionary_checkFieldsHaveValues(*args)
    def checkUserDefinedFields(*args): return _quickfix.DataDictionary_checkUserDefinedFields(*args)
    def validate(*args): return _quickfix.DataDictionary_validate(*args)
DataDictionary_swigregister = _quickfix.DataDictionary_swigregister
DataDictionary_swigregister(DataDictionary)

#ifdef SWIGPYTHON
class SocketInitiator(SocketInitiatorBase):
	application = 0
	storeFactory = 0
	setting = 0
	logFactory = 0

	def __init__(self, application, storeFactory, settings, logFactory=None):
		if logFactory == None:
			SocketInitiatorBase.__init__(self, application, storeFactory, settings)
		else:
			SocketInitiatorBase.__init__(self, application, storeFactory, settings, logFactory)

		self.application = application
		self.storeFactory = storeFactory
		self.settings = settings
		self.logFactory = logFactory

class SocketAcceptor(SocketAcceptorBase):
	application = 0
	storeFactory = 0
	setting = 0
	logFactory = 0

	def __init__(self, application, storeFactory, settings, logFactory=None):
		if logFactory == None:
			SocketAcceptorBase.__init__(self, application, storeFactory, settings)
		else:
			SocketAcceptorBase.__init__(self, application, storeFactory, settings, logFactory)

		self.application = application
		self.storeFactory = storeFactory
		self.settings = settings
		self.logFactory = logFactory
#endif



import quickfix

class BeginSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 7)
		else:
			quickfix.IntField.__init__(self, 7, data)

class BeginString(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 8)
		else:
			quickfix.StringField.__init__(self, 8, data)

class BodyLength(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 9)
		else:
			quickfix.IntField.__init__(self, 9, data)

class CheckSum(quickfix.CheckSumField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CheckSumField.__init__(self, 10)
		else:
			quickfix.CheckSumField.__init__(self, 10, data)

class EndSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 16)
		else:
			quickfix.IntField.__init__(self, 16, data)

class MsgSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 34)
		else:
			quickfix.IntField.__init__(self, 34, data)

class MsgType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 35)
		else:
			quickfix.StringField.__init__(self, 35, data)

class NewSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 36)
		else:
			quickfix.IntField.__init__(self, 36, data)

class PossDupFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 43)
		else:
			quickfix.BoolField.__init__(self, 43, data)

class RefSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 45)
		else:
			quickfix.IntField.__init__(self, 45, data)

class SenderCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 49)
		else:
			quickfix.StringField.__init__(self, 49, data)

class SenderSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 50)
		else:
			quickfix.StringField.__init__(self, 50, data)

class SendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 52)
		else:
			quickfix.UtcTimeStampField.__init__(self, 52, data)

class TargetCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 56)
		else:
			quickfix.StringField.__init__(self, 56, data)

class TargetSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 57)
		else:
			quickfix.StringField.__init__(self, 57, data)

class Text(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 58)
		else:
			quickfix.StringField.__init__(self, 58, data)

class Signature(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 89)
		else:
			quickfix.StringField.__init__(self, 89, data)

class SecureDataLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 90)
		else:
			quickfix.IntField.__init__(self, 90, data)

class SecureData(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 91)
		else:
			quickfix.StringField.__init__(self, 91, data)

class SignatureLength(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 93)
		else:
			quickfix.IntField.__init__(self, 93, data)

class RawDataLength(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 95)
		else:
			quickfix.IntField.__init__(self, 95, data)

class RawData(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 96)
		else:
			quickfix.StringField.__init__(self, 96, data)

class PossResend(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 97)
		else:
			quickfix.BoolField.__init__(self, 97, data)

class EncryptMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 98)
		else:
			quickfix.IntField.__init__(self, 98, data)

class HeartBtInt(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 108)
		else:
			quickfix.IntField.__init__(self, 108, data)

class TestReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 112)
		else:
			quickfix.StringField.__init__(self, 112, data)

class OnBehalfOfCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 115)
		else:
			quickfix.StringField.__init__(self, 115, data)

class OnBehalfOfSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 116)
		else:
			quickfix.StringField.__init__(self, 116, data)

class OrigSendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 122)
		else:
			quickfix.UtcTimeStampField.__init__(self, 122, data)

class GapFillFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 123)
		else:
			quickfix.BoolField.__init__(self, 123, data)

class DeliverToCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 128)
		else:
			quickfix.StringField.__init__(self, 128, data)

class DeliverToSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 129)
		else:
			quickfix.StringField.__init__(self, 129, data)

class ResetSeqNumFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 141)
		else:
			quickfix.BoolField.__init__(self, 141, data)

class SenderLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 142)
		else:
			quickfix.StringField.__init__(self, 142, data)

class TargetLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 143)
		else:
			quickfix.StringField.__init__(self, 143, data)

class OnBehalfOfLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 144)
		else:
			quickfix.StringField.__init__(self, 144, data)

class DeliverToLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 145)
		else:
			quickfix.StringField.__init__(self, 145, data)

class XmlDataLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 212)
		else:
			quickfix.IntField.__init__(self, 212, data)

class XmlData(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 213)
		else:
			quickfix.StringField.__init__(self, 213, data)

class MessageEncoding(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 347)
		else:
			quickfix.StringField.__init__(self, 347, data)

class EncodedTextLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 354)
		else:
			quickfix.IntField.__init__(self, 354, data)

class EncodedText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 355)
		else:
			quickfix.StringField.__init__(self, 355, data)

class LastMsgSeqNumProcessed(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 369)
		else:
			quickfix.IntField.__init__(self, 369, data)

class RefTagID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 371)
		else:
			quickfix.IntField.__init__(self, 371, data)

class RefMsgType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 372)
		else:
			quickfix.StringField.__init__(self, 372, data)

class SessionRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 373)
		else:
			quickfix.IntField.__init__(self, 373, data)

class MaxMessageSize(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 383)
		else:
			quickfix.IntField.__init__(self, 383, data)

class NoMsgTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 384)
		else:
			quickfix.IntField.__init__(self, 384, data)

class MsgDirection(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 385)
		else:
			quickfix.CharField.__init__(self, 385, data)

class TestMessageIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 464)
		else:
			quickfix.BoolField.__init__(self, 464, data)

class Username(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 553)
		else:
			quickfix.StringField.__init__(self, 553, data)

class Password(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 554)
		else:
			quickfix.StringField.__init__(self, 554, data)

class NoHops(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 627)
		else:
			quickfix.IntField.__init__(self, 627, data)

class HopCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 628)
		else:
			quickfix.StringField.__init__(self, 628, data)

class HopSendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 629)
		else:
			quickfix.UtcTimeStampField.__init__(self, 629, data)

class HopRefID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 630)
		else:
			quickfix.IntField.__init__(self, 630, data)

class NextExpectedMsgSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 789)
		else:
			quickfix.IntField.__init__(self, 789, data)

class ApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1128)
		else:
			quickfix.StringField.__init__(self, 1128, data)

class CstmApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1129)
		else:
			quickfix.StringField.__init__(self, 1129, data)

class RefApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1130)
		else:
			quickfix.StringField.__init__(self, 1130, data)

class RefCstmApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1131)
		else:
			quickfix.StringField.__init__(self, 1131, data)

class DefaultApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1137)
		else:
			quickfix.StringField.__init__(self, 1137, data)

